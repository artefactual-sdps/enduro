/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * AIPDeletionRequest describes a request to delete an AIP.
 * @export
 * @interface EnduroStorageAipDeletionRequest
 */
export interface EnduroStorageAipDeletionRequest {
    /**
     * Identifier of related AIP
     * @type {string}
     * @memberof EnduroStorageAipDeletionRequest
     */
    aipUuid: string;
    /**
     * Reason for deletion
     * @type {string}
     * @memberof EnduroStorageAipDeletionRequest
     */
    reason: string;
    /**
     * Time request was made
     * @type {Date}
     * @memberof EnduroStorageAipDeletionRequest
     */
    requestedAt: Date;
    /**
     * User who made the request
     * @type {string}
     * @memberof EnduroStorageAipDeletionRequest
     */
    requester: string;
    /**
     * Time request was reviewed
     * @type {Date}
     * @memberof EnduroStorageAipDeletionRequest
     */
    reviewedAt?: Date;
    /**
     * User who reviewed the request
     * @type {string}
     * @memberof EnduroStorageAipDeletionRequest
     */
    reviewer?: string;
    /**
     * Status of request
     * @type {string}
     * @memberof EnduroStorageAipDeletionRequest
     */
    status: EnduroStorageAipDeletionRequestStatusEnum;
    /**
     * Identifier of deletion request
     * @type {string}
     * @memberof EnduroStorageAipDeletionRequest
     */
    uuid: string;
}


/**
 * @export
 */
export const EnduroStorageAipDeletionRequestStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected',
    Canceled: 'canceled'
} as const;
export type EnduroStorageAipDeletionRequestStatusEnum = typeof EnduroStorageAipDeletionRequestStatusEnum[keyof typeof EnduroStorageAipDeletionRequestStatusEnum];


/**
 * Check if a given object implements the EnduroStorageAipDeletionRequest interface.
 */
export function instanceOfEnduroStorageAipDeletionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "aipUuid" in value;
    isInstance = isInstance && "reason" in value;
    isInstance = isInstance && "requestedAt" in value;
    isInstance = isInstance && "requester" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "uuid" in value;

    return isInstance;
}

export function EnduroStorageAipDeletionRequestFromJSON(json: any): EnduroStorageAipDeletionRequest {
    return EnduroStorageAipDeletionRequestFromJSONTyped(json, false);
}

export function EnduroStorageAipDeletionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnduroStorageAipDeletionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aipUuid': json['aip_uuid'],
        'reason': json['reason'],
        'requestedAt': (new Date(json['requested_at'])),
        'requester': json['requester'],
        'reviewedAt': !exists(json, 'reviewed_at') ? undefined : (new Date(json['reviewed_at'])),
        'reviewer': !exists(json, 'reviewer') ? undefined : json['reviewer'],
        'status': json['status'],
        'uuid': json['uuid'],
    };
}

export function EnduroStorageAipDeletionRequestToJSON(value?: EnduroStorageAipDeletionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aip_uuid': value.aipUuid,
        'reason': value.reason,
        'requested_at': (value.requestedAt.toISOString()),
        'requester': value.requester,
        'reviewed_at': value.reviewedAt === undefined ? undefined : (value.reviewedAt.toISOString()),
        'reviewer': value.reviewer,
        'status': value.status,
        'uuid': value.uuid,
    };
}

