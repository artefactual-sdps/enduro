/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface S3Config
 */
export interface S3Config {
    /**
     * 
     * @type {string}
     * @memberof S3Config
     */
    bucket: string;
    /**
     * 
     * @type {string}
     * @memberof S3Config
     */
    endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof S3Config
     */
    key?: string;
    /**
     * 
     * @type {boolean}
     * @memberof S3Config
     */
    pathStyle?: boolean;
    /**
     * 
     * @type {string}
     * @memberof S3Config
     */
    profile?: string;
    /**
     * 
     * @type {string}
     * @memberof S3Config
     */
    region: string;
    /**
     * 
     * @type {string}
     * @memberof S3Config
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof S3Config
     */
    token?: string;
}

/**
 * Check if a given object implements the S3Config interface.
 */
export function instanceOfS3Config(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bucket" in value;
    isInstance = isInstance && "region" in value;

    return isInstance;
}

export function S3ConfigFromJSON(json: any): S3Config {
    return S3ConfigFromJSONTyped(json, false);
}

export function S3ConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): S3Config {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bucket': json['bucket'],
        'endpoint': !exists(json, 'endpoint') ? undefined : json['endpoint'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'pathStyle': !exists(json, 'path_style') ? undefined : json['path_style'],
        'profile': !exists(json, 'profile') ? undefined : json['profile'],
        'region': json['region'],
        'secret': !exists(json, 'secret') ? undefined : json['secret'],
        'token': !exists(json, 'token') ? undefined : json['token'],
    };
}

export function S3ConfigToJSON(value?: S3Config | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bucket': value.bucket,
        'endpoint': value.endpoint,
        'key': value.key,
        'path_style': value.pathStyle,
        'profile': value.profile,
        'region': value.region,
        'secret': value.secret,
        'token': value.token,
    };
}

