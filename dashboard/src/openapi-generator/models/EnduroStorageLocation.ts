/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnduroStorageLocationConfig } from './EnduroStorageLocationConfig';
import {
    EnduroStorageLocationConfigFromJSON,
    EnduroStorageLocationConfigFromJSONTyped,
    EnduroStorageLocationConfigToJSON,
} from './EnduroStorageLocationConfig';

/**
 * A Location describes a location retrieved by the storage service.
 * @export
 * @interface EnduroStorageLocation
 */
export interface EnduroStorageLocation {
    /**
     * 
     * @type {EnduroStorageLocationConfig}
     * @memberof EnduroStorageLocation
     */
    config?: EnduroStorageLocationConfig;
    /**
     * Creation datetime
     * @type {Date}
     * @memberof EnduroStorageLocation
     */
    createdAt: Date;
    /**
     * Description of the location
     * @type {string}
     * @memberof EnduroStorageLocation
     */
    description?: string;
    /**
     * Name of location
     * @type {string}
     * @memberof EnduroStorageLocation
     */
    name: string;
    /**
     * Purpose of the location
     * @type {string}
     * @memberof EnduroStorageLocation
     */
    purpose: EnduroStorageLocationPurposeEnum;
    /**
     * Data source of the location
     * @type {string}
     * @memberof EnduroStorageLocation
     */
    source: EnduroStorageLocationSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof EnduroStorageLocation
     */
    uuid: string;
}


/**
 * @export
 */
export const EnduroStorageLocationPurposeEnum = {
    Unspecified: 'unspecified',
    AipStore: 'aip_store'
} as const;
export type EnduroStorageLocationPurposeEnum = typeof EnduroStorageLocationPurposeEnum[keyof typeof EnduroStorageLocationPurposeEnum];

/**
 * @export
 */
export const EnduroStorageLocationSourceEnum = {
    Unspecified: 'unspecified',
    Minio: 'minio',
    Sftp: 'sftp',
    Amss: 'amss'
} as const;
export type EnduroStorageLocationSourceEnum = typeof EnduroStorageLocationSourceEnum[keyof typeof EnduroStorageLocationSourceEnum];


/**
 * Check if a given object implements the EnduroStorageLocation interface.
 */
export function instanceOfEnduroStorageLocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "purpose" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "uuid" in value;

    return isInstance;
}

export function EnduroStorageLocationFromJSON(json: any): EnduroStorageLocation {
    return EnduroStorageLocationFromJSONTyped(json, false);
}

export function EnduroStorageLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnduroStorageLocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'config': !exists(json, 'config') ? undefined : EnduroStorageLocationConfigFromJSON(json['config']),
        'createdAt': (new Date(json['created_at'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'name': json['name'],
        'purpose': json['purpose'],
        'source': json['source'],
        'uuid': json['uuid'],
    };
}

export function EnduroStorageLocationToJSON(value?: EnduroStorageLocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'config': EnduroStorageLocationConfigToJSON(value.config),
        'created_at': (value.createdAt.toISOString()),
        'description': value.description,
        'name': value.name,
        'purpose': value.purpose,
        'source': value.source,
        'uuid': value.uuid,
    };
}

