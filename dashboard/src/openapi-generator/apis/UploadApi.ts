/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface UploadUploadRequest {
    contentType?: string;
}

/**
 * UploadApi - interface
 * 
 * @export
 * @interface UploadApiInterface
 */
export interface UploadApiInterface {
    /**
     * Upload a package to trigger an ingest workflow
     * @summary upload upload
     * @param {string} [contentType] Content-Type header, must define value for multipart boundary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApiInterface
     */
    uploadUploadRaw(requestParameters: UploadUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Upload a package to trigger an ingest workflow
     * upload upload
     */
    uploadUpload(requestParameters: UploadUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class UploadApi extends runtime.BaseAPI implements UploadApiInterface {

    /**
     * Upload a package to trigger an ingest workflow
     * upload upload
     */
    async uploadUploadRaw(requestParameters: UploadUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload a package to trigger an ingest workflow
     * upload upload
     */
    async uploadUpload(requestParameters: UploadUploadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadUploadRaw(requestParameters, initOverrides);
    }

}
