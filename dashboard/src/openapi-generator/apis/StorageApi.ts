/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AIPResponse,
  AIPWorkflows,
  AIPs,
  ConfirmSipRequestBody,
  CreateAipRequestBody,
  CreateLocationRequestBody,
  CreateLocationResult,
  EnduroStorageAip,
  ListAipWorkflowsRequestBody,
  Location,
  LocationResponse,
  MoveStatusResult,
  RequestAipDeletionRequestBody,
  ReviewAipDeletionRequestBody,
  SIPNotFound,
  SubmitAIPResult,
  SubmitAipRequestBody,
} from '../models/index';
import {
    AIPResponseFromJSON,
    AIPResponseToJSON,
    AIPWorkflowsFromJSON,
    AIPWorkflowsToJSON,
    AIPsFromJSON,
    AIPsToJSON,
    ConfirmSipRequestBodyFromJSON,
    ConfirmSipRequestBodyToJSON,
    CreateAipRequestBodyFromJSON,
    CreateAipRequestBodyToJSON,
    CreateLocationRequestBodyFromJSON,
    CreateLocationRequestBodyToJSON,
    CreateLocationResultFromJSON,
    CreateLocationResultToJSON,
    EnduroStorageAipFromJSON,
    EnduroStorageAipToJSON,
    ListAipWorkflowsRequestBodyFromJSON,
    ListAipWorkflowsRequestBodyToJSON,
    LocationFromJSON,
    LocationToJSON,
    LocationResponseFromJSON,
    LocationResponseToJSON,
    MoveStatusResultFromJSON,
    MoveStatusResultToJSON,
    RequestAipDeletionRequestBodyFromJSON,
    RequestAipDeletionRequestBodyToJSON,
    ReviewAipDeletionRequestBodyFromJSON,
    ReviewAipDeletionRequestBodyToJSON,
    SIPNotFoundFromJSON,
    SIPNotFoundToJSON,
    SubmitAIPResultFromJSON,
    SubmitAIPResultToJSON,
    SubmitAipRequestBodyFromJSON,
    SubmitAipRequestBodyToJSON,
} from '../models/index';

export interface StorageCreateAipRequest {
    createAipRequestBody: CreateAipRequestBody;
}

export interface StorageCreateLocationRequest {
    createLocationRequestBody: CreateLocationRequestBody;
}

export interface StorageDownloadAipRequest {
    uuid: string;
}

export interface StorageListAipWorkflowsRequest {
    uuid: string;
    listAipWorkflowsRequestBody: ListAipWorkflowsRequestBody;
}

export interface StorageListAipsRequest {
    name?: string;
    earliestCreatedTime?: Date;
    latestCreatedTime?: Date;
    status?: StorageListAipsStatusEnum;
    limit?: number;
    offset?: number;
}

export interface StorageListLocationAipsRequest {
    uuid: string;
}

export interface StorageMoveAipRequest {
    uuid: string;
    confirmSipRequestBody: ConfirmSipRequestBody;
}

export interface StorageMoveAipStatusRequest {
    uuid: string;
}

export interface StorageRejectAipRequest {
    uuid: string;
}

export interface StorageRequestAipDeletionRequest {
    uuid: string;
    requestAipDeletionRequestBody: RequestAipDeletionRequestBody;
}

export interface StorageReviewAipDeletionRequest {
    uuid: string;
    reviewAipDeletionRequestBody: ReviewAipDeletionRequestBody;
}

export interface StorageShowAipRequest {
    uuid: string;
}

export interface StorageShowLocationRequest {
    uuid: string;
}

export interface StorageSubmitAipRequest {
    uuid: string;
    submitAipRequestBody: SubmitAipRequestBody;
}

export interface StorageUpdateAipRequest {
    uuid: string;
}

/**
 * StorageApi - interface
 * 
 * @export
 * @interface StorageApiInterface
 */
export interface StorageApiInterface {
    /**
     * Create a new AIP
     * @summary create_aip storage
     * @param {CreateAipRequestBody} createAipRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageCreateAipRaw(requestParameters: StorageCreateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnduroStorageAip>>;

    /**
     * Create a new AIP
     * create_aip storage
     */
    storageCreateAip(requestParameters: StorageCreateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnduroStorageAip>;

    /**
     * Create a storage location
     * @summary create_location storage
     * @param {CreateLocationRequestBody} createLocationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageCreateLocationRaw(requestParameters: StorageCreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLocationResult>>;

    /**
     * Create a storage location
     * create_location storage
     */
    storageCreateLocation(requestParameters: StorageCreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLocationResult>;

    /**
     * Download AIP by AIPID
     * @summary download_aip storage
     * @param {string} uuid Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageDownloadAipRaw(requestParameters: StorageDownloadAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Download AIP by AIPID
     * download_aip storage
     */
    storageDownloadAip(requestParameters: StorageDownloadAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * List workflows related to an AIP
     * @summary list_aip_workflows storage
     * @param {string} uuid Identifier of AIP
     * @param {ListAipWorkflowsRequestBody} listAipWorkflowsRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageListAipWorkflowsRaw(requestParameters: StorageListAipWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AIPWorkflows>>;

    /**
     * List workflows related to an AIP
     * list_aip_workflows storage
     */
    storageListAipWorkflows(requestParameters: StorageListAipWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AIPWorkflows>;

    /**
     * List all AIPs
     * @summary list_aips storage
     * @param {string} [name] 
     * @param {Date} [earliestCreatedTime] 
     * @param {Date} [latestCreatedTime] 
     * @param {'unspecified' | 'stored' | 'pending' | 'processing' | 'deleted' | 'queued'} [status] 
     * @param {number} [limit] Limit number of results to return
     * @param {number} [offset] Offset from the beginning of the found set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageListAipsRaw(requestParameters: StorageListAipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AIPs>>;

    /**
     * List all AIPs
     * list_aips storage
     */
    storageListAips(requestParameters: StorageListAipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AIPs>;

    /**
     * List all the AIPs stored in the location with UUID
     * @summary list_location_aips storage
     * @param {string} uuid Identifier of location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageListLocationAipsRaw(requestParameters: StorageListLocationAipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AIPResponse>>>;

    /**
     * List all the AIPs stored in the location with UUID
     * list_location_aips storage
     */
    storageListLocationAips(requestParameters: StorageListLocationAipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AIPResponse>>;

    /**
     * List locations
     * @summary list_locations storage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageListLocationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>>;

    /**
     * List locations
     * list_locations storage
     */
    storageListLocations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>>;

    /**
     * Move an AIP to a permanent storage location
     * @summary move_aip storage
     * @param {string} uuid Identifier of AIP
     * @param {ConfirmSipRequestBody} confirmSipRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageMoveAipRaw(requestParameters: StorageMoveAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Move an AIP to a permanent storage location
     * move_aip storage
     */
    storageMoveAip(requestParameters: StorageMoveAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve the status of a permanent storage location move of the AIP
     * @summary move_aip_status storage
     * @param {string} uuid Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageMoveAipStatusRaw(requestParameters: StorageMoveAipStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveStatusResult>>;

    /**
     * Retrieve the status of a permanent storage location move of the AIP
     * move_aip_status storage
     */
    storageMoveAipStatus(requestParameters: StorageMoveAipStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveStatusResult>;

    /**
     * Reject an AIP
     * @summary reject_aip storage
     * @param {string} uuid Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageRejectAipRaw(requestParameters: StorageRejectAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Reject an AIP
     * reject_aip storage
     */
    storageRejectAip(requestParameters: StorageRejectAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Request an AIP deletion
     * @summary request_aip_deletion storage
     * @param {string} uuid Identifier of AIP
     * @param {RequestAipDeletionRequestBody} requestAipDeletionRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageRequestAipDeletionRaw(requestParameters: StorageRequestAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Request an AIP deletion
     * request_aip_deletion storage
     */
    storageRequestAipDeletion(requestParameters: StorageRequestAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Review an AIP deletion request
     * @summary review_aip_deletion storage
     * @param {string} uuid Identifier of AIP
     * @param {ReviewAipDeletionRequestBody} reviewAipDeletionRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageReviewAipDeletionRaw(requestParameters: StorageReviewAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Review an AIP deletion request
     * review_aip_deletion storage
     */
    storageReviewAipDeletion(requestParameters: StorageReviewAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Show AIP by AIPID
     * @summary show_aip storage
     * @param {string} uuid Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageShowAipRaw(requestParameters: StorageShowAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnduroStorageAip>>;

    /**
     * Show AIP by AIPID
     * show_aip storage
     */
    storageShowAip(requestParameters: StorageShowAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnduroStorageAip>;

    /**
     * Show location by UUID
     * @summary show_location storage
     * @param {string} uuid Identifier of location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageShowLocationRaw(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Show location by UUID
     * show_location storage
     */
    storageShowLocation(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * Start the submission of an AIP
     * @summary submit_aip storage
     * @param {string} uuid Identifier of AIP
     * @param {SubmitAipRequestBody} submitAipRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageSubmitAipRaw(requestParameters: StorageSubmitAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitAIPResult>>;

    /**
     * Start the submission of an AIP
     * submit_aip storage
     */
    storageSubmitAip(requestParameters: StorageSubmitAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitAIPResult>;

    /**
     * Signal that an AIP submission is complete
     * @summary update_aip storage
     * @param {string} uuid Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageUpdateAipRaw(requestParameters: StorageUpdateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Signal that an AIP submission is complete
     * update_aip storage
     */
    storageUpdateAip(requestParameters: StorageUpdateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class StorageApi extends runtime.BaseAPI implements StorageApiInterface {

    /**
     * Create a new AIP
     * create_aip storage
     */
    async storageCreateAipRaw(requestParameters: StorageCreateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnduroStorageAip>> {
        if (requestParameters.createAipRequestBody === null || requestParameters.createAipRequestBody === undefined) {
            throw new runtime.RequiredError('createAipRequestBody','Required parameter requestParameters.createAipRequestBody was null or undefined when calling storageCreateAip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAipRequestBodyToJSON(requestParameters.createAipRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnduroStorageAipFromJSON(jsonValue));
    }

    /**
     * Create a new AIP
     * create_aip storage
     */
    async storageCreateAip(requestParameters: StorageCreateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnduroStorageAip> {
        const response = await this.storageCreateAipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a storage location
     * create_location storage
     */
    async storageCreateLocationRaw(requestParameters: StorageCreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLocationResult>> {
        if (requestParameters.createLocationRequestBody === null || requestParameters.createLocationRequestBody === undefined) {
            throw new runtime.RequiredError('createLocationRequestBody','Required parameter requestParameters.createLocationRequestBody was null or undefined when calling storageCreateLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLocationRequestBodyToJSON(requestParameters.createLocationRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLocationResultFromJSON(jsonValue));
    }

    /**
     * Create a storage location
     * create_location storage
     */
    async storageCreateLocation(requestParameters: StorageCreateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLocationResult> {
        const response = await this.storageCreateLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download AIP by AIPID
     * download_aip storage
     */
    async storageDownloadAipRaw(requestParameters: StorageDownloadAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageDownloadAip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/download`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download AIP by AIPID
     * download_aip storage
     */
    async storageDownloadAip(requestParameters: StorageDownloadAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.storageDownloadAipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List workflows related to an AIP
     * list_aip_workflows storage
     */
    async storageListAipWorkflowsRaw(requestParameters: StorageListAipWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AIPWorkflows>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageListAipWorkflows.');
        }

        if (requestParameters.listAipWorkflowsRequestBody === null || requestParameters.listAipWorkflowsRequestBody === undefined) {
            throw new runtime.RequiredError('listAipWorkflowsRequestBody','Required parameter requestParameters.listAipWorkflowsRequestBody was null or undefined when calling storageListAipWorkflows.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/workflows`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: ListAipWorkflowsRequestBodyToJSON(requestParameters.listAipWorkflowsRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AIPWorkflowsFromJSON(jsonValue));
    }

    /**
     * List workflows related to an AIP
     * list_aip_workflows storage
     */
    async storageListAipWorkflows(requestParameters: StorageListAipWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AIPWorkflows> {
        const response = await this.storageListAipWorkflowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all AIPs
     * list_aips storage
     */
    async storageListAipsRaw(requestParameters: StorageListAipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AIPs>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.earliestCreatedTime !== undefined) {
            queryParameters['earliest_created_time'] = (requestParameters.earliestCreatedTime as any).toISOString();
        }

        if (requestParameters.latestCreatedTime !== undefined) {
            queryParameters['latest_created_time'] = (requestParameters.latestCreatedTime as any).toISOString();
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AIPsFromJSON(jsonValue));
    }

    /**
     * List all AIPs
     * list_aips storage
     */
    async storageListAips(requestParameters: StorageListAipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AIPs> {
        const response = await this.storageListAipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the AIPs stored in the location with UUID
     * list_location_aips storage
     */
    async storageListLocationAipsRaw(requestParameters: StorageListLocationAipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AIPResponse>>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageListLocationAips.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/locations/{uuid}/aips`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AIPResponseFromJSON));
    }

    /**
     * List all the AIPs stored in the location with UUID
     * list_location_aips storage
     */
    async storageListLocationAips(requestParameters: StorageListLocationAipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AIPResponse>> {
        const response = await this.storageListLocationAipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List locations
     * list_locations storage
     */
    async storageListLocationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationResponseFromJSON));
    }

    /**
     * List locations
     * list_locations storage
     */
    async storageListLocations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>> {
        const response = await this.storageListLocationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Move an AIP to a permanent storage location
     * move_aip storage
     */
    async storageMoveAipRaw(requestParameters: StorageMoveAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageMoveAip.');
        }

        if (requestParameters.confirmSipRequestBody === null || requestParameters.confirmSipRequestBody === undefined) {
            throw new runtime.RequiredError('confirmSipRequestBody','Required parameter requestParameters.confirmSipRequestBody was null or undefined when calling storageMoveAip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/store`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmSipRequestBodyToJSON(requestParameters.confirmSipRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Move an AIP to a permanent storage location
     * move_aip storage
     */
    async storageMoveAip(requestParameters: StorageMoveAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageMoveAipRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the status of a permanent storage location move of the AIP
     * move_aip_status storage
     */
    async storageMoveAipStatusRaw(requestParameters: StorageMoveAipStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveStatusResult>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageMoveAipStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/store`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoveStatusResultFromJSON(jsonValue));
    }

    /**
     * Retrieve the status of a permanent storage location move of the AIP
     * move_aip_status storage
     */
    async storageMoveAipStatus(requestParameters: StorageMoveAipStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveStatusResult> {
        const response = await this.storageMoveAipStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reject an AIP
     * reject_aip storage
     */
    async storageRejectAipRaw(requestParameters: StorageRejectAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageRejectAip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/reject`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reject an AIP
     * reject_aip storage
     */
    async storageRejectAip(requestParameters: StorageRejectAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageRejectAipRaw(requestParameters, initOverrides);
    }

    /**
     * Request an AIP deletion
     * request_aip_deletion storage
     */
    async storageRequestAipDeletionRaw(requestParameters: StorageRequestAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageRequestAipDeletion.');
        }

        if (requestParameters.requestAipDeletionRequestBody === null || requestParameters.requestAipDeletionRequestBody === undefined) {
            throw new runtime.RequiredError('requestAipDeletionRequestBody','Required parameter requestParameters.requestAipDeletionRequestBody was null or undefined when calling storageRequestAipDeletion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/deletion-request`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestAipDeletionRequestBodyToJSON(requestParameters.requestAipDeletionRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request an AIP deletion
     * request_aip_deletion storage
     */
    async storageRequestAipDeletion(requestParameters: StorageRequestAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageRequestAipDeletionRaw(requestParameters, initOverrides);
    }

    /**
     * Review an AIP deletion request
     * review_aip_deletion storage
     */
    async storageReviewAipDeletionRaw(requestParameters: StorageReviewAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageReviewAipDeletion.');
        }

        if (requestParameters.reviewAipDeletionRequestBody === null || requestParameters.reviewAipDeletionRequestBody === undefined) {
            throw new runtime.RequiredError('reviewAipDeletionRequestBody','Required parameter requestParameters.reviewAipDeletionRequestBody was null or undefined when calling storageReviewAipDeletion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/deletion-review`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewAipDeletionRequestBodyToJSON(requestParameters.reviewAipDeletionRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Review an AIP deletion request
     * review_aip_deletion storage
     */
    async storageReviewAipDeletion(requestParameters: StorageReviewAipDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageReviewAipDeletionRaw(requestParameters, initOverrides);
    }

    /**
     * Show AIP by AIPID
     * show_aip storage
     */
    async storageShowAipRaw(requestParameters: StorageShowAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnduroStorageAip>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageShowAip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnduroStorageAipFromJSON(jsonValue));
    }

    /**
     * Show AIP by AIPID
     * show_aip storage
     */
    async storageShowAip(requestParameters: StorageShowAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnduroStorageAip> {
        const response = await this.storageShowAipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show location by UUID
     * show_location storage
     */
    async storageShowLocationRaw(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageShowLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/locations/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Show location by UUID
     * show_location storage
     */
    async storageShowLocation(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.storageShowLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the submission of an AIP
     * submit_aip storage
     */
    async storageSubmitAipRaw(requestParameters: StorageSubmitAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitAIPResult>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageSubmitAip.');
        }

        if (requestParameters.submitAipRequestBody === null || requestParameters.submitAipRequestBody === undefined) {
            throw new runtime.RequiredError('submitAipRequestBody','Required parameter requestParameters.submitAipRequestBody was null or undefined when calling storageSubmitAip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/submit`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitAipRequestBodyToJSON(requestParameters.submitAipRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmitAIPResultFromJSON(jsonValue));
    }

    /**
     * Start the submission of an AIP
     * submit_aip storage
     */
    async storageSubmitAip(requestParameters: StorageSubmitAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitAIPResult> {
        const response = await this.storageSubmitAipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signal that an AIP submission is complete
     * update_aip storage
     */
    async storageUpdateAipRaw(requestParameters: StorageUpdateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageUpdateAip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/aips/{uuid}/update`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Signal that an AIP submission is complete
     * update_aip storage
     */
    async storageUpdateAip(requestParameters: StorageUpdateAipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageUpdateAipRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const StorageListAipsStatusEnum = {
    Unspecified: 'unspecified',
    Stored: 'stored',
    Pending: 'pending',
    Processing: 'processing',
    Deleted: 'deleted',
    Queued: 'queued'
} as const;
export type StorageListAipsStatusEnum = typeof StorageListAipsStatusEnum[keyof typeof StorageListAipsStatusEnum];
