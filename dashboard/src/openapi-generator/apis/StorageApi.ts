/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StorageSubmitNotAvailableResponseBody,
    StorageSubmitNotAvailableResponseBodyFromJSON,
    StorageSubmitNotAvailableResponseBodyToJSON,
    StorageSubmitNotValidResponseBody,
    StorageSubmitNotValidResponseBodyFromJSON,
    StorageSubmitNotValidResponseBodyToJSON,
    StorageSubmitResponseBody,
    StorageSubmitResponseBodyFromJSON,
    StorageSubmitResponseBodyToJSON,
    StorageUpdateNotAvailableResponseBody,
    StorageUpdateNotAvailableResponseBodyFromJSON,
    StorageUpdateNotAvailableResponseBodyToJSON,
    StorageUpdateNotValidResponseBody,
    StorageUpdateNotValidResponseBodyFromJSON,
    StorageUpdateNotValidResponseBodyToJSON,
    StorageUpdateRequestBody,
    StorageUpdateRequestBodyFromJSON,
    StorageUpdateRequestBodyToJSON,
    StorageUpdateResponseBody,
    StorageUpdateResponseBodyFromJSON,
    StorageUpdateResponseBodyToJSON,
} from '../models';

export interface StorageUpdateRequest {
    updateRequestBody: StorageUpdateRequestBody;
}

/**
 * StorageApi - interface
 * 
 * @export
 * @interface StorageApiInterface
 */
export interface StorageApiInterface {
    /**
     * XXX
     * @summary submit storage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageSubmitRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StorageSubmitResponseBody>>;

    /**
     * XXX
     * submit storage
     */
    storageSubmit(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StorageSubmitResponseBody>;

    /**
     * Signal the storage service that an upload is complete
     * @summary update storage
     * @param {StorageUpdateRequestBody} updateRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageUpdateRaw(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StorageUpdateResponseBody>>;

    /**
     * Signal the storage service that an upload is complete
     * update storage
     */
    storageUpdate(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StorageUpdateResponseBody>;

}

/**
 * 
 */
export class StorageApi extends runtime.BaseAPI implements StorageApiInterface {

    /**
     * XXX
     * submit storage
     */
    async storageSubmitRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StorageSubmitResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/storage/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageSubmitResponseBodyFromJSON(jsonValue));
    }

    /**
     * XXX
     * submit storage
     */
    async storageSubmit(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StorageSubmitResponseBody> {
        const response = await this.storageSubmitRaw(initOverrides);
        return await response.value();
    }

    /**
     * Signal the storage service that an upload is complete
     * update storage
     */
    async storageUpdateRaw(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StorageUpdateResponseBody>> {
        if (requestParameters.updateRequestBody === null || requestParameters.updateRequestBody === undefined) {
            throw new runtime.RequiredError('updateRequestBody','Required parameter requestParameters.updateRequestBody was null or undefined when calling storageUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/storage/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StorageUpdateRequestBodyToJSON(requestParameters.updateRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageUpdateResponseBodyFromJSON(jsonValue));
    }

    /**
     * Signal the storage service that an upload is complete
     * update storage
     */
    async storageUpdate(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StorageUpdateResponseBody> {
        const response = await this.storageUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
