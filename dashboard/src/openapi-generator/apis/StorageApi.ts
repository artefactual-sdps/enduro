/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddLocationRequestBody,
  AddLocationResult,
  ConfirmRequestBody,
  CreateRequestBody,
  Location,
  LocationNotFound,
  LocationResponse,
  MoveStatusResult,
  Package,
  PackageNotFound2,
  PackageResponse,
  SubmitRequestBody,
  SubmitResult,
} from '../models/index';
import {
    AddLocationRequestBodyFromJSON,
    AddLocationRequestBodyToJSON,
    AddLocationResultFromJSON,
    AddLocationResultToJSON,
    ConfirmRequestBodyFromJSON,
    ConfirmRequestBodyToJSON,
    CreateRequestBodyFromJSON,
    CreateRequestBodyToJSON,
    LocationFromJSON,
    LocationToJSON,
    LocationNotFoundFromJSON,
    LocationNotFoundToJSON,
    LocationResponseFromJSON,
    LocationResponseToJSON,
    MoveStatusResultFromJSON,
    MoveStatusResultToJSON,
    PackageFromJSON,
    PackageToJSON,
    PackageNotFound2FromJSON,
    PackageNotFound2ToJSON,
    PackageResponseFromJSON,
    PackageResponseToJSON,
    SubmitRequestBodyFromJSON,
    SubmitRequestBodyToJSON,
    SubmitResultFromJSON,
    SubmitResultToJSON,
} from '../models/index';

export interface StorageAddLocationRequest {
    addLocationRequestBody: AddLocationRequestBody;
}

export interface StorageCreateRequest {
    createRequestBody: CreateRequestBody;
}

export interface StorageDownloadRequest {
    aipId: string;
}

export interface StorageLocationPackagesRequest {
    uuid: string;
}

export interface StorageMoveRequest {
    aipId: string;
    confirmRequestBody: ConfirmRequestBody;
}

export interface StorageMoveStatusRequest {
    aipId: string;
}

export interface StorageRejectRequest {
    aipId: string;
}

export interface StorageShowRequest {
    aipId: string;
}

export interface StorageShowLocationRequest {
    uuid: string;
}

export interface StorageSubmitRequest {
    aipId: string;
    submitRequestBody: SubmitRequestBody;
}

export interface StorageUpdateRequest {
    aipId: string;
}

/**
 * StorageApi - interface
 * 
 * @export
 * @interface StorageApiInterface
 */
export interface StorageApiInterface {
    /**
     * Add a storage location
     * @summary add_location storage
     * @param {AddLocationRequestBody} addLocationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageAddLocationRaw(requestParameters: StorageAddLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddLocationResult>>;

    /**
     * Add a storage location
     * add_location storage
     */
    storageAddLocation(requestParameters: StorageAddLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddLocationResult>;

    /**
     * Create a new package
     * @summary create storage
     * @param {CreateRequestBody} createRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageCreateRaw(requestParameters: StorageCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>>;

    /**
     * Create a new package
     * create storage
     */
    storageCreate(requestParameters: StorageCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package>;

    /**
     * Download package by AIPID
     * @summary download storage
     * @param {string} aipId Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageDownloadRaw(requestParameters: StorageDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Download package by AIPID
     * download storage
     */
    storageDownload(requestParameters: StorageDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * List all the packages stored in the location with UUID
     * @summary location_packages storage
     * @param {string} uuid Identifier of location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageLocationPackagesRaw(requestParameters: StorageLocationPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PackageResponse>>>;

    /**
     * List all the packages stored in the location with UUID
     * location_packages storage
     */
    storageLocationPackages(requestParameters: StorageLocationPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PackageResponse>>;

    /**
     * List locations
     * @summary locations storage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageLocationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>>;

    /**
     * List locations
     * locations storage
     */
    storageLocations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>>;

    /**
     * Move a package to a permanent storage location
     * @summary move storage
     * @param {string} aipId Identifier of AIP
     * @param {ConfirmRequestBody} confirmRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageMoveRaw(requestParameters: StorageMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Move a package to a permanent storage location
     * move storage
     */
    storageMove(requestParameters: StorageMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve the status of a permanent storage location move of the package
     * @summary move_status storage
     * @param {string} aipId Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageMoveStatusRaw(requestParameters: StorageMoveStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveStatusResult>>;

    /**
     * Retrieve the status of a permanent storage location move of the package
     * move_status storage
     */
    storageMoveStatus(requestParameters: StorageMoveStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveStatusResult>;

    /**
     * Reject a package
     * @summary reject storage
     * @param {string} aipId Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageRejectRaw(requestParameters: StorageRejectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Reject a package
     * reject storage
     */
    storageReject(requestParameters: StorageRejectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Show package by AIPID
     * @summary show storage
     * @param {string} aipId Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageShowRaw(requestParameters: StorageShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>>;

    /**
     * Show package by AIPID
     * show storage
     */
    storageShow(requestParameters: StorageShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package>;

    /**
     * Show location by UUID
     * @summary show_location storage
     * @param {string} uuid Identifier of location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageShowLocationRaw(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Show location by UUID
     * show_location storage
     */
    storageShowLocation(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * Start the submission of a package
     * @summary submit storage
     * @param {string} aipId Identifier of AIP
     * @param {SubmitRequestBody} submitRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageSubmitRaw(requestParameters: StorageSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitResult>>;

    /**
     * Start the submission of a package
     * submit storage
     */
    storageSubmit(requestParameters: StorageSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitResult>;

    /**
     * Signal the storage service that an upload is complete
     * @summary update storage
     * @param {string} aipId Identifier of AIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageUpdateRaw(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Signal the storage service that an upload is complete
     * update storage
     */
    storageUpdate(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class StorageApi extends runtime.BaseAPI implements StorageApiInterface {

    /**
     * Add a storage location
     * add_location storage
     */
    async storageAddLocationRaw(requestParameters: StorageAddLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddLocationResult>> {
        if (requestParameters.addLocationRequestBody === null || requestParameters.addLocationRequestBody === undefined) {
            throw new runtime.RequiredError('addLocationRequestBody','Required parameter requestParameters.addLocationRequestBody was null or undefined when calling storageAddLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/location`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddLocationRequestBodyToJSON(requestParameters.addLocationRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddLocationResultFromJSON(jsonValue));
    }

    /**
     * Add a storage location
     * add_location storage
     */
    async storageAddLocation(requestParameters: StorageAddLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddLocationResult> {
        const response = await this.storageAddLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new package
     * create storage
     */
    async storageCreateRaw(requestParameters: StorageCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.createRequestBody === null || requestParameters.createRequestBody === undefined) {
            throw new runtime.RequiredError('createRequestBody','Required parameter requestParameters.createRequestBody was null or undefined when calling storageCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRequestBodyToJSON(requestParameters.createRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     * Create a new package
     * create storage
     */
    async storageCreate(requestParameters: StorageCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.storageCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download package by AIPID
     * download storage
     */
    async storageDownloadRaw(requestParameters: StorageDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.aipId === null || requestParameters.aipId === undefined) {
            throw new runtime.RequiredError('aipId','Required parameter requestParameters.aipId was null or undefined when calling storageDownload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package/{aip_id}/download`.replace(`{${"aip_id"}}`, encodeURIComponent(String(requestParameters.aipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download package by AIPID
     * download storage
     */
    async storageDownload(requestParameters: StorageDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.storageDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the packages stored in the location with UUID
     * location_packages storage
     */
    async storageLocationPackagesRaw(requestParameters: StorageLocationPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PackageResponse>>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageLocationPackages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/location/{uuid}/packages`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PackageResponseFromJSON));
    }

    /**
     * List all the packages stored in the location with UUID
     * location_packages storage
     */
    async storageLocationPackages(requestParameters: StorageLocationPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PackageResponse>> {
        const response = await this.storageLocationPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List locations
     * locations storage
     */
    async storageLocationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationResponseFromJSON));
    }

    /**
     * List locations
     * locations storage
     */
    async storageLocations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>> {
        const response = await this.storageLocationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Move a package to a permanent storage location
     * move storage
     */
    async storageMoveRaw(requestParameters: StorageMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aipId === null || requestParameters.aipId === undefined) {
            throw new runtime.RequiredError('aipId','Required parameter requestParameters.aipId was null or undefined when calling storageMove.');
        }

        if (requestParameters.confirmRequestBody === null || requestParameters.confirmRequestBody === undefined) {
            throw new runtime.RequiredError('confirmRequestBody','Required parameter requestParameters.confirmRequestBody was null or undefined when calling storageMove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package/{aip_id}/store`.replace(`{${"aip_id"}}`, encodeURIComponent(String(requestParameters.aipId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmRequestBodyToJSON(requestParameters.confirmRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Move a package to a permanent storage location
     * move storage
     */
    async storageMove(requestParameters: StorageMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageMoveRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the status of a permanent storage location move of the package
     * move_status storage
     */
    async storageMoveStatusRaw(requestParameters: StorageMoveStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveStatusResult>> {
        if (requestParameters.aipId === null || requestParameters.aipId === undefined) {
            throw new runtime.RequiredError('aipId','Required parameter requestParameters.aipId was null or undefined when calling storageMoveStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package/{aip_id}/store`.replace(`{${"aip_id"}}`, encodeURIComponent(String(requestParameters.aipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoveStatusResultFromJSON(jsonValue));
    }

    /**
     * Retrieve the status of a permanent storage location move of the package
     * move_status storage
     */
    async storageMoveStatus(requestParameters: StorageMoveStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveStatusResult> {
        const response = await this.storageMoveStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reject a package
     * reject storage
     */
    async storageRejectRaw(requestParameters: StorageRejectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aipId === null || requestParameters.aipId === undefined) {
            throw new runtime.RequiredError('aipId','Required parameter requestParameters.aipId was null or undefined when calling storageReject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package/{aip_id}/reject`.replace(`{${"aip_id"}}`, encodeURIComponent(String(requestParameters.aipId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reject a package
     * reject storage
     */
    async storageReject(requestParameters: StorageRejectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageRejectRaw(requestParameters, initOverrides);
    }

    /**
     * Show package by AIPID
     * show storage
     */
    async storageShowRaw(requestParameters: StorageShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.aipId === null || requestParameters.aipId === undefined) {
            throw new runtime.RequiredError('aipId','Required parameter requestParameters.aipId was null or undefined when calling storageShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package/{aip_id}`.replace(`{${"aip_id"}}`, encodeURIComponent(String(requestParameters.aipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     * Show package by AIPID
     * show storage
     */
    async storageShow(requestParameters: StorageShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.storageShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show location by UUID
     * show_location storage
     */
    async storageShowLocationRaw(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling storageShowLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/location/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Show location by UUID
     * show_location storage
     */
    async storageShowLocation(requestParameters: StorageShowLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.storageShowLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the submission of a package
     * submit storage
     */
    async storageSubmitRaw(requestParameters: StorageSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitResult>> {
        if (requestParameters.aipId === null || requestParameters.aipId === undefined) {
            throw new runtime.RequiredError('aipId','Required parameter requestParameters.aipId was null or undefined when calling storageSubmit.');
        }

        if (requestParameters.submitRequestBody === null || requestParameters.submitRequestBody === undefined) {
            throw new runtime.RequiredError('submitRequestBody','Required parameter requestParameters.submitRequestBody was null or undefined when calling storageSubmit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package/{aip_id}/submit`.replace(`{${"aip_id"}}`, encodeURIComponent(String(requestParameters.aipId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitRequestBodyToJSON(requestParameters.submitRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmitResultFromJSON(jsonValue));
    }

    /**
     * Start the submission of a package
     * submit storage
     */
    async storageSubmit(requestParameters: StorageSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitResult> {
        const response = await this.storageSubmitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signal the storage service that an upload is complete
     * update storage
     */
    async storageUpdateRaw(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aipId === null || requestParameters.aipId === undefined) {
            throw new runtime.RequiredError('aipId','Required parameter requestParameters.aipId was null or undefined when calling storageUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_header_Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/storage/package/{aip_id}/update`.replace(`{${"aip_id"}}`, encodeURIComponent(String(requestParameters.aipId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Signal the storage service that an upload is complete
     * update storage
     */
    async storageUpdate(requestParameters: StorageUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storageUpdateRaw(requestParameters, initOverrides);
    }

}
