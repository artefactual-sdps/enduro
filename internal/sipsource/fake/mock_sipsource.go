// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/sipsource (interfaces: SIPSource)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/sipsource/fake/mock_sipsource.go -package=fake github.com/artefactual-sdps/enduro/internal/sipsource SIPSource
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	sipsource "github.com/artefactual-sdps/enduro/internal/sipsource"
	gomock "go.uber.org/mock/gomock"
)

// MockSIPSource is a mock of SIPSource interface.
type MockSIPSource struct {
	ctrl     *gomock.Controller
	recorder *MockSIPSourceMockRecorder
}

// MockSIPSourceMockRecorder is the mock recorder for MockSIPSource.
type MockSIPSourceMockRecorder struct {
	mock *MockSIPSource
}

// NewMockSIPSource creates a new mock instance.
func NewMockSIPSource(ctrl *gomock.Controller) *MockSIPSource {
	mock := &MockSIPSource{ctrl: ctrl}
	mock.recorder = &MockSIPSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSIPSource) EXPECT() *MockSIPSourceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSIPSource) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSIPSourceMockRecorder) Close() *MockSIPSourceCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSIPSource)(nil).Close))
	return &MockSIPSourceCloseCall{Call: call}
}

// MockSIPSourceCloseCall wrap *gomock.Call
type MockSIPSourceCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSIPSourceCloseCall) Return(arg0 error) *MockSIPSourceCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSIPSourceCloseCall) Do(f func() error) *MockSIPSourceCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSIPSourceCloseCall) DoAndReturn(f func() error) *MockSIPSourceCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListObjects mocks base method.
func (m *MockSIPSource) ListObjects(arg0 context.Context, arg1 []byte, arg2 int) (*sipsource.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sipsource.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockSIPSourceMockRecorder) ListObjects(arg0, arg1, arg2 any) *MockSIPSourceListObjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockSIPSource)(nil).ListObjects), arg0, arg1, arg2)
	return &MockSIPSourceListObjectsCall{Call: call}
}

// MockSIPSourceListObjectsCall wrap *gomock.Call
type MockSIPSourceListObjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSIPSourceListObjectsCall) Return(arg0 *sipsource.Page, arg1 error) *MockSIPSourceListObjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSIPSourceListObjectsCall) Do(f func(context.Context, []byte, int) (*sipsource.Page, error)) *MockSIPSourceListObjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSIPSourceListObjectsCall) DoAndReturn(f func(context.Context, []byte, int) (*sipsource.Page, error)) *MockSIPSourceListObjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
