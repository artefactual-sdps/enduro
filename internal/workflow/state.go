package workflow

import (
	"slices"

	"github.com/google/uuid"

	"github.com/artefactual-sdps/enduro/internal/enums"
	"github.com/artefactual-sdps/enduro/internal/ingest"
)

// workflowState is shared state that can be passed to activities.
type workflowState struct {
	// req is populated by the workflow request.
	req *ingest.ProcessingWorkflowRequest

	// initialPath is the location of the SIP after download.
	initialPath string

	// status of the ingest workflow.
	status enums.WorkflowStatus

	// tempDirs is a list of temporary directories that should be deleted when
	// the workflow is complete.
	tempDirs []string

	// Identifier of the ingest workflow.
	//
	// It is populated by createWorkflowLocalActivity.
	workflowID int

	// sip and aip track the state of the respective packages.
	sip *sipInfo
	aip *aipInfo
}

func newWorkflowState(req *ingest.ProcessingWorkflowRequest) *workflowState {
	return &workflowState{
		req:    req,
		status: enums.WorkflowStatusUnspecified,
		sip: &sipInfo{
			uuid:      req.SIPUUID,
			name:      req.SIPName,
			isDir:     req.IsDir,
			extension: req.Extension,

			// All SIPs start in queued status.
			status: enums.SIPStatusQueued,
		},

		// Initialize the AIP to empty struct to avoid nil pointer errors.
		aip: &aipInfo{},
	}
}

// addTempPath registers a filepath for deletion when a workflow session
// completes.
func (s *workflowState) addTempPath(path string) {
	if path == "" || slices.Contains(s.tempDirs, path) {
		return
	}
	s.tempDirs = append(s.tempDirs, path)
}

// sipInfo is data about the SIP.
type sipInfo struct {
	// uuid is the unique identifier of the SIP, it's passed in the request.
	uuid uuid.UUID

	// name is the original blob "key" (filename) of the SIP. It is used as a
	// human-readable identifier for the SIP in the database and UI.
	name string

	// path is the temporary location of the working copy of the SIP.
	path string

	// isDir indicates whether the working copy of the SIP is a directory.
	isDir bool

	// extension is the original SIP file extension if it was not a directory.
	// Used to generate the failed SIP/PIP object key.
	extension string

	// status is the ingest status of the SIP (e.g. "in progress", "done",
	// "error").
	status enums.SIPStatus

	// sipType is the type of the SIP.
	sipType enums.SIPType

	// transformed indicates if the SIP should be considered a PIP.
	transformed bool

	// failed_key is the object key of the failed SIP/PIP in the internal bucket.
	failed_key string
}

// aipInfo represents the AIP.
type aipInfo struct {
	// id is the AIP UUID.
	//
	// id is populated when the preservation system creates the AIP.
	id string

	// path to the compressed AIP generated by a3m.
	//
	// path is populated after a3m creates and stores the AIP and is used to
	// upload the AIP to the storage service.
	//
	// path is left blank when using AM as the preservation system because
	// storage of the AIP is handled by AM and the AMSS.
	path string
}
