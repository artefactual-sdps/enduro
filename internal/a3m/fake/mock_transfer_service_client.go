// Code generated by MockGen. DO NOT EDIT.
// Source: buf.build/gen/go/artefactual/a3m/grpc/go/a3m/api/transferservice/v1beta1/transferservicev1beta1grpc (interfaces: TransferServiceClient)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/a3m/fake/mock_transfer_service_client.go -package=fake buf.build/gen/go/artefactual/a3m/grpc/go/a3m/api/transferservice/v1beta1/transferservicev1beta1grpc TransferServiceClient
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	transferservicev1beta1 "buf.build/gen/go/artefactual/a3m/protocolbuffers/go/a3m/api/transferservice/v1beta1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTransferServiceClient is a mock of TransferServiceClient interface.
type MockTransferServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceClientMockRecorder
	isgomock struct{}
}

// MockTransferServiceClientMockRecorder is the mock recorder for MockTransferServiceClient.
type MockTransferServiceClientMockRecorder struct {
	mock *MockTransferServiceClient
}

// NewMockTransferServiceClient creates a new mock instance.
func NewMockTransferServiceClient(ctrl *gomock.Controller) *MockTransferServiceClient {
	mock := &MockTransferServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransferServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferServiceClient) EXPECT() *MockTransferServiceClientMockRecorder {
	return m.recorder
}

// Empty mocks base method.
func (m *MockTransferServiceClient) Empty(ctx context.Context, in *transferservicev1beta1.EmptyRequest, opts ...grpc.CallOption) (*transferservicev1beta1.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Empty", varargs...)
	ret0, _ := ret[0].(*transferservicev1beta1.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Empty indicates an expected call of Empty.
func (mr *MockTransferServiceClientMockRecorder) Empty(ctx, in any, opts ...any) *MockTransferServiceClientEmptyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockTransferServiceClient)(nil).Empty), varargs...)
	return &MockTransferServiceClientEmptyCall{Call: call}
}

// MockTransferServiceClientEmptyCall wrap *gomock.Call
type MockTransferServiceClientEmptyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceClientEmptyCall) Return(arg0 *transferservicev1beta1.EmptyResponse, arg1 error) *MockTransferServiceClientEmptyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceClientEmptyCall) Do(f func(context.Context, *transferservicev1beta1.EmptyRequest, ...grpc.CallOption) (*transferservicev1beta1.EmptyResponse, error)) *MockTransferServiceClientEmptyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceClientEmptyCall) DoAndReturn(f func(context.Context, *transferservicev1beta1.EmptyRequest, ...grpc.CallOption) (*transferservicev1beta1.EmptyResponse, error)) *MockTransferServiceClientEmptyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTasks mocks base method.
func (m *MockTransferServiceClient) ListTasks(ctx context.Context, in *transferservicev1beta1.ListTasksRequest, opts ...grpc.CallOption) (*transferservicev1beta1.ListTasksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasks", varargs...)
	ret0, _ := ret[0].(*transferservicev1beta1.ListTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockTransferServiceClientMockRecorder) ListTasks(ctx, in any, opts ...any) *MockTransferServiceClientListTasksCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockTransferServiceClient)(nil).ListTasks), varargs...)
	return &MockTransferServiceClientListTasksCall{Call: call}
}

// MockTransferServiceClientListTasksCall wrap *gomock.Call
type MockTransferServiceClientListTasksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceClientListTasksCall) Return(arg0 *transferservicev1beta1.ListTasksResponse, arg1 error) *MockTransferServiceClientListTasksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceClientListTasksCall) Do(f func(context.Context, *transferservicev1beta1.ListTasksRequest, ...grpc.CallOption) (*transferservicev1beta1.ListTasksResponse, error)) *MockTransferServiceClientListTasksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceClientListTasksCall) DoAndReturn(f func(context.Context, *transferservicev1beta1.ListTasksRequest, ...grpc.CallOption) (*transferservicev1beta1.ListTasksResponse, error)) *MockTransferServiceClientListTasksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockTransferServiceClient) Read(ctx context.Context, in *transferservicev1beta1.ReadRequest, opts ...grpc.CallOption) (*transferservicev1beta1.ReadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*transferservicev1beta1.ReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTransferServiceClientMockRecorder) Read(ctx, in any, opts ...any) *MockTransferServiceClientReadCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransferServiceClient)(nil).Read), varargs...)
	return &MockTransferServiceClientReadCall{Call: call}
}

// MockTransferServiceClientReadCall wrap *gomock.Call
type MockTransferServiceClientReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceClientReadCall) Return(arg0 *transferservicev1beta1.ReadResponse, arg1 error) *MockTransferServiceClientReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceClientReadCall) Do(f func(context.Context, *transferservicev1beta1.ReadRequest, ...grpc.CallOption) (*transferservicev1beta1.ReadResponse, error)) *MockTransferServiceClientReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceClientReadCall) DoAndReturn(f func(context.Context, *transferservicev1beta1.ReadRequest, ...grpc.CallOption) (*transferservicev1beta1.ReadResponse, error)) *MockTransferServiceClientReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Submit mocks base method.
func (m *MockTransferServiceClient) Submit(ctx context.Context, in *transferservicev1beta1.SubmitRequest, opts ...grpc.CallOption) (*transferservicev1beta1.SubmitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Submit", varargs...)
	ret0, _ := ret[0].(*transferservicev1beta1.SubmitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockTransferServiceClientMockRecorder) Submit(ctx, in any, opts ...any) *MockTransferServiceClientSubmitCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockTransferServiceClient)(nil).Submit), varargs...)
	return &MockTransferServiceClientSubmitCall{Call: call}
}

// MockTransferServiceClientSubmitCall wrap *gomock.Call
type MockTransferServiceClientSubmitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceClientSubmitCall) Return(arg0 *transferservicev1beta1.SubmitResponse, arg1 error) *MockTransferServiceClientSubmitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceClientSubmitCall) Do(f func(context.Context, *transferservicev1beta1.SubmitRequest, ...grpc.CallOption) (*transferservicev1beta1.SubmitResponse, error)) *MockTransferServiceClientSubmitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceClientSubmitCall) DoAndReturn(f func(context.Context, *transferservicev1beta1.SubmitRequest, ...grpc.CallOption) (*transferservicev1beta1.SubmitResponse, error)) *MockTransferServiceClientSubmitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
