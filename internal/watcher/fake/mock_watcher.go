// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/watcher (interfaces: Watcher)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/watcher/fake/mock_watcher.go -package=fake github.com/artefactual-sdps/enduro/internal/watcher Watcher
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	enums "github.com/artefactual-sdps/enduro/internal/enums"
	watcher "github.com/artefactual-sdps/enduro/internal/watcher"
	gomock "go.uber.org/mock/gomock"
	blob "gocloud.dev/blob"
)

// MockWatcher is a mock of Watcher interface.
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
	isgomock struct{}
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher.
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance.
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// CompletedDir mocks base method.
func (m *MockWatcher) CompletedDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletedDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// CompletedDir indicates an expected call of CompletedDir.
func (mr *MockWatcherMockRecorder) CompletedDir() *MockWatcherCompletedDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletedDir", reflect.TypeOf((*MockWatcher)(nil).CompletedDir))
	return &MockWatcherCompletedDirCall{Call: call}
}

// MockWatcherCompletedDirCall wrap *gomock.Call
type MockWatcherCompletedDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherCompletedDirCall) Return(arg0 string) *MockWatcherCompletedDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherCompletedDirCall) Do(f func() string) *MockWatcherCompletedDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherCompletedDirCall) DoAndReturn(f func() string) *MockWatcherCompletedDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Download mocks base method.
func (m *MockWatcher) Download(ctx context.Context, dest, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, dest, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockWatcherMockRecorder) Download(ctx, dest, key any) *MockWatcherDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockWatcher)(nil).Download), ctx, dest, key)
	return &MockWatcherDownloadCall{Call: call}
}

// MockWatcherDownloadCall wrap *gomock.Call
type MockWatcherDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherDownloadCall) Return(arg0 error) *MockWatcherDownloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherDownloadCall) Do(f func(context.Context, string, string) error) *MockWatcherDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherDownloadCall) DoAndReturn(f func(context.Context, string, string) error) *MockWatcherDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenBucket mocks base method.
func (m *MockWatcher) OpenBucket(ctx context.Context) (*blob.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenBucket", ctx)
	ret0, _ := ret[0].(*blob.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenBucket indicates an expected call of OpenBucket.
func (mr *MockWatcherMockRecorder) OpenBucket(ctx any) *MockWatcherOpenBucketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenBucket", reflect.TypeOf((*MockWatcher)(nil).OpenBucket), ctx)
	return &MockWatcherOpenBucketCall{Call: call}
}

// MockWatcherOpenBucketCall wrap *gomock.Call
type MockWatcherOpenBucketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherOpenBucketCall) Return(arg0 *blob.Bucket, arg1 error) *MockWatcherOpenBucketCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherOpenBucketCall) Do(f func(context.Context) (*blob.Bucket, error)) *MockWatcherOpenBucketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherOpenBucketCall) DoAndReturn(f func(context.Context) (*blob.Bucket, error)) *MockWatcherOpenBucketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Path mocks base method.
func (m *MockWatcher) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockWatcherMockRecorder) Path() *MockWatcherPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockWatcher)(nil).Path))
	return &MockWatcherPathCall{Call: call}
}

// MockWatcherPathCall wrap *gomock.Call
type MockWatcherPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherPathCall) Return(arg0 string) *MockWatcherPathCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherPathCall) Do(f func() string) *MockWatcherPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherPathCall) DoAndReturn(f func() string) *MockWatcherPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetentionPeriod mocks base method.
func (m *MockWatcher) RetentionPeriod() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RetentionPeriod indicates an expected call of RetentionPeriod.
func (mr *MockWatcherMockRecorder) RetentionPeriod() *MockWatcherRetentionPeriodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionPeriod", reflect.TypeOf((*MockWatcher)(nil).RetentionPeriod))
	return &MockWatcherRetentionPeriodCall{Call: call}
}

// MockWatcherRetentionPeriodCall wrap *gomock.Call
type MockWatcherRetentionPeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherRetentionPeriodCall) Return(arg0 time.Duration) *MockWatcherRetentionPeriodCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherRetentionPeriodCall) Do(f func() time.Duration) *MockWatcherRetentionPeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherRetentionPeriodCall) DoAndReturn(f func() time.Duration) *MockWatcherRetentionPeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockWatcher) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockWatcherMockRecorder) String() *MockWatcherStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockWatcher)(nil).String))
	return &MockWatcherStringCall{Call: call}
}

// MockWatcherStringCall wrap *gomock.Call
type MockWatcherStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherStringCall) Return(arg0 string) *MockWatcherStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherStringCall) Do(f func() string) *MockWatcherStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherStringCall) DoAndReturn(f func() string) *MockWatcherStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockWatcher) Watch(ctx context.Context) (*watcher.BlobEvent, watcher.Cleanup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx)
	ret0, _ := ret[0].(*watcher.BlobEvent)
	ret1, _ := ret[1].(watcher.Cleanup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch.
func (mr *MockWatcherMockRecorder) Watch(ctx any) *MockWatcherWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWatcher)(nil).Watch), ctx)
	return &MockWatcherWatchCall{Call: call}
}

// MockWatcherWatchCall wrap *gomock.Call
type MockWatcherWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherWatchCall) Return(arg0 *watcher.BlobEvent, arg1 watcher.Cleanup, arg2 error) *MockWatcherWatchCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherWatchCall) Do(f func(context.Context) (*watcher.BlobEvent, watcher.Cleanup, error)) *MockWatcherWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherWatchCall) DoAndReturn(f func(context.Context) (*watcher.BlobEvent, watcher.Cleanup, error)) *MockWatcherWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WorkflowType mocks base method.
func (m *MockWatcher) WorkflowType() enums.WorkflowType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowType")
	ret0, _ := ret[0].(enums.WorkflowType)
	return ret0
}

// WorkflowType indicates an expected call of WorkflowType.
func (mr *MockWatcherMockRecorder) WorkflowType() *MockWatcherWorkflowTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowType", reflect.TypeOf((*MockWatcher)(nil).WorkflowType))
	return &MockWatcherWorkflowTypeCall{Call: call}
}

// MockWatcherWorkflowTypeCall wrap *gomock.Call
type MockWatcherWorkflowTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherWorkflowTypeCall) Return(arg0 enums.WorkflowType) *MockWatcherWorkflowTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherWorkflowTypeCall) Do(f func() enums.WorkflowType) *MockWatcherWorkflowTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherWorkflowTypeCall) DoAndReturn(f func() enums.WorkflowType) *MockWatcherWorkflowTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
