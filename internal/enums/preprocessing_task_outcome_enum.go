// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// PreprocessingTaskOutcomeUnspecified is a PreprocessingTaskOutcome of type unspecified.
	PreprocessingTaskOutcomeUnspecified PreprocessingTaskOutcome = "unspecified"
	// PreprocessingTaskOutcomeSuccess is a PreprocessingTaskOutcome of type success.
	PreprocessingTaskOutcomeSuccess PreprocessingTaskOutcome = "success"
	// PreprocessingTaskOutcomeSystemFailure is a PreprocessingTaskOutcome of type system failure.
	PreprocessingTaskOutcomeSystemFailure PreprocessingTaskOutcome = "system failure"
	// PreprocessingTaskOutcomeValidationFailure is a PreprocessingTaskOutcome of type validation failure.
	PreprocessingTaskOutcomeValidationFailure PreprocessingTaskOutcome = "validation failure"
)

var ErrInvalidPreprocessingTaskOutcome = fmt.Errorf("not a valid PreprocessingTaskOutcome, try [%s]", strings.Join(_PreprocessingTaskOutcomeNames, ", "))

var _PreprocessingTaskOutcomeNames = []string{
	string(PreprocessingTaskOutcomeUnspecified),
	string(PreprocessingTaskOutcomeSuccess),
	string(PreprocessingTaskOutcomeSystemFailure),
	string(PreprocessingTaskOutcomeValidationFailure),
}

// PreprocessingTaskOutcomeNames returns a list of possible string values of PreprocessingTaskOutcome.
func PreprocessingTaskOutcomeNames() []string {
	tmp := make([]string, len(_PreprocessingTaskOutcomeNames))
	copy(tmp, _PreprocessingTaskOutcomeNames)
	return tmp
}

// String implements the Stringer interface.
func (x PreprocessingTaskOutcome) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PreprocessingTaskOutcome) IsValid() bool {
	_, err := ParsePreprocessingTaskOutcome(string(x))
	return err == nil
}

var _PreprocessingTaskOutcomeValue = map[string]PreprocessingTaskOutcome{
	"unspecified":        PreprocessingTaskOutcomeUnspecified,
	"success":            PreprocessingTaskOutcomeSuccess,
	"system failure":     PreprocessingTaskOutcomeSystemFailure,
	"validation failure": PreprocessingTaskOutcomeValidationFailure,
}

// ParsePreprocessingTaskOutcome attempts to convert a string to a PreprocessingTaskOutcome.
func ParsePreprocessingTaskOutcome(name string) (PreprocessingTaskOutcome, error) {
	if x, ok := _PreprocessingTaskOutcomeValue[name]; ok {
		return x, nil
	}
	return PreprocessingTaskOutcome(""), fmt.Errorf("%s is %w", name, ErrInvalidPreprocessingTaskOutcome)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x PreprocessingTaskOutcome) Values() []string {
	return PreprocessingTaskOutcomeNames()
}

// PreprocessingTaskOutcomeInterfaces returns an interface list of possible values of PreprocessingTaskOutcome.
func PreprocessingTaskOutcomeInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _PreprocessingTaskOutcomeNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParsePreprocessingTaskOutcomeWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParsePreprocessingTaskOutcomeWithDefault(name string) (PreprocessingTaskOutcome, error) {
	if name == "" {
		return _PreprocessingTaskOutcomeValue[_PreprocessingTaskOutcomeNames[0]], nil
	}
	if x, ok := _PreprocessingTaskOutcomeValue[name]; ok {
		return x, nil
	}
	var e PreprocessingTaskOutcome
	return e, fmt.Errorf("%s is not a valid PreprocessingTaskOutcome, try [%s]", name, strings.Join(_PreprocessingTaskOutcomeNames, ", "))
}

// NormalizePreprocessingTaskOutcome attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizePreprocessingTaskOutcome(name string) string {
	res, err := ParsePreprocessingTaskOutcome(name)
	if err != nil {
		return name
	}
	return res.String()
}
