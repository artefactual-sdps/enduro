// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// PreservationActionTypeUnspecified is a PreservationActionType of type Unspecified.
	PreservationActionTypeUnspecified PreservationActionType = iota
	// PreservationActionTypeCreateAIP is a PreservationActionType of type CreateAIP.
	PreservationActionTypeCreateAIP
	// PreservationActionTypeCreateAndReviewAIP is a PreservationActionType of type CreateAndReviewAIP.
	PreservationActionTypeCreateAndReviewAIP
	// PreservationActionTypeMovePackage is a PreservationActionType of type MovePackage.
	PreservationActionTypeMovePackage
)

var ErrInvalidPreservationActionType = fmt.Errorf("not a valid PreservationActionType, try [%s]", strings.Join(_PreservationActionTypeNames, ", "))

const _PreservationActionTypeName = "UnspecifiedCreateAIPCreateAndReviewAIPMovePackage"

var _PreservationActionTypeNames = []string{
	_PreservationActionTypeName[0:11],
	_PreservationActionTypeName[11:20],
	_PreservationActionTypeName[20:38],
	_PreservationActionTypeName[38:49],
}

// PreservationActionTypeNames returns a list of possible string values of PreservationActionType.
func PreservationActionTypeNames() []string {
	tmp := make([]string, len(_PreservationActionTypeNames))
	copy(tmp, _PreservationActionTypeNames)
	return tmp
}

var _PreservationActionTypeMap = map[PreservationActionType]string{
	PreservationActionTypeUnspecified:        _PreservationActionTypeName[0:11],
	PreservationActionTypeCreateAIP:          _PreservationActionTypeName[11:20],
	PreservationActionTypeCreateAndReviewAIP: _PreservationActionTypeName[20:38],
	PreservationActionTypeMovePackage:        _PreservationActionTypeName[38:49],
}

// String implements the Stringer interface.
func (x PreservationActionType) String() string {
	if str, ok := _PreservationActionTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PreservationActionType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PreservationActionType) IsValid() bool {
	_, ok := _PreservationActionTypeMap[x]
	return ok
}

var _PreservationActionTypeValue = map[string]PreservationActionType{
	_PreservationActionTypeName[0:11]:  PreservationActionTypeUnspecified,
	_PreservationActionTypeName[11:20]: PreservationActionTypeCreateAIP,
	_PreservationActionTypeName[20:38]: PreservationActionTypeCreateAndReviewAIP,
	_PreservationActionTypeName[38:49]: PreservationActionTypeMovePackage,
}

// ParsePreservationActionType attempts to convert a string to a PreservationActionType.
func ParsePreservationActionType(name string) (PreservationActionType, error) {
	if x, ok := _PreservationActionTypeValue[name]; ok {
		return x, nil
	}
	return PreservationActionType(0), fmt.Errorf("%s is %w", name, ErrInvalidPreservationActionType)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x PreservationActionType) Values() []string {
	return PreservationActionTypeNames()
}

// PreservationActionTypeInterfaces returns an interface list of possible values of PreservationActionType.
func PreservationActionTypeInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _PreservationActionTypeNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParsePreservationActionTypeWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParsePreservationActionTypeWithDefault(name string) (PreservationActionType, error) {
	if name == "" {
		return _PreservationActionTypeValue[_PreservationActionTypeNames[0]], nil
	}
	if x, ok := _PreservationActionTypeValue[name]; ok {
		return x, nil
	}
	var e PreservationActionType
	return e, fmt.Errorf("%s is not a valid PreservationActionType, try [%s]", name, strings.Join(_PreservationActionTypeNames, ", "))
}

// NormalizePreservationActionType attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizePreservationActionType(name string) string {
	res, err := ParsePreservationActionType(name)
	if err != nil {
		return name
	}
	return res.String()
}
