// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// PackageTypeUnknown is a PackageType of type Unknown.
	PackageTypeUnknown PackageType = iota
	// PackageTypeBagIt is a PackageType of type BagIt.
	PackageTypeBagIt
	// PackageTypeArchivematicaStandardTransfer is a PackageType of type Archivematica Standard Transfer.
	PackageTypeArchivematicaStandardTransfer
)

var ErrInvalidPackageType = fmt.Errorf("not a valid PackageType, try [%s]", strings.Join(_PackageTypeNames, ", "))

const _PackageTypeName = "UnknownBagItArchivematica Standard Transfer"

var _PackageTypeNames = []string{
	_PackageTypeName[0:7],
	_PackageTypeName[7:12],
	_PackageTypeName[12:43],
}

// PackageTypeNames returns a list of possible string values of PackageType.
func PackageTypeNames() []string {
	tmp := make([]string, len(_PackageTypeNames))
	copy(tmp, _PackageTypeNames)
	return tmp
}

var _PackageTypeMap = map[PackageType]string{
	PackageTypeUnknown:                       _PackageTypeName[0:7],
	PackageTypeBagIt:                         _PackageTypeName[7:12],
	PackageTypeArchivematicaStandardTransfer: _PackageTypeName[12:43],
}

// String implements the Stringer interface.
func (x PackageType) String() string {
	if str, ok := _PackageTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PackageType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PackageType) IsValid() bool {
	_, ok := _PackageTypeMap[x]
	return ok
}

var _PackageTypeValue = map[string]PackageType{
	_PackageTypeName[0:7]:   PackageTypeUnknown,
	_PackageTypeName[7:12]:  PackageTypeBagIt,
	_PackageTypeName[12:43]: PackageTypeArchivematicaStandardTransfer,
}

// ParsePackageType attempts to convert a string to a PackageType.
func ParsePackageType(name string) (PackageType, error) {
	if x, ok := _PackageTypeValue[name]; ok {
		return x, nil
	}
	return PackageType(0), fmt.Errorf("%s is %w", name, ErrInvalidPackageType)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x PackageType) Values() []string {
	return PackageTypeNames()
}

// PackageTypeInterfaces returns an interface list of possible values of PackageType.
func PackageTypeInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _PackageTypeNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParsePackageTypeWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParsePackageTypeWithDefault(name string) (PackageType, error) {
	if name == "" {
		return _PackageTypeValue[_PackageTypeNames[0]], nil
	}
	if x, ok := _PackageTypeValue[name]; ok {
		return x, nil
	}
	var e PackageType
	return e, fmt.Errorf("%s is not a valid PackageType, try [%s]", name, strings.Join(_PackageTypeNames, ", "))
}

// NormalizePackageType attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizePackageType(name string) string {
	res, err := ParsePackageType(name)
	if err != nil {
		return name
	}
	return res.String()
}
