// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// SIPStatusNew is a SIPStatus of type New.
	// Unused!
	SIPStatusNew SIPStatus = iota
	// SIPStatusInProgress is a SIPStatus of type In Progress.
	// Undergoing work.
	SIPStatusInProgress
	// SIPStatusDone is a SIPStatus of type Done.
	// Work has completed.
	SIPStatusDone
	// SIPStatusError is a SIPStatus of type Error.
	// Processing failed.
	SIPStatusError
	// SIPStatusUnknown is a SIPStatus of type Unknown.
	// Unused!
	SIPStatusUnknown
	// SIPStatusQueued is a SIPStatus of type Queued.
	// Awaiting resource allocation.
	SIPStatusQueued
	// SIPStatusAbandoned is a SIPStatus of type Abandoned.
	// User abandoned processing.
	SIPStatusAbandoned
	// SIPStatusPending is a SIPStatus of type Pending.
	// Awaiting user decision.
	SIPStatusPending
)

var ErrInvalidSIPStatus = fmt.Errorf("not a valid SIPStatus, try [%s]", strings.Join(_SIPStatusNames, ", "))

const _SIPStatusName = "newin progressdoneerrorunknownqueuedabandonedpending"

var _SIPStatusNames = []string{
	_SIPStatusName[0:3],
	_SIPStatusName[3:14],
	_SIPStatusName[14:18],
	_SIPStatusName[18:23],
	_SIPStatusName[23:30],
	_SIPStatusName[30:36],
	_SIPStatusName[36:45],
	_SIPStatusName[45:52],
}

// SIPStatusNames returns a list of possible string values of SIPStatus.
func SIPStatusNames() []string {
	tmp := make([]string, len(_SIPStatusNames))
	copy(tmp, _SIPStatusNames)
	return tmp
}

var _SIPStatusMap = map[SIPStatus]string{
	SIPStatusNew:        _SIPStatusName[0:3],
	SIPStatusInProgress: _SIPStatusName[3:14],
	SIPStatusDone:       _SIPStatusName[14:18],
	SIPStatusError:      _SIPStatusName[18:23],
	SIPStatusUnknown:    _SIPStatusName[23:30],
	SIPStatusQueued:     _SIPStatusName[30:36],
	SIPStatusAbandoned:  _SIPStatusName[36:45],
	SIPStatusPending:    _SIPStatusName[45:52],
}

// String implements the Stringer interface.
func (x SIPStatus) String() string {
	if str, ok := _SIPStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SIPStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SIPStatus) IsValid() bool {
	_, ok := _SIPStatusMap[x]
	return ok
}

var _SIPStatusValue = map[string]SIPStatus{
	_SIPStatusName[0:3]:   SIPStatusNew,
	_SIPStatusName[3:14]:  SIPStatusInProgress,
	_SIPStatusName[14:18]: SIPStatusDone,
	_SIPStatusName[18:23]: SIPStatusError,
	_SIPStatusName[23:30]: SIPStatusUnknown,
	_SIPStatusName[30:36]: SIPStatusQueued,
	_SIPStatusName[36:45]: SIPStatusAbandoned,
	_SIPStatusName[45:52]: SIPStatusPending,
}

// ParseSIPStatus attempts to convert a string to a SIPStatus.
func ParseSIPStatus(name string) (SIPStatus, error) {
	if x, ok := _SIPStatusValue[name]; ok {
		return x, nil
	}
	return SIPStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidSIPStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x SIPStatus) Values() []string {
	return SIPStatusNames()
}

// SIPStatusInterfaces returns an interface list of possible values of SIPStatus.
func SIPStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _SIPStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseSIPStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseSIPStatusWithDefault(name string) (SIPStatus, error) {
	if name == "" {
		return _SIPStatusValue[_SIPStatusNames[0]], nil
	}
	if x, ok := _SIPStatusValue[name]; ok {
		return x, nil
	}
	var e SIPStatus
	return e, fmt.Errorf("%s is not a valid SIPStatus, try [%s]", name, strings.Join(_SIPStatusNames, ", "))
}

// NormalizeSIPStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeSIPStatus(name string) string {
	res, err := ParseSIPStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
