// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// PackageStatusNew is a PackageStatus of type New.
	// Unused!
	PackageStatusNew PackageStatus = iota
	// PackageStatusInProgress is a PackageStatus of type InProgress.
	// Undergoing work.
	PackageStatusInProgress
	// PackageStatusDone is a PackageStatus of type Done.
	// Work has completed.
	PackageStatusDone
	// PackageStatusError is a PackageStatus of type Error.
	// Processing failed.
	PackageStatusError
	// PackageStatusUnknown is a PackageStatus of type Unknown.
	// Unused!
	PackageStatusUnknown
	// PackageStatusQueued is a PackageStatus of type Queued.
	// Awaiting resource allocation.
	PackageStatusQueued
	// PackageStatusAbandoned is a PackageStatus of type Abandoned.
	// User abandoned processing.
	PackageStatusAbandoned
	// PackageStatusPending is a PackageStatus of type Pending.
	// Awaiting user decision.
	PackageStatusPending
)

var ErrInvalidPackageStatus = fmt.Errorf("not a valid PackageStatus, try [%s]", strings.Join(_PackageStatusNames, ", "))

const _PackageStatusName = "NewInProgressDoneErrorUnknownQueuedAbandonedPending"

var _PackageStatusNames = []string{
	_PackageStatusName[0:3],
	_PackageStatusName[3:13],
	_PackageStatusName[13:17],
	_PackageStatusName[17:22],
	_PackageStatusName[22:29],
	_PackageStatusName[29:35],
	_PackageStatusName[35:44],
	_PackageStatusName[44:51],
}

// PackageStatusNames returns a list of possible string values of PackageStatus.
func PackageStatusNames() []string {
	tmp := make([]string, len(_PackageStatusNames))
	copy(tmp, _PackageStatusNames)
	return tmp
}

var _PackageStatusMap = map[PackageStatus]string{
	PackageStatusNew:        _PackageStatusName[0:3],
	PackageStatusInProgress: _PackageStatusName[3:13],
	PackageStatusDone:       _PackageStatusName[13:17],
	PackageStatusError:      _PackageStatusName[17:22],
	PackageStatusUnknown:    _PackageStatusName[22:29],
	PackageStatusQueued:     _PackageStatusName[29:35],
	PackageStatusAbandoned:  _PackageStatusName[35:44],
	PackageStatusPending:    _PackageStatusName[44:51],
}

// String implements the Stringer interface.
func (x PackageStatus) String() string {
	if str, ok := _PackageStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PackageStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PackageStatus) IsValid() bool {
	_, ok := _PackageStatusMap[x]
	return ok
}

var _PackageStatusValue = map[string]PackageStatus{
	_PackageStatusName[0:3]:   PackageStatusNew,
	_PackageStatusName[3:13]:  PackageStatusInProgress,
	_PackageStatusName[13:17]: PackageStatusDone,
	_PackageStatusName[17:22]: PackageStatusError,
	_PackageStatusName[22:29]: PackageStatusUnknown,
	_PackageStatusName[29:35]: PackageStatusQueued,
	_PackageStatusName[35:44]: PackageStatusAbandoned,
	_PackageStatusName[44:51]: PackageStatusPending,
}

// ParsePackageStatus attempts to convert a string to a PackageStatus.
func ParsePackageStatus(name string) (PackageStatus, error) {
	if x, ok := _PackageStatusValue[name]; ok {
		return x, nil
	}
	return PackageStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidPackageStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x PackageStatus) Values() []string {
	return PackageStatusNames()
}

// PackageStatusInterfaces returns an interface list of possible values of PackageStatus.
func PackageStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _PackageStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParsePackageStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParsePackageStatusWithDefault(name string) (PackageStatus, error) {
	if name == "" {
		return _PackageStatusValue[_PackageStatusNames[0]], nil
	}
	if x, ok := _PackageStatusValue[name]; ok {
		return x, nil
	}
	var e PackageStatus
	return e, fmt.Errorf("%s is not a valid PackageStatus, try [%s]", name, strings.Join(_PackageStatusNames, ", "))
}

// NormalizePackageStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizePackageStatus(name string) string {
	res, err := ParsePackageStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
