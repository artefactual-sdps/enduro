// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// Status is indeterminate.
	TaskStatusUnspecified TaskStatus = iota
	// Work is ongoing.
	TaskStatusInProgress
	// Completed successfully.
	TaskStatusDone
	// Halted due to a system error.
	TaskStatusError
	// Awaiting resource allocation.
	TaskStatusQueued
	// Awaiting user decision.
	TaskStatusPending
	// Halted due to a policy violation.
	TaskStatusFailed
)

var ErrInvalidTaskStatus = fmt.Errorf("not a valid TaskStatus, try [%s]", strings.Join(_TaskStatusNames, ", "))

const _TaskStatusName = "unspecifiedin progressdoneerrorqueuedpendingfailed"

var _TaskStatusNames = []string{
	_TaskStatusName[0:11],
	_TaskStatusName[11:22],
	_TaskStatusName[22:26],
	_TaskStatusName[26:31],
	_TaskStatusName[31:37],
	_TaskStatusName[37:44],
	_TaskStatusName[44:50],
}

// TaskStatusNames returns a list of possible string values of TaskStatus.
func TaskStatusNames() []string {
	tmp := make([]string, len(_TaskStatusNames))
	copy(tmp, _TaskStatusNames)
	return tmp
}

var _TaskStatusMap = map[TaskStatus]string{
	TaskStatusUnspecified: _TaskStatusName[0:11],
	TaskStatusInProgress:  _TaskStatusName[11:22],
	TaskStatusDone:        _TaskStatusName[22:26],
	TaskStatusError:       _TaskStatusName[26:31],
	TaskStatusQueued:      _TaskStatusName[31:37],
	TaskStatusPending:     _TaskStatusName[37:44],
	TaskStatusFailed:      _TaskStatusName[44:50],
}

// String implements the Stringer interface.
func (x TaskStatus) String() string {
	if str, ok := _TaskStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TaskStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TaskStatus) IsValid() bool {
	_, ok := _TaskStatusMap[x]
	return ok
}

var _TaskStatusValue = map[string]TaskStatus{
	_TaskStatusName[0:11]:  TaskStatusUnspecified,
	_TaskStatusName[11:22]: TaskStatusInProgress,
	_TaskStatusName[22:26]: TaskStatusDone,
	_TaskStatusName[26:31]: TaskStatusError,
	_TaskStatusName[31:37]: TaskStatusQueued,
	_TaskStatusName[37:44]: TaskStatusPending,
	_TaskStatusName[44:50]: TaskStatusFailed,
}

// ParseTaskStatus attempts to convert a string to a TaskStatus.
func ParseTaskStatus(name string) (TaskStatus, error) {
	if x, ok := _TaskStatusValue[name]; ok {
		return x, nil
	}
	return TaskStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidTaskStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x TaskStatus) Values() []string {
	return TaskStatusNames()
}

// TaskStatusInterfaces returns an interface list of possible values of TaskStatus.
func TaskStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _TaskStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseTaskStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseTaskStatusWithDefault(name string) (TaskStatus, error) {
	if name == "" {
		return _TaskStatusValue[_TaskStatusNames[0]], nil
	}
	if x, ok := _TaskStatusValue[name]; ok {
		return x, nil
	}
	var e TaskStatus
	return e, fmt.Errorf("%s is not a valid TaskStatus, try [%s]", name, strings.Join(_TaskStatusNames, ", "))
}

// NormalizeTaskStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeTaskStatus(name string) string {
	res, err := ParseTaskStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
