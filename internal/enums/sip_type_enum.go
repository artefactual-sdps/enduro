// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	SIPTypeUnknown SIPType = iota
	SIPTypeBagIt
	SIPTypeArchivematicaStandardTransfer
)

var ErrInvalidSIPType = fmt.Errorf("not a valid SIPType, try [%s]", strings.Join(_SIPTypeNames, ", "))

const _SIPTypeName = "UnknownBagItArchivematica Standard Transfer"

var _SIPTypeNames = []string{
	_SIPTypeName[0:7],
	_SIPTypeName[7:12],
	_SIPTypeName[12:43],
}

// SIPTypeNames returns a list of possible string values of SIPType.
func SIPTypeNames() []string {
	tmp := make([]string, len(_SIPTypeNames))
	copy(tmp, _SIPTypeNames)
	return tmp
}

var _SIPTypeMap = map[SIPType]string{
	SIPTypeUnknown:                       _SIPTypeName[0:7],
	SIPTypeBagIt:                         _SIPTypeName[7:12],
	SIPTypeArchivematicaStandardTransfer: _SIPTypeName[12:43],
}

// String implements the Stringer interface.
func (x SIPType) String() string {
	if str, ok := _SIPTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SIPType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SIPType) IsValid() bool {
	_, ok := _SIPTypeMap[x]
	return ok
}

var _SIPTypeValue = map[string]SIPType{
	_SIPTypeName[0:7]:   SIPTypeUnknown,
	_SIPTypeName[7:12]:  SIPTypeBagIt,
	_SIPTypeName[12:43]: SIPTypeArchivematicaStandardTransfer,
}

// ParseSIPType attempts to convert a string to a SIPType.
func ParseSIPType(name string) (SIPType, error) {
	if x, ok := _SIPTypeValue[name]; ok {
		return x, nil
	}
	return SIPType(0), fmt.Errorf("%s is %w", name, ErrInvalidSIPType)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x SIPType) Values() []string {
	return SIPTypeNames()
}

// SIPTypeInterfaces returns an interface list of possible values of SIPType.
func SIPTypeInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _SIPTypeNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseSIPTypeWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseSIPTypeWithDefault(name string) (SIPType, error) {
	if name == "" {
		return _SIPTypeValue[_SIPTypeNames[0]], nil
	}
	if x, ok := _SIPTypeValue[name]; ok {
		return x, nil
	}
	var e SIPType
	return e, fmt.Errorf("%s is not a valid SIPType, try [%s]", name, strings.Join(_SIPTypeNames, ", "))
}

// NormalizeSIPType attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeSIPType(name string) string {
	res, err := ParseSIPType(name)
	if err != nil {
		return name
	}
	return res.String()
}
