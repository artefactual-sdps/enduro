// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// WorkflowTypeUnspecified is a WorkflowType of type Unspecified.
	WorkflowTypeUnspecified WorkflowType = iota
	// WorkflowTypeCreateAip is a WorkflowType of type Create Aip.
	WorkflowTypeCreateAip
	// WorkflowTypeCreateAndReviewAip is a WorkflowType of type Create And Review Aip.
	WorkflowTypeCreateAndReviewAip
)

var ErrInvalidWorkflowType = fmt.Errorf("not a valid WorkflowType, try [%s]", strings.Join(_WorkflowTypeNames, ", "))

const _WorkflowTypeName = "unspecifiedcreate aipcreate and review aip"

var _WorkflowTypeNames = []string{
	_WorkflowTypeName[0:11],
	_WorkflowTypeName[11:21],
	_WorkflowTypeName[21:42],
}

// WorkflowTypeNames returns a list of possible string values of WorkflowType.
func WorkflowTypeNames() []string {
	tmp := make([]string, len(_WorkflowTypeNames))
	copy(tmp, _WorkflowTypeNames)
	return tmp
}

var _WorkflowTypeMap = map[WorkflowType]string{
	WorkflowTypeUnspecified:        _WorkflowTypeName[0:11],
	WorkflowTypeCreateAip:          _WorkflowTypeName[11:21],
	WorkflowTypeCreateAndReviewAip: _WorkflowTypeName[21:42],
}

// String implements the Stringer interface.
func (x WorkflowType) String() string {
	if str, ok := _WorkflowTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("WorkflowType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x WorkflowType) IsValid() bool {
	_, ok := _WorkflowTypeMap[x]
	return ok
}

var _WorkflowTypeValue = map[string]WorkflowType{
	_WorkflowTypeName[0:11]:  WorkflowTypeUnspecified,
	_WorkflowTypeName[11:21]: WorkflowTypeCreateAip,
	_WorkflowTypeName[21:42]: WorkflowTypeCreateAndReviewAip,
}

// ParseWorkflowType attempts to convert a string to a WorkflowType.
func ParseWorkflowType(name string) (WorkflowType, error) {
	if x, ok := _WorkflowTypeValue[name]; ok {
		return x, nil
	}
	return WorkflowType(0), fmt.Errorf("%s is %w", name, ErrInvalidWorkflowType)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x WorkflowType) Values() []string {
	return WorkflowTypeNames()
}

// WorkflowTypeInterfaces returns an interface list of possible values of WorkflowType.
func WorkflowTypeInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _WorkflowTypeNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseWorkflowTypeWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseWorkflowTypeWithDefault(name string) (WorkflowType, error) {
	if name == "" {
		return _WorkflowTypeValue[_WorkflowTypeNames[0]], nil
	}
	if x, ok := _WorkflowTypeValue[name]; ok {
		return x, nil
	}
	var e WorkflowType
	return e, fmt.Errorf("%s is not a valid WorkflowType, try [%s]", name, strings.Join(_WorkflowTypeNames, ", "))
}

// NormalizeWorkflowType attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeWorkflowType(name string) string {
	res, err := ParseWorkflowType(name)
	if err != nil {
		return name
	}
	return res.String()
}
