// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// Status is indeterminate.
	WorkflowStatusUnspecified WorkflowStatus = iota
	// Work is ongoing.
	WorkflowStatusInProgress
	// Work has completed successfully.
	WorkflowStatusDone
	// Halted due to a system error.
	WorkflowStatusError
	// Awaiting resource allocation.
	WorkflowStatusQueued
	// Awaiting user decision.
	WorkflowStatusPending
	// Halted due to a policy violation.
	WorkflowStatusFailed
)

var ErrInvalidWorkflowStatus = fmt.Errorf("not a valid WorkflowStatus, try [%s]", strings.Join(_WorkflowStatusNames, ", "))

const _WorkflowStatusName = "unspecifiedin progressdoneerrorqueuedpendingfailed"

var _WorkflowStatusNames = []string{
	_WorkflowStatusName[0:11],
	_WorkflowStatusName[11:22],
	_WorkflowStatusName[22:26],
	_WorkflowStatusName[26:31],
	_WorkflowStatusName[31:37],
	_WorkflowStatusName[37:44],
	_WorkflowStatusName[44:50],
}

// WorkflowStatusNames returns a list of possible string values of WorkflowStatus.
func WorkflowStatusNames() []string {
	tmp := make([]string, len(_WorkflowStatusNames))
	copy(tmp, _WorkflowStatusNames)
	return tmp
}

var _WorkflowStatusMap = map[WorkflowStatus]string{
	WorkflowStatusUnspecified: _WorkflowStatusName[0:11],
	WorkflowStatusInProgress:  _WorkflowStatusName[11:22],
	WorkflowStatusDone:        _WorkflowStatusName[22:26],
	WorkflowStatusError:       _WorkflowStatusName[26:31],
	WorkflowStatusQueued:      _WorkflowStatusName[31:37],
	WorkflowStatusPending:     _WorkflowStatusName[37:44],
	WorkflowStatusFailed:      _WorkflowStatusName[44:50],
}

// String implements the Stringer interface.
func (x WorkflowStatus) String() string {
	if str, ok := _WorkflowStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("WorkflowStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x WorkflowStatus) IsValid() bool {
	_, ok := _WorkflowStatusMap[x]
	return ok
}

var _WorkflowStatusValue = map[string]WorkflowStatus{
	_WorkflowStatusName[0:11]:  WorkflowStatusUnspecified,
	_WorkflowStatusName[11:22]: WorkflowStatusInProgress,
	_WorkflowStatusName[22:26]: WorkflowStatusDone,
	_WorkflowStatusName[26:31]: WorkflowStatusError,
	_WorkflowStatusName[31:37]: WorkflowStatusQueued,
	_WorkflowStatusName[37:44]: WorkflowStatusPending,
	_WorkflowStatusName[44:50]: WorkflowStatusFailed,
}

// ParseWorkflowStatus attempts to convert a string to a WorkflowStatus.
func ParseWorkflowStatus(name string) (WorkflowStatus, error) {
	if x, ok := _WorkflowStatusValue[name]; ok {
		return x, nil
	}
	return WorkflowStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidWorkflowStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x WorkflowStatus) Values() []string {
	return WorkflowStatusNames()
}

// WorkflowStatusInterfaces returns an interface list of possible values of WorkflowStatus.
func WorkflowStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _WorkflowStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseWorkflowStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseWorkflowStatusWithDefault(name string) (WorkflowStatus, error) {
	if name == "" {
		return _WorkflowStatusValue[_WorkflowStatusNames[0]], nil
	}
	if x, ok := _WorkflowStatusValue[name]; ok {
		return x, nil
	}
	var e WorkflowStatus
	return e, fmt.Errorf("%s is not a valid WorkflowStatus, try [%s]", name, strings.Join(_WorkflowStatusNames, ", "))
}

// NormalizeWorkflowStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeWorkflowStatus(name string) string {
	res, err := ParseWorkflowStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
