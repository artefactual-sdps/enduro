// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/ingest (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/ingest/fake/mock_ingest.go -package=fake github.com/artefactual-sdps/enduro/internal/ingest Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	ingest "github.com/artefactual-sdps/enduro/internal/api/gen/ingest"
	datatypes "github.com/artefactual-sdps/enduro/internal/datatypes"
	enums "github.com/artefactual-sdps/enduro/internal/enums"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CompleteTask mocks base method.
func (m *MockService) CompleteTask(arg0 context.Context, arg1 int, arg2 enums.TaskStatus, arg3 time.Time, arg4 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockServiceMockRecorder) CompleteTask(arg0, arg1, arg2, arg3, arg4 any) *MockServiceCompleteTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockService)(nil).CompleteTask), arg0, arg1, arg2, arg3, arg4)
	return &MockServiceCompleteTaskCall{Call: call}
}

// MockServiceCompleteTaskCall wrap *gomock.Call
type MockServiceCompleteTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCompleteTaskCall) Return(arg0 error) *MockServiceCompleteTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCompleteTaskCall) Do(f func(context.Context, int, enums.TaskStatus, time.Time, *string) error) *MockServiceCompleteTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCompleteTaskCall) DoAndReturn(f func(context.Context, int, enums.TaskStatus, time.Time, *string) error) *MockServiceCompleteTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CompleteWorkflow mocks base method.
func (m *MockService) CompleteWorkflow(arg0 context.Context, arg1 int, arg2 enums.WorkflowStatus, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteWorkflow", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteWorkflow indicates an expected call of CompleteWorkflow.
func (mr *MockServiceMockRecorder) CompleteWorkflow(arg0, arg1, arg2, arg3 any) *MockServiceCompleteWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteWorkflow", reflect.TypeOf((*MockService)(nil).CompleteWorkflow), arg0, arg1, arg2, arg3)
	return &MockServiceCompleteWorkflowCall{Call: call}
}

// MockServiceCompleteWorkflowCall wrap *gomock.Call
type MockServiceCompleteWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCompleteWorkflowCall) Return(arg0 error) *MockServiceCompleteWorkflowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCompleteWorkflowCall) Do(f func(context.Context, int, enums.WorkflowStatus, time.Time) error) *MockServiceCompleteWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCompleteWorkflowCall) DoAndReturn(f func(context.Context, int, enums.WorkflowStatus, time.Time) error) *MockServiceCompleteWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockService) Create(arg0 context.Context, arg1 *datatypes.SIP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(arg0, arg1 any) *MockServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1)
	return &MockServiceCreateCall{Call: call}
}

// MockServiceCreateCall wrap *gomock.Call
type MockServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateCall) Return(arg0 error) *MockServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateCall) Do(f func(context.Context, *datatypes.SIP) error) *MockServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateCall) DoAndReturn(f func(context.Context, *datatypes.SIP) error) *MockServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTask mocks base method.
func (m *MockService) CreateTask(arg0 context.Context, arg1 *datatypes.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockServiceMockRecorder) CreateTask(arg0, arg1 any) *MockServiceCreateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockService)(nil).CreateTask), arg0, arg1)
	return &MockServiceCreateTaskCall{Call: call}
}

// MockServiceCreateTaskCall wrap *gomock.Call
type MockServiceCreateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateTaskCall) Return(arg0 error) *MockServiceCreateTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateTaskCall) Do(f func(context.Context, *datatypes.Task) error) *MockServiceCreateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateTaskCall) DoAndReturn(f func(context.Context, *datatypes.Task) error) *MockServiceCreateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateWorkflow mocks base method.
func (m *MockService) CreateWorkflow(arg0 context.Context, arg1 *datatypes.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockServiceMockRecorder) CreateWorkflow(arg0, arg1 any) *MockServiceCreateWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockService)(nil).CreateWorkflow), arg0, arg1)
	return &MockServiceCreateWorkflowCall{Call: call}
}

// MockServiceCreateWorkflowCall wrap *gomock.Call
type MockServiceCreateWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateWorkflowCall) Return(arg0 error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateWorkflowCall) Do(f func(context.Context, *datatypes.Workflow) error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateWorkflowCall) DoAndReturn(f func(context.Context, *datatypes.Workflow) error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Goa mocks base method.
func (m *MockService) Goa() ingest.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Goa")
	ret0, _ := ret[0].(ingest.Service)
	return ret0
}

// Goa indicates an expected call of Goa.
func (mr *MockServiceMockRecorder) Goa() *MockServiceGoaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Goa", reflect.TypeOf((*MockService)(nil).Goa))
	return &MockServiceGoaCall{Call: call}
}

// MockServiceGoaCall wrap *gomock.Call
type MockServiceGoaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGoaCall) Return(arg0 ingest.Service) *MockServiceGoaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGoaCall) Do(f func() ingest.Service) *MockServiceGoaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGoaCall) DoAndReturn(f func() ingest.Service) *MockServiceGoaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLocationID mocks base method.
func (m *MockService) SetLocationID(arg0 context.Context, arg1 int, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLocationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLocationID indicates an expected call of SetLocationID.
func (mr *MockServiceMockRecorder) SetLocationID(arg0, arg1, arg2 any) *MockServiceSetLocationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocationID", reflect.TypeOf((*MockService)(nil).SetLocationID), arg0, arg1, arg2)
	return &MockServiceSetLocationIDCall{Call: call}
}

// MockServiceSetLocationIDCall wrap *gomock.Call
type MockServiceSetLocationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetLocationIDCall) Return(arg0 error) *MockServiceSetLocationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetLocationIDCall) Do(f func(context.Context, int, uuid.UUID) error) *MockServiceSetLocationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetLocationIDCall) DoAndReturn(f func(context.Context, int, uuid.UUID) error) *MockServiceSetLocationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockService) SetStatus(arg0 context.Context, arg1 int, arg2 enums.SIPStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockServiceMockRecorder) SetStatus(arg0, arg1, arg2 any) *MockServiceSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockService)(nil).SetStatus), arg0, arg1, arg2)
	return &MockServiceSetStatusCall{Call: call}
}

// MockServiceSetStatusCall wrap *gomock.Call
type MockServiceSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetStatusCall) Return(arg0 error) *MockServiceSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetStatusCall) Do(f func(context.Context, int, enums.SIPStatus) error) *MockServiceSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetStatusCall) DoAndReturn(f func(context.Context, int, enums.SIPStatus) error) *MockServiceSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusInProgress mocks base method.
func (m *MockService) SetStatusInProgress(arg0 context.Context, arg1 int, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusInProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusInProgress indicates an expected call of SetStatusInProgress.
func (mr *MockServiceMockRecorder) SetStatusInProgress(arg0, arg1, arg2 any) *MockServiceSetStatusInProgressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusInProgress", reflect.TypeOf((*MockService)(nil).SetStatusInProgress), arg0, arg1, arg2)
	return &MockServiceSetStatusInProgressCall{Call: call}
}

// MockServiceSetStatusInProgressCall wrap *gomock.Call
type MockServiceSetStatusInProgressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetStatusInProgressCall) Return(arg0 error) *MockServiceSetStatusInProgressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetStatusInProgressCall) Do(f func(context.Context, int, time.Time) error) *MockServiceSetStatusInProgressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetStatusInProgressCall) DoAndReturn(f func(context.Context, int, time.Time) error) *MockServiceSetStatusInProgressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusPending mocks base method.
func (m *MockService) SetStatusPending(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusPending", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusPending indicates an expected call of SetStatusPending.
func (mr *MockServiceMockRecorder) SetStatusPending(arg0, arg1 any) *MockServiceSetStatusPendingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPending", reflect.TypeOf((*MockService)(nil).SetStatusPending), arg0, arg1)
	return &MockServiceSetStatusPendingCall{Call: call}
}

// MockServiceSetStatusPendingCall wrap *gomock.Call
type MockServiceSetStatusPendingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetStatusPendingCall) Return(arg0 error) *MockServiceSetStatusPendingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetStatusPendingCall) Do(f func(context.Context, int) error) *MockServiceSetStatusPendingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetStatusPendingCall) DoAndReturn(f func(context.Context, int) error) *MockServiceSetStatusPendingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetWorkflowStatus mocks base method.
func (m *MockService) SetWorkflowStatus(arg0 context.Context, arg1 int, arg2 enums.WorkflowStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWorkflowStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWorkflowStatus indicates an expected call of SetWorkflowStatus.
func (mr *MockServiceMockRecorder) SetWorkflowStatus(arg0, arg1, arg2 any) *MockServiceSetWorkflowStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkflowStatus", reflect.TypeOf((*MockService)(nil).SetWorkflowStatus), arg0, arg1, arg2)
	return &MockServiceSetWorkflowStatusCall{Call: call}
}

// MockServiceSetWorkflowStatusCall wrap *gomock.Call
type MockServiceSetWorkflowStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetWorkflowStatusCall) Return(arg0 error) *MockServiceSetWorkflowStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetWorkflowStatusCall) Do(f func(context.Context, int, enums.WorkflowStatus) error) *MockServiceSetWorkflowStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetWorkflowStatusCall) DoAndReturn(f func(context.Context, int, enums.WorkflowStatus) error) *MockServiceSetWorkflowStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWorkflowStatus mocks base method.
func (m *MockService) UpdateWorkflowStatus(arg0 context.Context, arg1 int, arg2, arg3, arg4, arg5 string, arg6 enums.SIPStatus, arg7 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStatus", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowStatus indicates an expected call of UpdateWorkflowStatus.
func (mr *MockServiceMockRecorder) UpdateWorkflowStatus(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *MockServiceUpdateWorkflowStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStatus", reflect.TypeOf((*MockService)(nil).UpdateWorkflowStatus), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	return &MockServiceUpdateWorkflowStatusCall{Call: call}
}

// MockServiceUpdateWorkflowStatusCall wrap *gomock.Call
type MockServiceUpdateWorkflowStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateWorkflowStatusCall) Return(arg0 error) *MockServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateWorkflowStatusCall) Do(f func(context.Context, int, string, string, string, string, enums.SIPStatus, time.Time) error) *MockServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateWorkflowStatusCall) DoAndReturn(f func(context.Context, int, string, string, string, string, enums.SIPStatus, time.Time) error) *MockServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
