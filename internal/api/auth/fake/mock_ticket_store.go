// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/api/auth (interfaces: TicketStore)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/api/auth/fake/mock_ticket_store.go -package=fake github.com/artefactual-sdps/enduro/internal/api/auth TicketStore
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTicketStore is a mock of TicketStore interface.
type MockTicketStore struct {
	ctrl     *gomock.Controller
	recorder *MockTicketStoreMockRecorder
}

// MockTicketStoreMockRecorder is the mock recorder for MockTicketStore.
type MockTicketStoreMockRecorder struct {
	mock *MockTicketStore
}

// NewMockTicketStore creates a new mock instance.
func NewMockTicketStore(ctrl *gomock.Controller) *MockTicketStore {
	mock := &MockTicketStore{ctrl: ctrl}
	mock.recorder = &MockTicketStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketStore) EXPECT() *MockTicketStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTicketStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTicketStoreMockRecorder) Close() *MockTicketStoreCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTicketStore)(nil).Close))
	return &MockTicketStoreCloseCall{Call: call}
}

// MockTicketStoreCloseCall wrap *gomock.Call
type MockTicketStoreCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTicketStoreCloseCall) Return(arg0 error) *MockTicketStoreCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTicketStoreCloseCall) Do(f func() error) *MockTicketStoreCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTicketStoreCloseCall) DoAndReturn(f func() error) *MockTicketStoreCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDel mocks base method.
func (m *MockTicketStore) GetDel(arg0 context.Context, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDel indicates an expected call of GetDel.
func (mr *MockTicketStoreMockRecorder) GetDel(arg0, arg1, arg2 any) *MockTicketStoreGetDelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDel", reflect.TypeOf((*MockTicketStore)(nil).GetDel), arg0, arg1, arg2)
	return &MockTicketStoreGetDelCall{Call: call}
}

// MockTicketStoreGetDelCall wrap *gomock.Call
type MockTicketStoreGetDelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTicketStoreGetDelCall) Return(arg0 error) *MockTicketStoreGetDelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTicketStoreGetDelCall) Do(f func(context.Context, string, any) error) *MockTicketStoreGetDelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTicketStoreGetDelCall) DoAndReturn(f func(context.Context, string, any) error) *MockTicketStoreGetDelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetEx mocks base method.
func (m *MockTicketStore) SetEx(arg0 context.Context, arg1 string, arg2 any, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEx indicates an expected call of SetEx.
func (mr *MockTicketStoreMockRecorder) SetEx(arg0, arg1, arg2, arg3 any) *MockTicketStoreSetExCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockTicketStore)(nil).SetEx), arg0, arg1, arg2, arg3)
	return &MockTicketStoreSetExCall{Call: call}
}

// MockTicketStoreSetExCall wrap *gomock.Call
type MockTicketStoreSetExCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTicketStoreSetExCall) Return(arg0 error) *MockTicketStoreSetExCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTicketStoreSetExCall) Do(f func(context.Context, string, any, time.Duration) error) *MockTicketStoreSetExCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTicketStoreSetExCall) DoAndReturn(f func(context.Context, string, any, time.Duration) error) *MockTicketStoreSetExCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
