// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/api/auth (interfaces: TicketStore)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTicketStore is a mock of TicketStore interface.
type MockTicketStore struct {
	ctrl     *gomock.Controller
	recorder *MockTicketStoreMockRecorder
}

// MockTicketStoreMockRecorder is the mock recorder for MockTicketStore.
type MockTicketStoreMockRecorder struct {
	mock *MockTicketStore
}

// NewMockTicketStore creates a new mock instance.
func NewMockTicketStore(ctrl *gomock.Controller) *MockTicketStore {
	mock := &MockTicketStore{ctrl: ctrl}
	mock.recorder = &MockTicketStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketStore) EXPECT() *MockTicketStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTicketStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTicketStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTicketStore)(nil).Close))
}

// GetDel mocks base method.
func (m *MockTicketStore) GetDel(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDel indicates an expected call of GetDel.
func (mr *MockTicketStoreMockRecorder) GetDel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDel", reflect.TypeOf((*MockTicketStore)(nil).GetDel), arg0, arg1)
}

// SetEx mocks base method.
func (m *MockTicketStore) SetEx(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEx indicates an expected call of SetEx.
func (mr *MockTicketStoreMockRecorder) SetEx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockTicketStore)(nil).SetEx), arg0, arg1, arg2)
}
