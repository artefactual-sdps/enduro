// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/api/auth (interfaces: TicketProvider)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/api/auth/fake/mock_ticket_provider.go -package=fake github.com/artefactual-sdps/enduro/internal/api/auth TicketProvider
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTicketProvider is a mock of TicketProvider interface.
type MockTicketProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTicketProviderMockRecorder
	isgomock struct{}
}

// MockTicketProviderMockRecorder is the mock recorder for MockTicketProvider.
type MockTicketProviderMockRecorder struct {
	mock *MockTicketProvider
}

// NewMockTicketProvider creates a new mock instance.
func NewMockTicketProvider(ctrl *gomock.Controller) *MockTicketProvider {
	mock := &MockTicketProvider{ctrl: ctrl}
	mock.recorder = &MockTicketProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketProvider) EXPECT() *MockTicketProviderMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockTicketProvider) Check(ctx context.Context, ticket *string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, ticket, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockTicketProviderMockRecorder) Check(ctx, ticket, value any) *MockTicketProviderCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockTicketProvider)(nil).Check), ctx, ticket, value)
	return &MockTicketProviderCheckCall{Call: call}
}

// MockTicketProviderCheckCall wrap *gomock.Call
type MockTicketProviderCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTicketProviderCheckCall) Return(arg0 error) *MockTicketProviderCheckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTicketProviderCheckCall) Do(f func(context.Context, *string, any) error) *MockTicketProviderCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTicketProviderCheckCall) DoAndReturn(f func(context.Context, *string, any) error) *MockTicketProviderCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockTicketProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTicketProviderMockRecorder) Close() *MockTicketProviderCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTicketProvider)(nil).Close))
	return &MockTicketProviderCloseCall{Call: call}
}

// MockTicketProviderCloseCall wrap *gomock.Call
type MockTicketProviderCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTicketProviderCloseCall) Return(arg0 error) *MockTicketProviderCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTicketProviderCloseCall) Do(f func() error) *MockTicketProviderCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTicketProviderCloseCall) DoAndReturn(f func() error) *MockTicketProviderCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Request mocks base method.
func (m *MockTicketProvider) Request(ctx context.Context, value any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", ctx, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockTicketProviderMockRecorder) Request(ctx, value any) *MockTicketProviderRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockTicketProvider)(nil).Request), ctx, value)
	return &MockTicketProviderRequestCall{Call: call}
}

// MockTicketProviderRequestCall wrap *gomock.Call
type MockTicketProviderRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTicketProviderRequestCall) Return(arg0 string, arg1 error) *MockTicketProviderRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTicketProviderRequestCall) Do(f func(context.Context, any) (string, error)) *MockTicketProviderRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTicketProviderRequestCall) DoAndReturn(f func(context.Context, any) (string, error)) *MockTicketProviderRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
