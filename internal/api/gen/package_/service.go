// Code generated by goa v3.7.10, DO NOT EDIT.
//
// package service
//
// Command:
// $ goa-v3.7.10 gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package package_

import (
	"context"

	package_views "github.com/artefactual-labs/enduro/internal/api/gen/package_/views"
	goa "goa.design/goa/v3/pkg"
)

// The package service manages packages being transferred to a3m.
type Service interface {
	// Monitor implements monitor.
	Monitor(context.Context, MonitorServerStream) (err error)
	// List all stored packages
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// Show package by ID
	Show(context.Context, *ShowPayload) (res *EnduroStoredPackage, err error)
	// Delete package by ID
	Delete(context.Context, *DeletePayload) (err error)
	// Cancel package processing by ID
	Cancel(context.Context, *CancelPayload) (err error)
	// Retry package processing by ID
	Retry(context.Context, *RetryPayload) (err error)
	// Retrieve workflow status by ID
	Workflow(context.Context, *WorkflowPayload) (res *EnduroPackageWorkflowStatus, err error)
	// Bulk operations (retry, cancel...).
	Bulk(context.Context, *BulkPayload) (res *BulkResult, err error)
	// Retrieve status of current bulk operation.
	BulkStatus(context.Context) (res *BulkStatusResult, err error)
	// List all preservation actions by ID
	PreservationActions(context.Context, *PreservationActionsPayload) (res *EnduroPackagePreservationActions, err error)
	// Signal the package has been reviewed and accepted
	Confirm(context.Context, *ConfirmPayload) (err error)
	// Signal the package has been reviewed and rejected
	Reject(context.Context, *RejectPayload) (err error)
	// Move a package to a permanent storage location
	Move(context.Context, *MovePayload) (err error)
	// Retrieve the status of a permanent storage location move of the package
	MoveStatus(context.Context, *MoveStatusPayload) (res *MoveStatusResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "package"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [14]string{"monitor", "list", "show", "delete", "cancel", "retry", "workflow", "bulk", "bulk_status", "preservation-actions", "confirm", "reject", "move", "move_status"}

// MonitorServerStream is the interface a "monitor" endpoint server stream must
// satisfy.
type MonitorServerStream interface {
	// Send streams instances of "EnduroMonitorEvent".
	Send(*EnduroMonitorEvent) error
	// Close closes the stream.
	Close() error
}

// MonitorClientStream is the interface a "monitor" endpoint client stream must
// satisfy.
type MonitorClientStream interface {
	// Recv reads instances of "EnduroMonitorEvent" from the stream.
	Recv() (*EnduroMonitorEvent, error)
}

// BulkPayload is the payload type of the package service bulk method.
type BulkPayload struct {
	Operation string
	Status    string
	Size      uint
}

// BulkResult is the result type of the package service bulk method.
type BulkResult struct {
	WorkflowID string
	RunID      string
}

// BulkStatusResult is the result type of the package service bulk_status
// method.
type BulkStatusResult struct {
	Running    bool
	StartedAt  *string
	ClosedAt   *string
	Status     *string
	WorkflowID *string
	RunID      *string
}

// CancelPayload is the payload type of the package service cancel method.
type CancelPayload struct {
	// Identifier of package to remove
	ID uint
}

// ConfirmPayload is the payload type of the package service confirm method.
type ConfirmPayload struct {
	// Identifier of package to look up
	ID       uint
	Location string
}

// DeletePayload is the payload type of the package service delete method.
type DeletePayload struct {
	// Identifier of package to delete
	ID uint
}

// EnduroMonitorEvent is the result type of the package service monitor method.
type EnduroMonitorEvent struct {
	MonitorPingEvent            *EnduroMonitorPingEvent
	PackageCreatedEvent         *EnduroPackageCreatedEvent
	PackageDeletedEvent         *EnduroPackageDeletedEvent
	PackageUpdatedEvent         *EnduroPackageUpdatedEvent
	PackageStatusUpdatedEvent   *EnduroPackageStatusUpdatedEvent
	PackageLocationUpdatedEvent *EnduroPackageLocationUpdatedEvent
}

type EnduroMonitorPingEvent struct {
	Message *string
}

type EnduroPackageCreatedEvent struct {
	// Identifier of package
	ID   uint
	Item *EnduroStoredPackage
}

type EnduroPackageDeletedEvent struct {
	// Identifier of package
	ID uint
}

type EnduroPackageLocationUpdatedEvent struct {
	// Identifier of package
	ID       uint
	Location string
}

// PreservationAction describes a preservation action.
type EnduroPackagePreservationAction struct {
	ID          uint
	WorkflowID  string
	Type        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Tasks       EnduroPackagePreservationTaskCollection
}

type EnduroPackagePreservationActionCollection []*EnduroPackagePreservationAction

// EnduroPackagePreservationActions is the result type of the package service
// preservation-actions method.
type EnduroPackagePreservationActions struct {
	Actions EnduroPackagePreservationActionCollection
}

// PreservationTask describes a preservation action task.
type EnduroPackagePreservationTask struct {
	ID          uint
	TaskID      string
	Name        string
	Status      string
	StartedAt   string
	CompletedAt *string
}

type EnduroPackagePreservationTaskCollection []*EnduroPackagePreservationTask

type EnduroPackageStatusUpdatedEvent struct {
	// Identifier of package
	ID     uint
	Status string
}

type EnduroPackageUpdatedEvent struct {
	// Identifier of package
	ID   uint
	Item *EnduroStoredPackage
}

// WorkflowHistoryEvent describes a history event in Temporal.
type EnduroPackageWorkflowHistory struct {
	// Identifier of package
	ID *uint
	// Type of the event
	Type *string
	// Contents of the event
	Details interface{}
}

type EnduroPackageWorkflowHistoryCollection []*EnduroPackageWorkflowHistory

// EnduroPackageWorkflowStatus is the result type of the package service
// workflow method.
type EnduroPackageWorkflowStatus struct {
	Status  *string
	History EnduroPackageWorkflowHistoryCollection
}

// EnduroStoredPackage is the result type of the package service show method.
type EnduroStoredPackage struct {
	// Identifier of package
	ID uint
	// Name of the package
	Name *string
	// Location of the package
	Location *string
	// Status of the package
	Status string
	// Identifier of processing workflow
	WorkflowID *string
	// Identifier of latest processing workflow run
	RunID *string
	// Identifier of Archivematica AIP
	AipID *string
	// Creation datetime
	CreatedAt string
	// Start datetime
	StartedAt *string
	// Completion datetime
	CompletedAt *string
}

type EnduroStoredPackageCollection []*EnduroStoredPackage

// ListPayload is the payload type of the package service list method.
type ListPayload struct {
	Name                *string
	AipID               *string
	EarliestCreatedTime *string
	LatestCreatedTime   *string
	Location            *string
	Status              *string
	// Pagination cursor
	Cursor *string
}

// ListResult is the result type of the package service list method.
type ListResult struct {
	Items      EnduroStoredPackageCollection
	NextCursor *string
}

// MovePayload is the payload type of the package service move method.
type MovePayload struct {
	// Identifier of package to move
	ID       uint
	Location string
}

// MoveStatusPayload is the payload type of the package service move_status
// method.
type MoveStatusPayload struct {
	// Identifier of package to move
	ID uint
}

// MoveStatusResult is the result type of the package service move_status
// method.
type MoveStatusResult struct {
	Done bool
}

// Package not found.
type PackageNotfound struct {
	// Message of error
	Message string
	// Identifier of missing package
	ID uint
}

// PreservationActionsPayload is the payload type of the package service
// preservation-actions method.
type PreservationActionsPayload struct {
	// Identifier of package to look up
	ID uint
}

// RejectPayload is the payload type of the package service reject method.
type RejectPayload struct {
	// Identifier of package to look up
	ID uint
}

// RetryPayload is the payload type of the package service retry method.
type RetryPayload struct {
	// Identifier of package to retry
	ID uint
}

// ShowPayload is the payload type of the package service show method.
type ShowPayload struct {
	// Identifier of package to show
	ID uint
}

// WorkflowPayload is the payload type of the package service workflow method.
type WorkflowPayload struct {
	// Identifier of package to look up
	ID uint
}

// Error returns an error description.
func (e *PackageNotfound) Error() string {
	return "Package not found."
}

// ErrorName returns "PackageNotfound".
func (e *PackageNotfound) ErrorName() string {
	return e.Message
}

// MakeNotRunning builds a goa.ServiceError from an error.
func MakeNotRunning(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_running",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotAvailable builds a goa.ServiceError from an error.
func MakeNotAvailable(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_available",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotValid builds a goa.ServiceError from an error.
func MakeNotValid(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_valid",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeFailedDependency builds a goa.ServiceError from an error.
func MakeFailedDependency(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "failed_dependency",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewEnduroMonitorEvent initializes result type EnduroMonitorEvent from viewed
// result type EnduroMonitorEvent.
func NewEnduroMonitorEvent(vres *package_views.EnduroMonitorEvent) *EnduroMonitorEvent {
	return newEnduroMonitorEvent(vres.Projected)
}

// NewViewedEnduroMonitorEvent initializes viewed result type
// EnduroMonitorEvent from result type EnduroMonitorEvent using the given view.
func NewViewedEnduroMonitorEvent(res *EnduroMonitorEvent, view string) *package_views.EnduroMonitorEvent {
	p := newEnduroMonitorEventView(res)
	return &package_views.EnduroMonitorEvent{Projected: p, View: "default"}
}

// NewEnduroStoredPackage initializes result type EnduroStoredPackage from
// viewed result type EnduroStoredPackage.
func NewEnduroStoredPackage(vres *package_views.EnduroStoredPackage) *EnduroStoredPackage {
	return newEnduroStoredPackage(vres.Projected)
}

// NewViewedEnduroStoredPackage initializes viewed result type
// EnduroStoredPackage from result type EnduroStoredPackage using the given
// view.
func NewViewedEnduroStoredPackage(res *EnduroStoredPackage, view string) *package_views.EnduroStoredPackage {
	p := newEnduroStoredPackageView(res)
	return &package_views.EnduroStoredPackage{Projected: p, View: "default"}
}

// NewEnduroPackageWorkflowStatus initializes result type
// EnduroPackageWorkflowStatus from viewed result type
// EnduroPackageWorkflowStatus.
func NewEnduroPackageWorkflowStatus(vres *package_views.EnduroPackageWorkflowStatus) *EnduroPackageWorkflowStatus {
	return newEnduroPackageWorkflowStatus(vres.Projected)
}

// NewViewedEnduroPackageWorkflowStatus initializes viewed result type
// EnduroPackageWorkflowStatus from result type EnduroPackageWorkflowStatus
// using the given view.
func NewViewedEnduroPackageWorkflowStatus(res *EnduroPackageWorkflowStatus, view string) *package_views.EnduroPackageWorkflowStatus {
	p := newEnduroPackageWorkflowStatusView(res)
	return &package_views.EnduroPackageWorkflowStatus{Projected: p, View: "default"}
}

// NewEnduroPackagePreservationActions initializes result type
// EnduroPackagePreservationActions from viewed result type
// EnduroPackagePreservationActions.
func NewEnduroPackagePreservationActions(vres *package_views.EnduroPackagePreservationActions) *EnduroPackagePreservationActions {
	return newEnduroPackagePreservationActions(vres.Projected)
}

// NewViewedEnduroPackagePreservationActions initializes viewed result type
// EnduroPackagePreservationActions from result type
// EnduroPackagePreservationActions using the given view.
func NewViewedEnduroPackagePreservationActions(res *EnduroPackagePreservationActions, view string) *package_views.EnduroPackagePreservationActions {
	p := newEnduroPackagePreservationActionsView(res)
	return &package_views.EnduroPackagePreservationActions{Projected: p, View: "default"}
}

// newEnduroMonitorEvent converts projected type EnduroMonitorEvent to service
// type EnduroMonitorEvent.
func newEnduroMonitorEvent(vres *package_views.EnduroMonitorEventView) *EnduroMonitorEvent {
	res := &EnduroMonitorEvent{}
	if vres.PackageCreatedEvent != nil {
		res.PackageCreatedEvent = transformPackageViewsEnduroPackageCreatedEventViewToEnduroPackageCreatedEvent(vres.PackageCreatedEvent)
	}
	if vres.PackageUpdatedEvent != nil {
		res.PackageUpdatedEvent = transformPackageViewsEnduroPackageUpdatedEventViewToEnduroPackageUpdatedEvent(vres.PackageUpdatedEvent)
	}
	if vres.MonitorPingEvent != nil {
		res.MonitorPingEvent = newEnduroMonitorPingEvent(vres.MonitorPingEvent)
	}
	if vres.PackageDeletedEvent != nil {
		res.PackageDeletedEvent = newEnduroPackageDeletedEvent(vres.PackageDeletedEvent)
	}
	if vres.PackageStatusUpdatedEvent != nil {
		res.PackageStatusUpdatedEvent = newEnduroPackageStatusUpdatedEvent(vres.PackageStatusUpdatedEvent)
	}
	if vres.PackageLocationUpdatedEvent != nil {
		res.PackageLocationUpdatedEvent = newEnduroPackageLocationUpdatedEvent(vres.PackageLocationUpdatedEvent)
	}
	return res
}

// newEnduroMonitorEventView projects result type EnduroMonitorEvent to
// projected type EnduroMonitorEventView using the "default" view.
func newEnduroMonitorEventView(res *EnduroMonitorEvent) *package_views.EnduroMonitorEventView {
	vres := &package_views.EnduroMonitorEventView{}
	if res.PackageCreatedEvent != nil {
		vres.PackageCreatedEvent = transformEnduroPackageCreatedEventToPackageViewsEnduroPackageCreatedEventView(res.PackageCreatedEvent)
	}
	if res.PackageUpdatedEvent != nil {
		vres.PackageUpdatedEvent = transformEnduroPackageUpdatedEventToPackageViewsEnduroPackageUpdatedEventView(res.PackageUpdatedEvent)
	}
	if res.MonitorPingEvent != nil {
		vres.MonitorPingEvent = newEnduroMonitorPingEventView(res.MonitorPingEvent)
	}
	if res.PackageDeletedEvent != nil {
		vres.PackageDeletedEvent = newEnduroPackageDeletedEventView(res.PackageDeletedEvent)
	}
	if res.PackageStatusUpdatedEvent != nil {
		vres.PackageStatusUpdatedEvent = newEnduroPackageStatusUpdatedEventView(res.PackageStatusUpdatedEvent)
	}
	if res.PackageLocationUpdatedEvent != nil {
		vres.PackageLocationUpdatedEvent = newEnduroPackageLocationUpdatedEventView(res.PackageLocationUpdatedEvent)
	}
	return vres
}

// newEnduroMonitorPingEvent converts projected type EnduroMonitorPingEvent to
// service type EnduroMonitorPingEvent.
func newEnduroMonitorPingEvent(vres *package_views.EnduroMonitorPingEventView) *EnduroMonitorPingEvent {
	res := &EnduroMonitorPingEvent{
		Message: vres.Message,
	}
	return res
}

// newEnduroMonitorPingEventView projects result type EnduroMonitorPingEvent to
// projected type EnduroMonitorPingEventView using the "default" view.
func newEnduroMonitorPingEventView(res *EnduroMonitorPingEvent) *package_views.EnduroMonitorPingEventView {
	vres := &package_views.EnduroMonitorPingEventView{
		Message: res.Message,
	}
	return vres
}

// newEnduroPackageCreatedEvent converts projected type
// EnduroPackageCreatedEvent to service type EnduroPackageCreatedEvent.
func newEnduroPackageCreatedEvent(vres *package_views.EnduroPackageCreatedEventView) *EnduroPackageCreatedEvent {
	res := &EnduroPackageCreatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroStoredPackage(vres.Item)
	}
	return res
}

// newEnduroPackageCreatedEventView projects result type
// EnduroPackageCreatedEvent to projected type EnduroPackageCreatedEventView
// using the "default" view.
func newEnduroPackageCreatedEventView(res *EnduroPackageCreatedEvent) *package_views.EnduroPackageCreatedEventView {
	vres := &package_views.EnduroPackageCreatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroStoredPackageView(res.Item)
	}
	return vres
}

// newEnduroStoredPackage converts projected type EnduroStoredPackage to
// service type EnduroStoredPackage.
func newEnduroStoredPackage(vres *package_views.EnduroStoredPackageView) *EnduroStoredPackage {
	res := &EnduroStoredPackage{
		Name:        vres.Name,
		Location:    vres.Location,
		WorkflowID:  vres.WorkflowID,
		RunID:       vres.RunID,
		AipID:       vres.AipID,
		StartedAt:   vres.StartedAt,
		CompletedAt: vres.CompletedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Status == nil {
		res.Status = "new"
	}
	return res
}

// newEnduroStoredPackageView projects result type EnduroStoredPackage to
// projected type EnduroStoredPackageView using the "default" view.
func newEnduroStoredPackageView(res *EnduroStoredPackage) *package_views.EnduroStoredPackageView {
	vres := &package_views.EnduroStoredPackageView{
		ID:          &res.ID,
		Name:        res.Name,
		Location:    res.Location,
		Status:      &res.Status,
		WorkflowID:  res.WorkflowID,
		RunID:       res.RunID,
		AipID:       res.AipID,
		CreatedAt:   &res.CreatedAt,
		StartedAt:   res.StartedAt,
		CompletedAt: res.CompletedAt,
	}
	return vres
}

// newEnduroPackageDeletedEvent converts projected type
// EnduroPackageDeletedEvent to service type EnduroPackageDeletedEvent.
func newEnduroPackageDeletedEvent(vres *package_views.EnduroPackageDeletedEventView) *EnduroPackageDeletedEvent {
	res := &EnduroPackageDeletedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	return res
}

// newEnduroPackageDeletedEventView projects result type
// EnduroPackageDeletedEvent to projected type EnduroPackageDeletedEventView
// using the "default" view.
func newEnduroPackageDeletedEventView(res *EnduroPackageDeletedEvent) *package_views.EnduroPackageDeletedEventView {
	vres := &package_views.EnduroPackageDeletedEventView{
		ID: &res.ID,
	}
	return vres
}

// newEnduroPackageUpdatedEvent converts projected type
// EnduroPackageUpdatedEvent to service type EnduroPackageUpdatedEvent.
func newEnduroPackageUpdatedEvent(vres *package_views.EnduroPackageUpdatedEventView) *EnduroPackageUpdatedEvent {
	res := &EnduroPackageUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroStoredPackage(vres.Item)
	}
	return res
}

// newEnduroPackageUpdatedEventView projects result type
// EnduroPackageUpdatedEvent to projected type EnduroPackageUpdatedEventView
// using the "default" view.
func newEnduroPackageUpdatedEventView(res *EnduroPackageUpdatedEvent) *package_views.EnduroPackageUpdatedEventView {
	vres := &package_views.EnduroPackageUpdatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroStoredPackageView(res.Item)
	}
	return vres
}

// newEnduroPackageStatusUpdatedEvent converts projected type
// EnduroPackageStatusUpdatedEvent to service type
// EnduroPackageStatusUpdatedEvent.
func newEnduroPackageStatusUpdatedEvent(vres *package_views.EnduroPackageStatusUpdatedEventView) *EnduroPackageStatusUpdatedEvent {
	res := &EnduroPackageStatusUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	return res
}

// newEnduroPackageStatusUpdatedEventView projects result type
// EnduroPackageStatusUpdatedEvent to projected type
// EnduroPackageStatusUpdatedEventView using the "default" view.
func newEnduroPackageStatusUpdatedEventView(res *EnduroPackageStatusUpdatedEvent) *package_views.EnduroPackageStatusUpdatedEventView {
	vres := &package_views.EnduroPackageStatusUpdatedEventView{
		ID:     &res.ID,
		Status: &res.Status,
	}
	return vres
}

// newEnduroPackageLocationUpdatedEvent converts projected type
// EnduroPackageLocationUpdatedEvent to service type
// EnduroPackageLocationUpdatedEvent.
func newEnduroPackageLocationUpdatedEvent(vres *package_views.EnduroPackageLocationUpdatedEventView) *EnduroPackageLocationUpdatedEvent {
	res := &EnduroPackageLocationUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Location != nil {
		res.Location = *vres.Location
	}
	return res
}

// newEnduroPackageLocationUpdatedEventView projects result type
// EnduroPackageLocationUpdatedEvent to projected type
// EnduroPackageLocationUpdatedEventView using the "default" view.
func newEnduroPackageLocationUpdatedEventView(res *EnduroPackageLocationUpdatedEvent) *package_views.EnduroPackageLocationUpdatedEventView {
	vres := &package_views.EnduroPackageLocationUpdatedEventView{
		ID:       &res.ID,
		Location: &res.Location,
	}
	return vres
}

// newEnduroPackageWorkflowStatus converts projected type
// EnduroPackageWorkflowStatus to service type EnduroPackageWorkflowStatus.
func newEnduroPackageWorkflowStatus(vres *package_views.EnduroPackageWorkflowStatusView) *EnduroPackageWorkflowStatus {
	res := &EnduroPackageWorkflowStatus{
		Status: vres.Status,
	}
	if vres.History != nil {
		res.History = newEnduroPackageWorkflowHistoryCollection(vres.History)
	}
	return res
}

// newEnduroPackageWorkflowStatusView projects result type
// EnduroPackageWorkflowStatus to projected type
// EnduroPackageWorkflowStatusView using the "default" view.
func newEnduroPackageWorkflowStatusView(res *EnduroPackageWorkflowStatus) *package_views.EnduroPackageWorkflowStatusView {
	vres := &package_views.EnduroPackageWorkflowStatusView{
		Status: res.Status,
	}
	if res.History != nil {
		vres.History = newEnduroPackageWorkflowHistoryCollectionView(res.History)
	}
	return vres
}

// newEnduroPackageWorkflowHistoryCollection converts projected type
// EnduroPackageWorkflowHistoryCollection to service type
// EnduroPackageWorkflowHistoryCollection.
func newEnduroPackageWorkflowHistoryCollection(vres package_views.EnduroPackageWorkflowHistoryCollectionView) EnduroPackageWorkflowHistoryCollection {
	res := make(EnduroPackageWorkflowHistoryCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroPackageWorkflowHistory(n)
	}
	return res
}

// newEnduroPackageWorkflowHistoryCollectionView projects result type
// EnduroPackageWorkflowHistoryCollection to projected type
// EnduroPackageWorkflowHistoryCollectionView using the "default" view.
func newEnduroPackageWorkflowHistoryCollectionView(res EnduroPackageWorkflowHistoryCollection) package_views.EnduroPackageWorkflowHistoryCollectionView {
	vres := make(package_views.EnduroPackageWorkflowHistoryCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroPackageWorkflowHistoryView(n)
	}
	return vres
}

// newEnduroPackageWorkflowHistory converts projected type
// EnduroPackageWorkflowHistory to service type EnduroPackageWorkflowHistory.
func newEnduroPackageWorkflowHistory(vres *package_views.EnduroPackageWorkflowHistoryView) *EnduroPackageWorkflowHistory {
	res := &EnduroPackageWorkflowHistory{
		ID:      vres.ID,
		Type:    vres.Type,
		Details: vres.Details,
	}
	return res
}

// newEnduroPackageWorkflowHistoryView projects result type
// EnduroPackageWorkflowHistory to projected type
// EnduroPackageWorkflowHistoryView using the "default" view.
func newEnduroPackageWorkflowHistoryView(res *EnduroPackageWorkflowHistory) *package_views.EnduroPackageWorkflowHistoryView {
	vres := &package_views.EnduroPackageWorkflowHistoryView{
		ID:      res.ID,
		Type:    res.Type,
		Details: res.Details,
	}
	return vres
}

// newEnduroPackagePreservationActions converts projected type
// EnduroPackagePreservationActions to service type
// EnduroPackagePreservationActions.
func newEnduroPackagePreservationActions(vres *package_views.EnduroPackagePreservationActionsView) *EnduroPackagePreservationActions {
	res := &EnduroPackagePreservationActions{}
	if vres.Actions != nil {
		res.Actions = newEnduroPackagePreservationActionCollection(vres.Actions)
	}
	return res
}

// newEnduroPackagePreservationActionsView projects result type
// EnduroPackagePreservationActions to projected type
// EnduroPackagePreservationActionsView using the "default" view.
func newEnduroPackagePreservationActionsView(res *EnduroPackagePreservationActions) *package_views.EnduroPackagePreservationActionsView {
	vres := &package_views.EnduroPackagePreservationActionsView{}
	if res.Actions != nil {
		vres.Actions = newEnduroPackagePreservationActionCollectionView(res.Actions)
	}
	return vres
}

// newEnduroPackagePreservationActionCollection converts projected type
// EnduroPackagePreservationActionCollection to service type
// EnduroPackagePreservationActionCollection.
func newEnduroPackagePreservationActionCollection(vres package_views.EnduroPackagePreservationActionCollectionView) EnduroPackagePreservationActionCollection {
	res := make(EnduroPackagePreservationActionCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroPackagePreservationAction(n)
	}
	return res
}

// newEnduroPackagePreservationActionCollectionView projects result type
// EnduroPackagePreservationActionCollection to projected type
// EnduroPackagePreservationActionCollectionView using the "default" view.
func newEnduroPackagePreservationActionCollectionView(res EnduroPackagePreservationActionCollection) package_views.EnduroPackagePreservationActionCollectionView {
	vres := make(package_views.EnduroPackagePreservationActionCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroPackagePreservationActionView(n)
	}
	return vres
}

// newEnduroPackagePreservationAction converts projected type
// EnduroPackagePreservationAction to service type
// EnduroPackagePreservationAction.
func newEnduroPackagePreservationAction(vres *package_views.EnduroPackagePreservationActionView) *EnduroPackagePreservationAction {
	res := &EnduroPackagePreservationAction{
		CompletedAt: vres.CompletedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.WorkflowID != nil {
		res.WorkflowID = *vres.WorkflowID
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	if vres.Tasks != nil {
		res.Tasks = newEnduroPackagePreservationTaskCollection(vres.Tasks)
	}
	return res
}

// newEnduroPackagePreservationActionView projects result type
// EnduroPackagePreservationAction to projected type
// EnduroPackagePreservationActionView using the "default" view.
func newEnduroPackagePreservationActionView(res *EnduroPackagePreservationAction) *package_views.EnduroPackagePreservationActionView {
	vres := &package_views.EnduroPackagePreservationActionView{
		ID:          &res.ID,
		WorkflowID:  &res.WorkflowID,
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   &res.StartedAt,
		CompletedAt: res.CompletedAt,
	}
	if res.Tasks != nil {
		vres.Tasks = newEnduroPackagePreservationTaskCollectionView(res.Tasks)
	}
	return vres
}

// newEnduroPackagePreservationTaskCollection converts projected type
// EnduroPackagePreservationTaskCollection to service type
// EnduroPackagePreservationTaskCollection.
func newEnduroPackagePreservationTaskCollection(vres package_views.EnduroPackagePreservationTaskCollectionView) EnduroPackagePreservationTaskCollection {
	res := make(EnduroPackagePreservationTaskCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroPackagePreservationTask(n)
	}
	return res
}

// newEnduroPackagePreservationTaskCollectionView projects result type
// EnduroPackagePreservationTaskCollection to projected type
// EnduroPackagePreservationTaskCollectionView using the "default" view.
func newEnduroPackagePreservationTaskCollectionView(res EnduroPackagePreservationTaskCollection) package_views.EnduroPackagePreservationTaskCollectionView {
	vres := make(package_views.EnduroPackagePreservationTaskCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroPackagePreservationTaskView(n)
	}
	return vres
}

// newEnduroPackagePreservationTask converts projected type
// EnduroPackagePreservationTask to service type EnduroPackagePreservationTask.
func newEnduroPackagePreservationTask(vres *package_views.EnduroPackagePreservationTaskView) *EnduroPackagePreservationTask {
	res := &EnduroPackagePreservationTask{
		CompletedAt: vres.CompletedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.TaskID != nil {
		res.TaskID = *vres.TaskID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	return res
}

// newEnduroPackagePreservationTaskView projects result type
// EnduroPackagePreservationTask to projected type
// EnduroPackagePreservationTaskView using the "default" view.
func newEnduroPackagePreservationTaskView(res *EnduroPackagePreservationTask) *package_views.EnduroPackagePreservationTaskView {
	vres := &package_views.EnduroPackagePreservationTaskView{
		ID:          &res.ID,
		TaskID:      &res.TaskID,
		Name:        &res.Name,
		Status:      &res.Status,
		StartedAt:   &res.StartedAt,
		CompletedAt: res.CompletedAt,
	}
	return vres
}

// transformPackageViewsEnduroPackageCreatedEventViewToEnduroPackageCreatedEvent
// builds a value of type *EnduroPackageCreatedEvent from a value of type
// *package_views.EnduroPackageCreatedEventView.
func transformPackageViewsEnduroPackageCreatedEventViewToEnduroPackageCreatedEvent(v *package_views.EnduroPackageCreatedEventView) *EnduroPackageCreatedEvent {
	if v == nil {
		return nil
	}
	res := &EnduroPackageCreatedEvent{
		ID: *v.ID,
	}
	if v.Item != nil {
		res.Item = transformPackageViewsEnduroStoredPackageViewToEnduroStoredPackage(v.Item)
	}

	return res
}

// transformPackageViewsEnduroStoredPackageViewToEnduroStoredPackage builds a
// value of type *EnduroStoredPackage from a value of type
// *package_views.EnduroStoredPackageView.
func transformPackageViewsEnduroStoredPackageViewToEnduroStoredPackage(v *package_views.EnduroStoredPackageView) *EnduroStoredPackage {
	res := &EnduroStoredPackage{
		ID:          *v.ID,
		Name:        v.Name,
		Location:    v.Location,
		Status:      *v.Status,
		WorkflowID:  v.WorkflowID,
		RunID:       v.RunID,
		AipID:       v.AipID,
		CreatedAt:   *v.CreatedAt,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
	}

	return res
}

// transformPackageViewsEnduroPackageUpdatedEventViewToEnduroPackageUpdatedEvent
// builds a value of type *EnduroPackageUpdatedEvent from a value of type
// *package_views.EnduroPackageUpdatedEventView.
func transformPackageViewsEnduroPackageUpdatedEventViewToEnduroPackageUpdatedEvent(v *package_views.EnduroPackageUpdatedEventView) *EnduroPackageUpdatedEvent {
	if v == nil {
		return nil
	}
	res := &EnduroPackageUpdatedEvent{
		ID: *v.ID,
	}
	if v.Item != nil {
		res.Item = transformPackageViewsEnduroStoredPackageViewToEnduroStoredPackage(v.Item)
	}

	return res
}

// transformEnduroPackageCreatedEventToPackageViewsEnduroPackageCreatedEventView
// builds a value of type *package_views.EnduroPackageCreatedEventView from a
// value of type *EnduroPackageCreatedEvent.
func transformEnduroPackageCreatedEventToPackageViewsEnduroPackageCreatedEventView(v *EnduroPackageCreatedEvent) *package_views.EnduroPackageCreatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageCreatedEventView{
		ID: &v.ID,
	}
	if v.Item != nil {
		res.Item = transformEnduroStoredPackageToPackageViewsEnduroStoredPackageView(v.Item)
	}

	return res
}

// transformEnduroStoredPackageToPackageViewsEnduroStoredPackageView builds a
// value of type *package_views.EnduroStoredPackageView from a value of type
// *EnduroStoredPackage.
func transformEnduroStoredPackageToPackageViewsEnduroStoredPackageView(v *EnduroStoredPackage) *package_views.EnduroStoredPackageView {
	res := &package_views.EnduroStoredPackageView{
		ID:          &v.ID,
		Name:        v.Name,
		Location:    v.Location,
		Status:      &v.Status,
		WorkflowID:  v.WorkflowID,
		RunID:       v.RunID,
		AipID:       v.AipID,
		CreatedAt:   &v.CreatedAt,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
	}

	return res
}

// transformEnduroPackageUpdatedEventToPackageViewsEnduroPackageUpdatedEventView
// builds a value of type *package_views.EnduroPackageUpdatedEventView from a
// value of type *EnduroPackageUpdatedEvent.
func transformEnduroPackageUpdatedEventToPackageViewsEnduroPackageUpdatedEventView(v *EnduroPackageUpdatedEvent) *package_views.EnduroPackageUpdatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageUpdatedEventView{
		ID: &v.ID,
	}
	if v.Item != nil {
		res.Item = transformEnduroStoredPackageToPackageViewsEnduroStoredPackageView(v.Item)
	}

	return res
}
