// Code generated by goa v3.9.1, DO NOT EDIT.
//
// package service
//
// Command:
// $ goa-v3.9.1 gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package package_

import (
	"context"

	package_views "github.com/artefactual-sdps/enduro/internal/api/gen/package_/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The package service manages packages being transferred to a3m.
type Service interface {
	// Request access to the /monitor WebSocket.
	MonitorRequest(context.Context, *MonitorRequestPayload) (res *MonitorRequestResult, err error)
	// Monitor implements monitor.
	Monitor(context.Context, *MonitorPayload, MonitorServerStream) (err error)
	// List all stored packages
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// Show package by ID
	Show(context.Context, *ShowPayload) (res *EnduroStoredPackage, err error)
	// List all preservation actions by ID
	PreservationActions(context.Context, *PreservationActionsPayload) (res *EnduroPackagePreservationActions, err error)
	// Signal the package has been reviewed and accepted
	Confirm(context.Context, *ConfirmPayload) (err error)
	// Signal the package has been reviewed and rejected
	Reject(context.Context, *RejectPayload) (err error)
	// Move a package to a permanent storage location
	Move(context.Context, *MovePayload) (err error)
	// Retrieve the status of a permanent storage location move of the package
	MoveStatus(context.Context, *MoveStatusPayload) (res *MoveStatusResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "package"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [9]string{"monitor_request", "monitor", "list", "show", "preservation_actions", "confirm", "reject", "move", "move_status"}

// MonitorServerStream is the interface a "monitor" endpoint server stream must
// satisfy.
type MonitorServerStream interface {
	// Send streams instances of "EnduroMonitorEvent".
	Send(*EnduroMonitorEvent) error
	// Close closes the stream.
	Close() error
}

// MonitorClientStream is the interface a "monitor" endpoint client stream must
// satisfy.
type MonitorClientStream interface {
	// Recv reads instances of "EnduroMonitorEvent" from the stream.
	Recv() (*EnduroMonitorEvent, error)
}

// ConfirmPayload is the payload type of the package service confirm method.
type ConfirmPayload struct {
	// Identifier of package to look up
	ID         uint
	LocationID uuid.UUID
	OauthToken *string
}

// EnduroMonitorEvent is the result type of the package service monitor method.
type EnduroMonitorEvent struct {
	MonitorPingEvent               *EnduroMonitorPingEvent
	PackageCreatedEvent            *EnduroPackageCreatedEvent
	PackageUpdatedEvent            *EnduroPackageUpdatedEvent
	PackageStatusUpdatedEvent      *EnduroPackageStatusUpdatedEvent
	PackageLocationUpdatedEvent    *EnduroPackageLocationUpdatedEvent
	PreservationActionCreatedEvent *EnduroPreservationActionCreatedEvent
	PreservationActionUpdatedEvent *EnduroPreservationActionUpdatedEvent
	PreservationTaskCreatedEvent   *EnduroPreservationTaskCreatedEvent
	PreservationTaskUpdatedEvent   *EnduroPreservationTaskUpdatedEvent
}

type EnduroMonitorPingEvent struct {
	Message *string
}

type EnduroPackageCreatedEvent struct {
	// Identifier of package
	ID   uint
	Item *EnduroStoredPackage
}

type EnduroPackageLocationUpdatedEvent struct {
	// Identifier of package
	ID         uint
	LocationID uuid.UUID
}

// PreservationAction describes a preservation action.
type EnduroPackagePreservationAction struct {
	ID          uint
	WorkflowID  string
	Type        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Tasks       EnduroPackagePreservationTaskCollection
	PackageID   *uint
}

type EnduroPackagePreservationActionCollection []*EnduroPackagePreservationAction

// EnduroPackagePreservationActions is the result type of the package service
// preservation_actions method.
type EnduroPackagePreservationActions struct {
	Actions EnduroPackagePreservationActionCollection
}

// PreservationTask describes a preservation action task.
type EnduroPackagePreservationTask struct {
	ID                   uint
	TaskID               string
	Name                 string
	Status               string
	StartedAt            string
	CompletedAt          *string
	Note                 *string
	PreservationActionID *uint
}

type EnduroPackagePreservationTaskCollection []*EnduroPackagePreservationTask

type EnduroPackageStatusUpdatedEvent struct {
	// Identifier of package
	ID     uint
	Status string
}

type EnduroPackageUpdatedEvent struct {
	// Identifier of package
	ID   uint
	Item *EnduroStoredPackage
}

type EnduroPreservationActionCreatedEvent struct {
	// Identifier of preservation action
	ID   uint
	Item *EnduroPackagePreservationAction
}

type EnduroPreservationActionUpdatedEvent struct {
	// Identifier of preservation action
	ID   uint
	Item *EnduroPackagePreservationAction
}

type EnduroPreservationTaskCreatedEvent struct {
	// Identifier of preservation task
	ID   uint
	Item *EnduroPackagePreservationTask
}

type EnduroPreservationTaskUpdatedEvent struct {
	// Identifier of preservation task
	ID   uint
	Item *EnduroPackagePreservationTask
}

// EnduroStoredPackage is the result type of the package service show method.
type EnduroStoredPackage struct {
	// Identifier of package
	ID uint
	// Name of the package
	Name       *string
	LocationID *uuid.UUID
	// Status of the package
	Status string
	// Identifier of processing workflow
	WorkflowID *string
	// Identifier of latest processing workflow run
	RunID *string
	// Identifier of Archivematica AIP
	AipID *string
	// Creation datetime
	CreatedAt string
	// Start datetime
	StartedAt *string
	// Completion datetime
	CompletedAt *string
}

type EnduroStoredPackageCollection []*EnduroStoredPackage

// ListPayload is the payload type of the package service list method.
type ListPayload struct {
	Name                *string
	AipID               *string
	EarliestCreatedTime *string
	LatestCreatedTime   *string
	LocationID          *string
	Status              *string
	// Pagination cursor
	Cursor     *string
	OauthToken *string
}

// ListResult is the result type of the package service list method.
type ListResult struct {
	Items      EnduroStoredPackageCollection
	NextCursor *string
}

// MonitorPayload is the payload type of the package service monitor method.
type MonitorPayload struct {
	Ticket *string
}

// MonitorRequestPayload is the payload type of the package service
// monitor_request method.
type MonitorRequestPayload struct {
	OauthToken *string
}

// MonitorRequestResult is the result type of the package service
// monitor_request method.
type MonitorRequestResult struct {
	Ticket *string
}

// MovePayload is the payload type of the package service move method.
type MovePayload struct {
	// Identifier of package to move
	ID         uint
	LocationID uuid.UUID
	OauthToken *string
}

// MoveStatusPayload is the payload type of the package service move_status
// method.
type MoveStatusPayload struct {
	// Identifier of package to move
	ID         uint
	OauthToken *string
}

// MoveStatusResult is the result type of the package service move_status
// method.
type MoveStatusResult struct {
	Done bool
}

// Package not found.
type PackageNotFound struct {
	// Message of error
	Message string
	// Identifier of missing package
	ID uint
}

// PreservationActionsPayload is the payload type of the package service
// preservation_actions method.
type PreservationActionsPayload struct {
	// Identifier of package to look up
	ID         uint
	OauthToken *string
}

// RejectPayload is the payload type of the package service reject method.
type RejectPayload struct {
	// Identifier of package to look up
	ID         uint
	OauthToken *string
}

// ShowPayload is the payload type of the package service show method.
type ShowPayload struct {
	// Identifier of package to show
	ID         uint
	OauthToken *string
}

// Invalid token
type Unauthorized string

// Error returns an error description.
func (e *PackageNotFound) Error() string {
	return "Package not found."
}

// ErrorName returns "PackageNotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *PackageNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "PackageNotFound".
func (e *PackageNotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Invalid token"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// MakeNotAvailable builds a goa.ServiceError from an error.
func MakeNotAvailable(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_available", false, false, false)
}

// MakeNotValid builds a goa.ServiceError from an error.
func MakeNotValid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_valid", false, false, false)
}

// MakeFailedDependency builds a goa.ServiceError from an error.
func MakeFailedDependency(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "failed_dependency", false, false, false)
}

// NewEnduroMonitorEvent initializes result type EnduroMonitorEvent from viewed
// result type EnduroMonitorEvent.
func NewEnduroMonitorEvent(vres *package_views.EnduroMonitorEvent) *EnduroMonitorEvent {
	return newEnduroMonitorEvent(vres.Projected)
}

// NewViewedEnduroMonitorEvent initializes viewed result type
// EnduroMonitorEvent from result type EnduroMonitorEvent using the given view.
func NewViewedEnduroMonitorEvent(res *EnduroMonitorEvent, view string) *package_views.EnduroMonitorEvent {
	p := newEnduroMonitorEventView(res)
	return &package_views.EnduroMonitorEvent{Projected: p, View: "default"}
}

// NewEnduroStoredPackage initializes result type EnduroStoredPackage from
// viewed result type EnduroStoredPackage.
func NewEnduroStoredPackage(vres *package_views.EnduroStoredPackage) *EnduroStoredPackage {
	return newEnduroStoredPackage(vres.Projected)
}

// NewViewedEnduroStoredPackage initializes viewed result type
// EnduroStoredPackage from result type EnduroStoredPackage using the given
// view.
func NewViewedEnduroStoredPackage(res *EnduroStoredPackage, view string) *package_views.EnduroStoredPackage {
	p := newEnduroStoredPackageView(res)
	return &package_views.EnduroStoredPackage{Projected: p, View: "default"}
}

// NewEnduroPackagePreservationActions initializes result type
// EnduroPackagePreservationActions from viewed result type
// EnduroPackagePreservationActions.
func NewEnduroPackagePreservationActions(vres *package_views.EnduroPackagePreservationActions) *EnduroPackagePreservationActions {
	return newEnduroPackagePreservationActions(vres.Projected)
}

// NewViewedEnduroPackagePreservationActions initializes viewed result type
// EnduroPackagePreservationActions from result type
// EnduroPackagePreservationActions using the given view.
func NewViewedEnduroPackagePreservationActions(res *EnduroPackagePreservationActions, view string) *package_views.EnduroPackagePreservationActions {
	p := newEnduroPackagePreservationActionsView(res)
	return &package_views.EnduroPackagePreservationActions{Projected: p, View: "default"}
}

// newEnduroMonitorEvent converts projected type EnduroMonitorEvent to service
// type EnduroMonitorEvent.
func newEnduroMonitorEvent(vres *package_views.EnduroMonitorEventView) *EnduroMonitorEvent {
	res := &EnduroMonitorEvent{}
	if vres.PackageCreatedEvent != nil {
		res.PackageCreatedEvent = transformPackageViewsEnduroPackageCreatedEventViewToEnduroPackageCreatedEvent(vres.PackageCreatedEvent)
	}
	if vres.PackageStatusUpdatedEvent != nil {
		res.PackageStatusUpdatedEvent = transformPackageViewsEnduroPackageStatusUpdatedEventViewToEnduroPackageStatusUpdatedEvent(vres.PackageStatusUpdatedEvent)
	}
	if vres.PreservationActionCreatedEvent != nil {
		res.PreservationActionCreatedEvent = transformPackageViewsEnduroPreservationActionCreatedEventViewToEnduroPreservationActionCreatedEvent(vres.PreservationActionCreatedEvent)
	}
	if vres.PreservationTaskCreatedEvent != nil {
		res.PreservationTaskCreatedEvent = transformPackageViewsEnduroPreservationTaskCreatedEventViewToEnduroPreservationTaskCreatedEvent(vres.PreservationTaskCreatedEvent)
	}
	if vres.MonitorPingEvent != nil {
		res.MonitorPingEvent = newEnduroMonitorPingEvent(vres.MonitorPingEvent)
	}
	if vres.PackageUpdatedEvent != nil {
		res.PackageUpdatedEvent = newEnduroPackageUpdatedEvent(vres.PackageUpdatedEvent)
	}
	if vres.PackageLocationUpdatedEvent != nil {
		res.PackageLocationUpdatedEvent = newEnduroPackageLocationUpdatedEvent(vres.PackageLocationUpdatedEvent)
	}
	if vres.PreservationActionUpdatedEvent != nil {
		res.PreservationActionUpdatedEvent = newEnduroPreservationActionUpdatedEvent(vres.PreservationActionUpdatedEvent)
	}
	if vres.PreservationTaskUpdatedEvent != nil {
		res.PreservationTaskUpdatedEvent = newEnduroPreservationTaskUpdatedEvent(vres.PreservationTaskUpdatedEvent)
	}
	return res
}

// newEnduroMonitorEventView projects result type EnduroMonitorEvent to
// projected type EnduroMonitorEventView using the "default" view.
func newEnduroMonitorEventView(res *EnduroMonitorEvent) *package_views.EnduroMonitorEventView {
	vres := &package_views.EnduroMonitorEventView{}
	if res.PackageCreatedEvent != nil {
		vres.PackageCreatedEvent = transformEnduroPackageCreatedEventToPackageViewsEnduroPackageCreatedEventView(res.PackageCreatedEvent)
	}
	if res.PackageStatusUpdatedEvent != nil {
		vres.PackageStatusUpdatedEvent = transformEnduroPackageStatusUpdatedEventToPackageViewsEnduroPackageStatusUpdatedEventView(res.PackageStatusUpdatedEvent)
	}
	if res.PreservationActionCreatedEvent != nil {
		vres.PreservationActionCreatedEvent = transformEnduroPreservationActionCreatedEventToPackageViewsEnduroPreservationActionCreatedEventView(res.PreservationActionCreatedEvent)
	}
	if res.PreservationTaskCreatedEvent != nil {
		vres.PreservationTaskCreatedEvent = transformEnduroPreservationTaskCreatedEventToPackageViewsEnduroPreservationTaskCreatedEventView(res.PreservationTaskCreatedEvent)
	}
	if res.MonitorPingEvent != nil {
		vres.MonitorPingEvent = newEnduroMonitorPingEventView(res.MonitorPingEvent)
	}
	if res.PackageUpdatedEvent != nil {
		vres.PackageUpdatedEvent = newEnduroPackageUpdatedEventView(res.PackageUpdatedEvent)
	}
	if res.PackageLocationUpdatedEvent != nil {
		vres.PackageLocationUpdatedEvent = newEnduroPackageLocationUpdatedEventView(res.PackageLocationUpdatedEvent)
	}
	if res.PreservationActionUpdatedEvent != nil {
		vres.PreservationActionUpdatedEvent = newEnduroPreservationActionUpdatedEventView(res.PreservationActionUpdatedEvent)
	}
	if res.PreservationTaskUpdatedEvent != nil {
		vres.PreservationTaskUpdatedEvent = newEnduroPreservationTaskUpdatedEventView(res.PreservationTaskUpdatedEvent)
	}
	return vres
}

// newEnduroMonitorPingEvent converts projected type EnduroMonitorPingEvent to
// service type EnduroMonitorPingEvent.
func newEnduroMonitorPingEvent(vres *package_views.EnduroMonitorPingEventView) *EnduroMonitorPingEvent {
	res := &EnduroMonitorPingEvent{
		Message: vres.Message,
	}
	return res
}

// newEnduroMonitorPingEventView projects result type EnduroMonitorPingEvent to
// projected type EnduroMonitorPingEventView using the "default" view.
func newEnduroMonitorPingEventView(res *EnduroMonitorPingEvent) *package_views.EnduroMonitorPingEventView {
	vres := &package_views.EnduroMonitorPingEventView{
		Message: res.Message,
	}
	return vres
}

// newEnduroPackageCreatedEvent converts projected type
// EnduroPackageCreatedEvent to service type EnduroPackageCreatedEvent.
func newEnduroPackageCreatedEvent(vres *package_views.EnduroPackageCreatedEventView) *EnduroPackageCreatedEvent {
	res := &EnduroPackageCreatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroStoredPackage(vres.Item)
	}
	return res
}

// newEnduroPackageCreatedEventView projects result type
// EnduroPackageCreatedEvent to projected type EnduroPackageCreatedEventView
// using the "default" view.
func newEnduroPackageCreatedEventView(res *EnduroPackageCreatedEvent) *package_views.EnduroPackageCreatedEventView {
	vres := &package_views.EnduroPackageCreatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroStoredPackageView(res.Item)
	}
	return vres
}

// newEnduroStoredPackage converts projected type EnduroStoredPackage to
// service type EnduroStoredPackage.
func newEnduroStoredPackage(vres *package_views.EnduroStoredPackageView) *EnduroStoredPackage {
	res := &EnduroStoredPackage{
		Name:        vres.Name,
		LocationID:  vres.LocationID,
		WorkflowID:  vres.WorkflowID,
		RunID:       vres.RunID,
		AipID:       vres.AipID,
		StartedAt:   vres.StartedAt,
		CompletedAt: vres.CompletedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Status == nil {
		res.Status = "new"
	}
	return res
}

// newEnduroStoredPackageView projects result type EnduroStoredPackage to
// projected type EnduroStoredPackageView using the "default" view.
func newEnduroStoredPackageView(res *EnduroStoredPackage) *package_views.EnduroStoredPackageView {
	vres := &package_views.EnduroStoredPackageView{
		ID:          &res.ID,
		Name:        res.Name,
		LocationID:  res.LocationID,
		Status:      &res.Status,
		WorkflowID:  res.WorkflowID,
		RunID:       res.RunID,
		AipID:       res.AipID,
		CreatedAt:   &res.CreatedAt,
		StartedAt:   res.StartedAt,
		CompletedAt: res.CompletedAt,
	}
	return vres
}

// newEnduroPackageUpdatedEvent converts projected type
// EnduroPackageUpdatedEvent to service type EnduroPackageUpdatedEvent.
func newEnduroPackageUpdatedEvent(vres *package_views.EnduroPackageUpdatedEventView) *EnduroPackageUpdatedEvent {
	res := &EnduroPackageUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroStoredPackage(vres.Item)
	}
	return res
}

// newEnduroPackageUpdatedEventView projects result type
// EnduroPackageUpdatedEvent to projected type EnduroPackageUpdatedEventView
// using the "default" view.
func newEnduroPackageUpdatedEventView(res *EnduroPackageUpdatedEvent) *package_views.EnduroPackageUpdatedEventView {
	vres := &package_views.EnduroPackageUpdatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroStoredPackageView(res.Item)
	}
	return vres
}

// newEnduroPackageStatusUpdatedEvent converts projected type
// EnduroPackageStatusUpdatedEvent to service type
// EnduroPackageStatusUpdatedEvent.
func newEnduroPackageStatusUpdatedEvent(vres *package_views.EnduroPackageStatusUpdatedEventView) *EnduroPackageStatusUpdatedEvent {
	res := &EnduroPackageStatusUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	return res
}

// newEnduroPackageStatusUpdatedEventView projects result type
// EnduroPackageStatusUpdatedEvent to projected type
// EnduroPackageStatusUpdatedEventView using the "default" view.
func newEnduroPackageStatusUpdatedEventView(res *EnduroPackageStatusUpdatedEvent) *package_views.EnduroPackageStatusUpdatedEventView {
	vres := &package_views.EnduroPackageStatusUpdatedEventView{
		ID:     &res.ID,
		Status: &res.Status,
	}
	return vres
}

// newEnduroPackageLocationUpdatedEvent converts projected type
// EnduroPackageLocationUpdatedEvent to service type
// EnduroPackageLocationUpdatedEvent.
func newEnduroPackageLocationUpdatedEvent(vres *package_views.EnduroPackageLocationUpdatedEventView) *EnduroPackageLocationUpdatedEvent {
	res := &EnduroPackageLocationUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.LocationID != nil {
		res.LocationID = *vres.LocationID
	}
	return res
}

// newEnduroPackageLocationUpdatedEventView projects result type
// EnduroPackageLocationUpdatedEvent to projected type
// EnduroPackageLocationUpdatedEventView using the "default" view.
func newEnduroPackageLocationUpdatedEventView(res *EnduroPackageLocationUpdatedEvent) *package_views.EnduroPackageLocationUpdatedEventView {
	vres := &package_views.EnduroPackageLocationUpdatedEventView{
		ID:         &res.ID,
		LocationID: &res.LocationID,
	}
	return vres
}

// newEnduroPreservationActionCreatedEvent converts projected type
// EnduroPreservationActionCreatedEvent to service type
// EnduroPreservationActionCreatedEvent.
func newEnduroPreservationActionCreatedEvent(vres *package_views.EnduroPreservationActionCreatedEventView) *EnduroPreservationActionCreatedEvent {
	res := &EnduroPreservationActionCreatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroPackagePreservationActionSimple(vres.Item)
	}
	return res
}

// newEnduroPreservationActionCreatedEventView projects result type
// EnduroPreservationActionCreatedEvent to projected type
// EnduroPreservationActionCreatedEventView using the "default" view.
func newEnduroPreservationActionCreatedEventView(res *EnduroPreservationActionCreatedEvent) *package_views.EnduroPreservationActionCreatedEventView {
	vres := &package_views.EnduroPreservationActionCreatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroPackagePreservationActionViewSimple(res.Item)
	}
	return vres
}

// newEnduroPackagePreservationActionSimple converts projected type
// EnduroPackagePreservationAction to service type
// EnduroPackagePreservationAction.
func newEnduroPackagePreservationActionSimple(vres *package_views.EnduroPackagePreservationActionView) *EnduroPackagePreservationAction {
	res := &EnduroPackagePreservationAction{
		CompletedAt: vres.CompletedAt,
		PackageID:   vres.PackageID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.WorkflowID != nil {
		res.WorkflowID = *vres.WorkflowID
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	if vres.Tasks != nil {
		res.Tasks = newEnduroPackagePreservationTaskCollection(vres.Tasks)
	}
	return res
}

// newEnduroPackagePreservationAction converts projected type
// EnduroPackagePreservationAction to service type
// EnduroPackagePreservationAction.
func newEnduroPackagePreservationAction(vres *package_views.EnduroPackagePreservationActionView) *EnduroPackagePreservationAction {
	res := &EnduroPackagePreservationAction{
		CompletedAt: vres.CompletedAt,
		PackageID:   vres.PackageID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.WorkflowID != nil {
		res.WorkflowID = *vres.WorkflowID
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	if vres.Tasks != nil {
		res.Tasks = newEnduroPackagePreservationTaskCollection(vres.Tasks)
	}
	return res
}

// newEnduroPackagePreservationActionViewSimple projects result type
// EnduroPackagePreservationAction to projected type
// EnduroPackagePreservationActionView using the "simple" view.
func newEnduroPackagePreservationActionViewSimple(res *EnduroPackagePreservationAction) *package_views.EnduroPackagePreservationActionView {
	vres := &package_views.EnduroPackagePreservationActionView{
		ID:          &res.ID,
		WorkflowID:  &res.WorkflowID,
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   &res.StartedAt,
		CompletedAt: res.CompletedAt,
		PackageID:   res.PackageID,
	}
	return vres
}

// newEnduroPackagePreservationActionView projects result type
// EnduroPackagePreservationAction to projected type
// EnduroPackagePreservationActionView using the "default" view.
func newEnduroPackagePreservationActionView(res *EnduroPackagePreservationAction) *package_views.EnduroPackagePreservationActionView {
	vres := &package_views.EnduroPackagePreservationActionView{
		ID:          &res.ID,
		WorkflowID:  &res.WorkflowID,
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   &res.StartedAt,
		CompletedAt: res.CompletedAt,
		PackageID:   res.PackageID,
	}
	if res.Tasks != nil {
		vres.Tasks = newEnduroPackagePreservationTaskCollectionView(res.Tasks)
	}
	return vres
}

// newEnduroPackagePreservationTaskCollection converts projected type
// EnduroPackagePreservationTaskCollection to service type
// EnduroPackagePreservationTaskCollection.
func newEnduroPackagePreservationTaskCollection(vres package_views.EnduroPackagePreservationTaskCollectionView) EnduroPackagePreservationTaskCollection {
	res := make(EnduroPackagePreservationTaskCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroPackagePreservationTask(n)
	}
	return res
}

// newEnduroPackagePreservationTaskCollectionView projects result type
// EnduroPackagePreservationTaskCollection to projected type
// EnduroPackagePreservationTaskCollectionView using the "default" view.
func newEnduroPackagePreservationTaskCollectionView(res EnduroPackagePreservationTaskCollection) package_views.EnduroPackagePreservationTaskCollectionView {
	vres := make(package_views.EnduroPackagePreservationTaskCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroPackagePreservationTaskView(n)
	}
	return vres
}

// newEnduroPackagePreservationTask converts projected type
// EnduroPackagePreservationTask to service type EnduroPackagePreservationTask.
func newEnduroPackagePreservationTask(vres *package_views.EnduroPackagePreservationTaskView) *EnduroPackagePreservationTask {
	res := &EnduroPackagePreservationTask{
		CompletedAt:          vres.CompletedAt,
		Note:                 vres.Note,
		PreservationActionID: vres.PreservationActionID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.TaskID != nil {
		res.TaskID = *vres.TaskID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	return res
}

// newEnduroPackagePreservationTaskView projects result type
// EnduroPackagePreservationTask to projected type
// EnduroPackagePreservationTaskView using the "default" view.
func newEnduroPackagePreservationTaskView(res *EnduroPackagePreservationTask) *package_views.EnduroPackagePreservationTaskView {
	vres := &package_views.EnduroPackagePreservationTaskView{
		ID:                   &res.ID,
		TaskID:               &res.TaskID,
		Name:                 &res.Name,
		Status:               &res.Status,
		StartedAt:            &res.StartedAt,
		CompletedAt:          res.CompletedAt,
		Note:                 res.Note,
		PreservationActionID: res.PreservationActionID,
	}
	return vres
}

// newEnduroPreservationActionUpdatedEvent converts projected type
// EnduroPreservationActionUpdatedEvent to service type
// EnduroPreservationActionUpdatedEvent.
func newEnduroPreservationActionUpdatedEvent(vres *package_views.EnduroPreservationActionUpdatedEventView) *EnduroPreservationActionUpdatedEvent {
	res := &EnduroPreservationActionUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroPackagePreservationActionSimple(vres.Item)
	}
	return res
}

// newEnduroPreservationActionUpdatedEventView projects result type
// EnduroPreservationActionUpdatedEvent to projected type
// EnduroPreservationActionUpdatedEventView using the "default" view.
func newEnduroPreservationActionUpdatedEventView(res *EnduroPreservationActionUpdatedEvent) *package_views.EnduroPreservationActionUpdatedEventView {
	vres := &package_views.EnduroPreservationActionUpdatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroPackagePreservationActionViewSimple(res.Item)
	}
	return vres
}

// newEnduroPreservationTaskCreatedEvent converts projected type
// EnduroPreservationTaskCreatedEvent to service type
// EnduroPreservationTaskCreatedEvent.
func newEnduroPreservationTaskCreatedEvent(vres *package_views.EnduroPreservationTaskCreatedEventView) *EnduroPreservationTaskCreatedEvent {
	res := &EnduroPreservationTaskCreatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroPackagePreservationTask(vres.Item)
	}
	return res
}

// newEnduroPreservationTaskCreatedEventView projects result type
// EnduroPreservationTaskCreatedEvent to projected type
// EnduroPreservationTaskCreatedEventView using the "default" view.
func newEnduroPreservationTaskCreatedEventView(res *EnduroPreservationTaskCreatedEvent) *package_views.EnduroPreservationTaskCreatedEventView {
	vres := &package_views.EnduroPreservationTaskCreatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroPackagePreservationTaskView(res.Item)
	}
	return vres
}

// newEnduroPreservationTaskUpdatedEvent converts projected type
// EnduroPreservationTaskUpdatedEvent to service type
// EnduroPreservationTaskUpdatedEvent.
func newEnduroPreservationTaskUpdatedEvent(vres *package_views.EnduroPreservationTaskUpdatedEventView) *EnduroPreservationTaskUpdatedEvent {
	res := &EnduroPreservationTaskUpdatedEvent{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Item != nil {
		res.Item = newEnduroPackagePreservationTask(vres.Item)
	}
	return res
}

// newEnduroPreservationTaskUpdatedEventView projects result type
// EnduroPreservationTaskUpdatedEvent to projected type
// EnduroPreservationTaskUpdatedEventView using the "default" view.
func newEnduroPreservationTaskUpdatedEventView(res *EnduroPreservationTaskUpdatedEvent) *package_views.EnduroPreservationTaskUpdatedEventView {
	vres := &package_views.EnduroPreservationTaskUpdatedEventView{
		ID: &res.ID,
	}
	if res.Item != nil {
		vres.Item = newEnduroPackagePreservationTaskView(res.Item)
	}
	return vres
}

// newEnduroPackagePreservationActions converts projected type
// EnduroPackagePreservationActions to service type
// EnduroPackagePreservationActions.
func newEnduroPackagePreservationActions(vres *package_views.EnduroPackagePreservationActionsView) *EnduroPackagePreservationActions {
	res := &EnduroPackagePreservationActions{}
	if vres.Actions != nil {
		res.Actions = newEnduroPackagePreservationActionCollection(vres.Actions)
	}
	return res
}

// newEnduroPackagePreservationActionsView projects result type
// EnduroPackagePreservationActions to projected type
// EnduroPackagePreservationActionsView using the "default" view.
func newEnduroPackagePreservationActionsView(res *EnduroPackagePreservationActions) *package_views.EnduroPackagePreservationActionsView {
	vres := &package_views.EnduroPackagePreservationActionsView{}
	if res.Actions != nil {
		vres.Actions = newEnduroPackagePreservationActionCollectionView(res.Actions)
	}
	return vres
}

// newEnduroPackagePreservationActionCollectionSimple converts projected type
// EnduroPackagePreservationActionCollection to service type
// EnduroPackagePreservationActionCollection.
func newEnduroPackagePreservationActionCollectionSimple(vres package_views.EnduroPackagePreservationActionCollectionView) EnduroPackagePreservationActionCollection {
	res := make(EnduroPackagePreservationActionCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroPackagePreservationActionSimple(n)
	}
	return res
}

// newEnduroPackagePreservationActionCollection converts projected type
// EnduroPackagePreservationActionCollection to service type
// EnduroPackagePreservationActionCollection.
func newEnduroPackagePreservationActionCollection(vres package_views.EnduroPackagePreservationActionCollectionView) EnduroPackagePreservationActionCollection {
	res := make(EnduroPackagePreservationActionCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroPackagePreservationAction(n)
	}
	return res
}

// newEnduroPackagePreservationActionCollectionViewSimple projects result type
// EnduroPackagePreservationActionCollection to projected type
// EnduroPackagePreservationActionCollectionView using the "simple" view.
func newEnduroPackagePreservationActionCollectionViewSimple(res EnduroPackagePreservationActionCollection) package_views.EnduroPackagePreservationActionCollectionView {
	vres := make(package_views.EnduroPackagePreservationActionCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroPackagePreservationActionViewSimple(n)
	}
	return vres
}

// newEnduroPackagePreservationActionCollectionView projects result type
// EnduroPackagePreservationActionCollection to projected type
// EnduroPackagePreservationActionCollectionView using the "default" view.
func newEnduroPackagePreservationActionCollectionView(res EnduroPackagePreservationActionCollection) package_views.EnduroPackagePreservationActionCollectionView {
	vres := make(package_views.EnduroPackagePreservationActionCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroPackagePreservationActionView(n)
	}
	return vres
}

// transformPackageViewsEnduroPackageCreatedEventViewToEnduroPackageCreatedEvent
// builds a value of type *EnduroPackageCreatedEvent from a value of type
// *package_views.EnduroPackageCreatedEventView.
func transformPackageViewsEnduroPackageCreatedEventViewToEnduroPackageCreatedEvent(v *package_views.EnduroPackageCreatedEventView) *EnduroPackageCreatedEvent {
	if v == nil {
		return nil
	}
	res := &EnduroPackageCreatedEvent{
		ID: *v.ID,
	}
	if v.Item != nil {
		res.Item = transformPackageViewsEnduroStoredPackageViewToEnduroStoredPackage(v.Item)
	}

	return res
}

// transformPackageViewsEnduroStoredPackageViewToEnduroStoredPackage builds a
// value of type *EnduroStoredPackage from a value of type
// *package_views.EnduroStoredPackageView.
func transformPackageViewsEnduroStoredPackageViewToEnduroStoredPackage(v *package_views.EnduroStoredPackageView) *EnduroStoredPackage {
	res := &EnduroStoredPackage{
		ID:          *v.ID,
		Name:        v.Name,
		LocationID:  v.LocationID,
		Status:      *v.Status,
		WorkflowID:  v.WorkflowID,
		RunID:       v.RunID,
		AipID:       v.AipID,
		CreatedAt:   *v.CreatedAt,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
	}

	return res
}

// transformPackageViewsEnduroPackageStatusUpdatedEventViewToEnduroPackageStatusUpdatedEvent
// builds a value of type *EnduroPackageStatusUpdatedEvent from a value of type
// *package_views.EnduroPackageStatusUpdatedEventView.
func transformPackageViewsEnduroPackageStatusUpdatedEventViewToEnduroPackageStatusUpdatedEvent(v *package_views.EnduroPackageStatusUpdatedEventView) *EnduroPackageStatusUpdatedEvent {
	if v == nil {
		return nil
	}
	res := &EnduroPackageStatusUpdatedEvent{
		ID:     *v.ID,
		Status: *v.Status,
	}

	return res
}

// transformPackageViewsEnduroPreservationActionCreatedEventViewToEnduroPreservationActionCreatedEvent
// builds a value of type *EnduroPreservationActionCreatedEvent from a value of
// type *package_views.EnduroPreservationActionCreatedEventView.
func transformPackageViewsEnduroPreservationActionCreatedEventViewToEnduroPreservationActionCreatedEvent(v *package_views.EnduroPreservationActionCreatedEventView) *EnduroPreservationActionCreatedEvent {
	if v == nil {
		return nil
	}
	res := &EnduroPreservationActionCreatedEvent{
		ID: *v.ID,
	}
	if v.Item != nil {
		res.Item = transformPackageViewsEnduroPackagePreservationActionViewToEnduroPackagePreservationAction(v.Item)
	}

	return res
}

// transformPackageViewsEnduroPackagePreservationActionViewToEnduroPackagePreservationAction
// builds a value of type *EnduroPackagePreservationAction from a value of type
// *package_views.EnduroPackagePreservationActionView.
func transformPackageViewsEnduroPackagePreservationActionViewToEnduroPackagePreservationAction(v *package_views.EnduroPackagePreservationActionView) *EnduroPackagePreservationAction {
	res := &EnduroPackagePreservationAction{
		ID:          *v.ID,
		WorkflowID:  *v.WorkflowID,
		Type:        *v.Type,
		Status:      *v.Status,
		StartedAt:   *v.StartedAt,
		CompletedAt: v.CompletedAt,
		PackageID:   v.PackageID,
	}
	if v.Tasks != nil {
		res.Tasks = make([]*EnduroPackagePreservationTask, len(v.Tasks))
		for i, val := range v.Tasks {
			res.Tasks[i] = transformPackageViewsEnduroPackagePreservationTaskViewToEnduroPackagePreservationTask(val)
		}
	}

	return res
}

// transformPackageViewsEnduroPackagePreservationTaskViewToEnduroPackagePreservationTask
// builds a value of type *EnduroPackagePreservationTask from a value of type
// *package_views.EnduroPackagePreservationTaskView.
func transformPackageViewsEnduroPackagePreservationTaskViewToEnduroPackagePreservationTask(v *package_views.EnduroPackagePreservationTaskView) *EnduroPackagePreservationTask {
	if v == nil {
		return nil
	}
	res := &EnduroPackagePreservationTask{
		ID:                   *v.ID,
		TaskID:               *v.TaskID,
		Name:                 *v.Name,
		Status:               *v.Status,
		StartedAt:            *v.StartedAt,
		CompletedAt:          v.CompletedAt,
		Note:                 v.Note,
		PreservationActionID: v.PreservationActionID,
	}

	return res
}

// transformPackageViewsEnduroPreservationTaskCreatedEventViewToEnduroPreservationTaskCreatedEvent
// builds a value of type *EnduroPreservationTaskCreatedEvent from a value of
// type *package_views.EnduroPreservationTaskCreatedEventView.
func transformPackageViewsEnduroPreservationTaskCreatedEventViewToEnduroPreservationTaskCreatedEvent(v *package_views.EnduroPreservationTaskCreatedEventView) *EnduroPreservationTaskCreatedEvent {
	if v == nil {
		return nil
	}
	res := &EnduroPreservationTaskCreatedEvent{
		ID: *v.ID,
	}
	if v.Item != nil {
		res.Item = transformPackageViewsEnduroPackagePreservationTaskViewToEnduroPackagePreservationTask(v.Item)
	}

	return res
}

// transformEnduroPackageCreatedEventToPackageViewsEnduroPackageCreatedEventView
// builds a value of type *package_views.EnduroPackageCreatedEventView from a
// value of type *EnduroPackageCreatedEvent.
func transformEnduroPackageCreatedEventToPackageViewsEnduroPackageCreatedEventView(v *EnduroPackageCreatedEvent) *package_views.EnduroPackageCreatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageCreatedEventView{
		ID: &v.ID,
	}
	if v.Item != nil {
		res.Item = transformEnduroStoredPackageToPackageViewsEnduroStoredPackageView(v.Item)
	}

	return res
}

// transformEnduroStoredPackageToPackageViewsEnduroStoredPackageView builds a
// value of type *package_views.EnduroStoredPackageView from a value of type
// *EnduroStoredPackage.
func transformEnduroStoredPackageToPackageViewsEnduroStoredPackageView(v *EnduroStoredPackage) *package_views.EnduroStoredPackageView {
	res := &package_views.EnduroStoredPackageView{
		ID:          &v.ID,
		Name:        v.Name,
		LocationID:  v.LocationID,
		Status:      &v.Status,
		WorkflowID:  v.WorkflowID,
		RunID:       v.RunID,
		AipID:       v.AipID,
		CreatedAt:   &v.CreatedAt,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
	}

	return res
}

// transformEnduroPackageStatusUpdatedEventToPackageViewsEnduroPackageStatusUpdatedEventView
// builds a value of type *package_views.EnduroPackageStatusUpdatedEventView
// from a value of type *EnduroPackageStatusUpdatedEvent.
func transformEnduroPackageStatusUpdatedEventToPackageViewsEnduroPackageStatusUpdatedEventView(v *EnduroPackageStatusUpdatedEvent) *package_views.EnduroPackageStatusUpdatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageStatusUpdatedEventView{
		ID:     &v.ID,
		Status: &v.Status,
	}

	return res
}

// transformEnduroPreservationActionCreatedEventToPackageViewsEnduroPreservationActionCreatedEventView
// builds a value of type
// *package_views.EnduroPreservationActionCreatedEventView from a value of type
// *EnduroPreservationActionCreatedEvent.
func transformEnduroPreservationActionCreatedEventToPackageViewsEnduroPreservationActionCreatedEventView(v *EnduroPreservationActionCreatedEvent) *package_views.EnduroPreservationActionCreatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPreservationActionCreatedEventView{
		ID: &v.ID,
	}
	if v.Item != nil {
		res.Item = transformEnduroPackagePreservationActionToPackageViewsEnduroPackagePreservationActionView(v.Item)
	}

	return res
}

// transformEnduroPackagePreservationActionToPackageViewsEnduroPackagePreservationActionView
// builds a value of type *package_views.EnduroPackagePreservationActionView
// from a value of type *EnduroPackagePreservationAction.
func transformEnduroPackagePreservationActionToPackageViewsEnduroPackagePreservationActionView(v *EnduroPackagePreservationAction) *package_views.EnduroPackagePreservationActionView {
	res := &package_views.EnduroPackagePreservationActionView{
		ID:          &v.ID,
		WorkflowID:  &v.WorkflowID,
		Type:        &v.Type,
		Status:      &v.Status,
		StartedAt:   &v.StartedAt,
		CompletedAt: v.CompletedAt,
		PackageID:   v.PackageID,
	}
	if v.Tasks != nil {
		res.Tasks = make([]*package_views.EnduroPackagePreservationTaskView, len(v.Tasks))
		for i, val := range v.Tasks {
			res.Tasks[i] = transformEnduroPackagePreservationTaskToPackageViewsEnduroPackagePreservationTaskView(val)
		}
	}

	return res
}

// transformEnduroPackagePreservationTaskToPackageViewsEnduroPackagePreservationTaskView
// builds a value of type *package_views.EnduroPackagePreservationTaskView from
// a value of type *EnduroPackagePreservationTask.
func transformEnduroPackagePreservationTaskToPackageViewsEnduroPackagePreservationTaskView(v *EnduroPackagePreservationTask) *package_views.EnduroPackagePreservationTaskView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackagePreservationTaskView{
		ID:                   &v.ID,
		TaskID:               &v.TaskID,
		Name:                 &v.Name,
		Status:               &v.Status,
		StartedAt:            &v.StartedAt,
		CompletedAt:          v.CompletedAt,
		Note:                 v.Note,
		PreservationActionID: v.PreservationActionID,
	}

	return res
}

// transformEnduroPreservationTaskCreatedEventToPackageViewsEnduroPreservationTaskCreatedEventView
// builds a value of type *package_views.EnduroPreservationTaskCreatedEventView
// from a value of type *EnduroPreservationTaskCreatedEvent.
func transformEnduroPreservationTaskCreatedEventToPackageViewsEnduroPreservationTaskCreatedEventView(v *EnduroPreservationTaskCreatedEvent) *package_views.EnduroPreservationTaskCreatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPreservationTaskCreatedEventView{
		ID: &v.ID,
	}
	if v.Item != nil {
		res.Item = transformEnduroPackagePreservationTaskToPackageViewsEnduroPackagePreservationTaskView(v.Item)
	}

	return res
}
