// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest views
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package views

import (
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// SIPs is the viewed result type that is projected based on a view.
type SIPs struct {
	// Type to project
	Projected *SIPsView
	// View to render
	View string
}

// SIP is the viewed result type that is projected based on a view.
type SIP struct {
	// Type to project
	Projected *SIPView
	// View to render
	View string
}

// SIPPreservationActions is the viewed result type that is projected based on
// a view.
type SIPPreservationActions struct {
	// Type to project
	Projected *SIPPreservationActionsView
	// View to render
	View string
}

// SIPsView is a type that runs validations on a projected type.
type SIPsView struct {
	Items SIPCollectionView
	Page  *EnduroPageView
}

// SIPCollectionView is a type that runs validations on a projected type.
type SIPCollectionView []*SIPView

// SIPView is a type that runs validations on a projected type.
type SIPView struct {
	// Identifier of SIP
	ID *uint
	// Name of the SIP
	Name *string
	// Identifier of storage location
	LocationID *uuid.UUID
	// Status of the SIP
	Status *string
	// Identifier of processing workflow
	WorkflowID *string
	// Identifier of latest processing workflow run
	RunID *string
	// Identifier of AIP
	AipID *string
	// Creation datetime
	CreatedAt *string
	// Start datetime
	StartedAt *string
	// Completion datetime
	CompletedAt *string
}

// EnduroPageView is a type that runs validations on a projected type.
type EnduroPageView struct {
	// Maximum items per page
	Limit *int
	// Offset from first result to start of page
	Offset *int
	// Total result count before paging
	Total *int
}

// SIPPreservationActionsView is a type that runs validations on a projected
// type.
type SIPPreservationActionsView struct {
	Actions SIPPreservationActionCollectionView
}

// SIPPreservationActionCollectionView is a type that runs validations on a
// projected type.
type SIPPreservationActionCollectionView []*SIPPreservationActionView

// SIPPreservationActionView is a type that runs validations on a projected
// type.
type SIPPreservationActionView struct {
	ID          *uint
	WorkflowID  *string
	Type        *string
	Status      *string
	StartedAt   *string
	CompletedAt *string
	Tasks       SIPPreservationTaskCollectionView
	SipID       *uint
}

// SIPPreservationTaskCollectionView is a type that runs validations on a
// projected type.
type SIPPreservationTaskCollectionView []*SIPPreservationTaskView

// SIPPreservationTaskView is a type that runs validations on a projected type.
type SIPPreservationTaskView struct {
	ID                   *uint
	TaskID               *string
	Name                 *string
	Status               *string
	StartedAt            *string
	CompletedAt          *string
	Note                 *string
	PreservationActionID *uint
}

var (
	// SIPsMap is a map indexing the attribute names of SIPs by view name.
	SIPsMap = map[string][]string{
		"default": {
			"items",
			"page",
		},
	}
	// SIPMap is a map indexing the attribute names of SIP by view name.
	SIPMap = map[string][]string{
		"default": {
			"id",
			"name",
			"location_id",
			"status",
			"workflow_id",
			"run_id",
			"aip_id",
			"created_at",
			"started_at",
			"completed_at",
		},
	}
	// SIPPreservationActionsMap is a map indexing the attribute names of
	// SIPPreservationActions by view name.
	SIPPreservationActionsMap = map[string][]string{
		"default": {
			"actions",
		},
	}
	// SIPCollectionMap is a map indexing the attribute names of SIPCollection by
	// view name.
	SIPCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
			"location_id",
			"status",
			"workflow_id",
			"run_id",
			"aip_id",
			"created_at",
			"started_at",
			"completed_at",
		},
	}
	// EnduroPageMap is a map indexing the attribute names of EnduroPage by view
	// name.
	EnduroPageMap = map[string][]string{
		"default": {
			"limit",
			"offset",
			"total",
		},
	}
	// SIPPreservationActionCollectionMap is a map indexing the attribute names of
	// SIPPreservationActionCollection by view name.
	SIPPreservationActionCollectionMap = map[string][]string{
		"simple": {
			"id",
			"workflow_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"sip_id",
		},
		"default": {
			"id",
			"workflow_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"tasks",
			"sip_id",
		},
	}
	// SIPPreservationActionMap is a map indexing the attribute names of
	// SIPPreservationAction by view name.
	SIPPreservationActionMap = map[string][]string{
		"simple": {
			"id",
			"workflow_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"sip_id",
		},
		"default": {
			"id",
			"workflow_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"tasks",
			"sip_id",
		},
	}
	// SIPPreservationTaskCollectionMap is a map indexing the attribute names of
	// SIPPreservationTaskCollection by view name.
	SIPPreservationTaskCollectionMap = map[string][]string{
		"default": {
			"id",
			"task_id",
			"name",
			"status",
			"started_at",
			"completed_at",
			"note",
			"preservation_action_id",
		},
	}
	// SIPPreservationTaskMap is a map indexing the attribute names of
	// SIPPreservationTask by view name.
	SIPPreservationTaskMap = map[string][]string{
		"default": {
			"id",
			"task_id",
			"name",
			"status",
			"started_at",
			"completed_at",
			"note",
			"preservation_action_id",
		},
	}
)

// ValidateSIPs runs the validations defined on the viewed result type SIPs.
func ValidateSIPs(result *SIPs) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSIPsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSIP runs the validations defined on the viewed result type SIP.
func ValidateSIP(result *SIP) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSIPView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSIPPreservationActions runs the validations defined on the viewed
// result type SIPPreservationActions.
func ValidateSIPPreservationActions(result *SIPPreservationActions) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSIPPreservationActionsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSIPsView runs the validations defined on SIPsView using the
// "default" view.
func ValidateSIPsView(result *SIPsView) (err error) {

	if result.Items != nil {
		if err2 := ValidateSIPCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Page != nil {
		if err2 := ValidateEnduroPageView(result.Page); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPCollectionView runs the validations defined on SIPCollectionView
// using the "default" view.
func ValidateSIPCollectionView(result SIPCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPView runs the validations defined on SIPView using the "default"
// view.
func ValidateSIPView(result *SIPView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "new" || *result.Status == "in progress" || *result.Status == "done" || *result.Status == "error" || *result.Status == "unknown" || *result.Status == "queued" || *result.Status == "abandoned" || *result.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"new", "in progress", "done", "error", "unknown", "queued", "abandoned", "pending"}))
		}
	}
	if result.WorkflowID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.workflow_id", *result.WorkflowID, goa.FormatUUID))
	}
	if result.RunID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.run_id", *result.RunID, goa.FormatUUID))
	}
	if result.AipID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.aip_id", *result.AipID, goa.FormatUUID))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnduroPageView runs the validations defined on EnduroPageView using
// the "default" view.
func ValidateEnduroPageView(result *EnduroPageView) (err error) {
	if result.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "result"))
	}
	if result.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "result"))
	}
	if result.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "result"))
	}
	return
}

// ValidateSIPPreservationActionsView runs the validations defined on
// SIPPreservationActionsView using the "default" view.
func ValidateSIPPreservationActionsView(result *SIPPreservationActionsView) (err error) {

	if result.Actions != nil {
		if err2 := ValidateSIPPreservationActionCollectionView(result.Actions); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPPreservationActionCollectionViewSimple runs the validations
// defined on SIPPreservationActionCollectionView using the "simple" view.
func ValidateSIPPreservationActionCollectionViewSimple(result SIPPreservationActionCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPPreservationActionViewSimple(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPPreservationActionCollectionView runs the validations defined on
// SIPPreservationActionCollectionView using the "default" view.
func ValidateSIPPreservationActionCollectionView(result SIPPreservationActionCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPPreservationActionView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPPreservationActionViewSimple runs the validations defined on
// SIPPreservationActionView using the "simple" view.
func ValidateSIPPreservationActionViewSimple(result *SIPPreservationActionView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.WorkflowID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_id", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "unspecified" || *result.Type == "create aip" || *result.Type == "create and review aip" || *result.Type == "move package") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []any{"unspecified", "create aip", "create and review aip", "move package"}))
		}
	}
	if result.Status != nil {
		if !(*result.Status == "unspecified" || *result.Status == "in progress" || *result.Status == "done" || *result.Status == "error" || *result.Status == "queued" || *result.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateSIPPreservationActionView runs the validations defined on
// SIPPreservationActionView using the "default" view.
func ValidateSIPPreservationActionView(result *SIPPreservationActionView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.WorkflowID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_id", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "unspecified" || *result.Type == "create aip" || *result.Type == "create and review aip" || *result.Type == "move package") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []any{"unspecified", "create aip", "create and review aip", "move package"}))
		}
	}
	if result.Status != nil {
		if !(*result.Status == "unspecified" || *result.Status == "in progress" || *result.Status == "done" || *result.Status == "error" || *result.Status == "queued" || *result.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	if result.Tasks != nil {
		if err2 := ValidateSIPPreservationTaskCollectionView(result.Tasks); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPPreservationTaskCollectionView runs the validations defined on
// SIPPreservationTaskCollectionView using the "default" view.
func ValidateSIPPreservationTaskCollectionView(result SIPPreservationTaskCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPPreservationTaskView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPPreservationTaskView runs the validations defined on
// SIPPreservationTaskView using the "default" view.
func ValidateSIPPreservationTaskView(result *SIPPreservationTaskView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "unspecified" || *result.Status == "in progress" || *result.Status == "done" || *result.Status == "error" || *result.Status == "queued" || *result.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	return
}
