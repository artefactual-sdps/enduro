// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest views
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package views

import (
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// SIPs is the viewed result type that is projected based on a view.
type SIPs struct {
	// Type to project
	Projected *SIPsView
	// View to render
	View string
}

// SIP is the viewed result type that is projected based on a view.
type SIP struct {
	// Type to project
	Projected *SIPView
	// View to render
	View string
}

// SIPWorkflows is the viewed result type that is projected based on a view.
type SIPWorkflows struct {
	// Type to project
	Projected *SIPWorkflowsView
	// View to render
	View string
}

// Users is the viewed result type that is projected based on a view.
type Users struct {
	// Type to project
	Projected *UsersView
	// View to render
	View string
}

// SIPsView is a type that runs validations on a projected type.
type SIPsView struct {
	Items SIPCollectionView
	Page  *EnduroPageView
}

// SIPCollectionView is a type that runs validations on a projected type.
type SIPCollectionView []*SIPView

// SIPView is a type that runs validations on a projected type.
type SIPView struct {
	// Identifier of SIP
	UUID *uuid.UUID
	// Name of the SIP
	Name *string
	// Status of the SIP
	Status *string
	// Identifier of AIP
	AipID *string
	// Creation datetime
	CreatedAt *string
	// Start datetime
	StartedAt *string
	// Completion datetime
	CompletedAt *string
	// Package type in case of failure (SIP or PIP)
	FailedAs *string
	// Object key of the failed package in the internal bucket
	FailedKey *string
	// UUID of the user who uploaded the SIP
	UploaderUUID *uuid.UUID
	// Email of the user who uploaded the SIP
	UploaderEmail *string
	// Name of the user who uploaded the SIP
	UploaderName *string
}

// EnduroPageView is a type that runs validations on a projected type.
type EnduroPageView struct {
	// Maximum items per page
	Limit *int
	// Offset from first result to start of page
	Offset *int
	// Total result count before paging
	Total *int
}

// SIPWorkflowsView is a type that runs validations on a projected type.
type SIPWorkflowsView struct {
	Workflows SIPWorkflowCollectionView
}

// SIPWorkflowCollectionView is a type that runs validations on a projected
// type.
type SIPWorkflowCollectionView []*SIPWorkflowView

// SIPWorkflowView is a type that runs validations on a projected type.
type SIPWorkflowView struct {
	ID          *uint
	TemporalID  *string
	Type        *string
	Status      *string
	StartedAt   *string
	CompletedAt *string
	Tasks       SIPTaskCollectionView
	// Identifier of related SIP
	SipUUID *uuid.UUID
}

// SIPTaskCollectionView is a type that runs validations on a projected type.
type SIPTaskCollectionView []*SIPTaskView

// SIPTaskView is a type that runs validations on a projected type.
type SIPTaskView struct {
	ID          *uint
	TaskID      *string
	Name        *string
	Status      *string
	StartedAt   *string
	CompletedAt *string
	Note        *string
	WorkflowID  *uint
}

// UsersView is a type that runs validations on a projected type.
type UsersView struct {
	Items UserCollectionView
	Page  *EnduroPageView
}

// UserCollectionView is a type that runs validations on a projected type.
type UserCollectionView []*UserView

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// Identifier of the user
	UUID *uuid.UUID
	// Email of the user
	Email *string
	// Name of the user
	Name *string
	// Creation date & time of the user
	CreatedAt *string
}

var (
	// SIPsMap is a map indexing the attribute names of SIPs by view name.
	SIPsMap = map[string][]string{
		"default": {
			"items",
			"page",
		},
	}
	// SIPMap is a map indexing the attribute names of SIP by view name.
	SIPMap = map[string][]string{
		"default": {
			"uuid",
			"name",
			"status",
			"aip_id",
			"created_at",
			"started_at",
			"completed_at",
			"failed_as",
			"failed_key",
			"uploader_uuid",
			"uploader_email",
			"uploader_name",
		},
	}
	// SIPWorkflowsMap is a map indexing the attribute names of SIPWorkflows by
	// view name.
	SIPWorkflowsMap = map[string][]string{
		"default": {
			"workflows",
		},
	}
	// UsersMap is a map indexing the attribute names of Users by view name.
	UsersMap = map[string][]string{
		"default": {
			"items",
			"page",
		},
	}
	// SIPCollectionMap is a map indexing the attribute names of SIPCollection by
	// view name.
	SIPCollectionMap = map[string][]string{
		"default": {
			"uuid",
			"name",
			"status",
			"aip_id",
			"created_at",
			"started_at",
			"completed_at",
			"failed_as",
			"failed_key",
			"uploader_uuid",
			"uploader_email",
			"uploader_name",
		},
	}
	// EnduroPageMap is a map indexing the attribute names of EnduroPage by view
	// name.
	EnduroPageMap = map[string][]string{
		"default": {
			"limit",
			"offset",
			"total",
		},
	}
	// SIPWorkflowCollectionMap is a map indexing the attribute names of
	// SIPWorkflowCollection by view name.
	SIPWorkflowCollectionMap = map[string][]string{
		"simple": {
			"id",
			"temporal_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"sip_uuid",
		},
		"default": {
			"id",
			"temporal_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"tasks",
			"sip_uuid",
		},
	}
	// SIPWorkflowMap is a map indexing the attribute names of SIPWorkflow by view
	// name.
	SIPWorkflowMap = map[string][]string{
		"simple": {
			"id",
			"temporal_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"sip_uuid",
		},
		"default": {
			"id",
			"temporal_id",
			"type",
			"status",
			"started_at",
			"completed_at",
			"tasks",
			"sip_uuid",
		},
	}
	// SIPTaskCollectionMap is a map indexing the attribute names of
	// SIPTaskCollection by view name.
	SIPTaskCollectionMap = map[string][]string{
		"default": {
			"id",
			"task_id",
			"name",
			"status",
			"started_at",
			"completed_at",
			"note",
			"workflow_id",
		},
	}
	// SIPTaskMap is a map indexing the attribute names of SIPTask by view name.
	SIPTaskMap = map[string][]string{
		"default": {
			"id",
			"task_id",
			"name",
			"status",
			"started_at",
			"completed_at",
			"note",
			"workflow_id",
		},
	}
	// UserCollectionMap is a map indexing the attribute names of UserCollection by
	// view name.
	UserCollectionMap = map[string][]string{
		"default": {
			"uuid",
			"email",
			"name",
			"created_at",
		},
	}
	// UserMap is a map indexing the attribute names of User by view name.
	UserMap = map[string][]string{
		"default": {
			"uuid",
			"email",
			"name",
			"created_at",
		},
	}
)

// ValidateSIPs runs the validations defined on the viewed result type SIPs.
func ValidateSIPs(result *SIPs) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSIPsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSIP runs the validations defined on the viewed result type SIP.
func ValidateSIP(result *SIP) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSIPView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSIPWorkflows runs the validations defined on the viewed result type
// SIPWorkflows.
func ValidateSIPWorkflows(result *SIPWorkflows) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSIPWorkflowsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateUsers runs the validations defined on the viewed result type Users.
func ValidateUsers(result *Users) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUsersView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSIPsView runs the validations defined on SIPsView using the
// "default" view.
func ValidateSIPsView(result *SIPsView) (err error) {

	if result.Items != nil {
		if err2 := ValidateSIPCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Page != nil {
		if err2 := ValidateEnduroPageView(result.Page); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPCollectionView runs the validations defined on SIPCollectionView
// using the "default" view.
func ValidateSIPCollectionView(result SIPCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPView runs the validations defined on SIPView using the "default"
// view.
func ValidateSIPView(result *SIPView) (err error) {
	if result.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "error" || *result.Status == "failed" || *result.Status == "queued" || *result.Status == "processing" || *result.Status == "pending" || *result.Status == "ingested") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"error", "failed", "queued", "processing", "pending", "ingested"}))
		}
	}
	if result.AipID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.aip_id", *result.AipID, goa.FormatUUID))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	if result.FailedAs != nil {
		if !(*result.FailedAs == "SIP" || *result.FailedAs == "PIP") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.failed_as", *result.FailedAs, []any{"SIP", "PIP"}))
		}
	}
	return
}

// ValidateEnduroPageView runs the validations defined on EnduroPageView using
// the "default" view.
func ValidateEnduroPageView(result *EnduroPageView) (err error) {
	if result.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "result"))
	}
	if result.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "result"))
	}
	if result.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "result"))
	}
	return
}

// ValidateSIPWorkflowsView runs the validations defined on SIPWorkflowsView
// using the "default" view.
func ValidateSIPWorkflowsView(result *SIPWorkflowsView) (err error) {

	if result.Workflows != nil {
		if err2 := ValidateSIPWorkflowCollectionView(result.Workflows); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPWorkflowCollectionViewSimple runs the validations defined on
// SIPWorkflowCollectionView using the "simple" view.
func ValidateSIPWorkflowCollectionViewSimple(result SIPWorkflowCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPWorkflowViewSimple(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPWorkflowCollectionView runs the validations defined on
// SIPWorkflowCollectionView using the "default" view.
func ValidateSIPWorkflowCollectionView(result SIPWorkflowCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPWorkflowView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPWorkflowViewSimple runs the validations defined on
// SIPWorkflowView using the "simple" view.
func ValidateSIPWorkflowViewSimple(result *SIPWorkflowView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.TemporalID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporal_id", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "result"))
	}
	if result.SipUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sip_uuid", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "create aip" || *result.Type == "create and review aip") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []any{"create aip", "create and review aip"}))
		}
	}
	if result.Status != nil {
		if !(*result.Status == "unspecified" || *result.Status == "in progress" || *result.Status == "done" || *result.Status == "error" || *result.Status == "queued" || *result.Status == "pending" || *result.Status == "failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending", "failed"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateSIPWorkflowView runs the validations defined on SIPWorkflowView
// using the "default" view.
func ValidateSIPWorkflowView(result *SIPWorkflowView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.TemporalID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporal_id", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "result"))
	}
	if result.SipUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sip_uuid", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "create aip" || *result.Type == "create and review aip") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []any{"create aip", "create and review aip"}))
		}
	}
	if result.Status != nil {
		if !(*result.Status == "unspecified" || *result.Status == "in progress" || *result.Status == "done" || *result.Status == "error" || *result.Status == "queued" || *result.Status == "pending" || *result.Status == "failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending", "failed"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	if result.Tasks != nil {
		if err2 := ValidateSIPTaskCollectionView(result.Tasks); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPTaskCollectionView runs the validations defined on
// SIPTaskCollectionView using the "default" view.
func ValidateSIPTaskCollectionView(result SIPTaskCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSIPTaskView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPTaskView runs the validations defined on SIPTaskView using the
// "default" view.
func ValidateSIPTaskView(result *SIPTaskView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "unspecified" || *result.Status == "in progress" || *result.Status == "done" || *result.Status == "error" || *result.Status == "queued" || *result.Status == "pending" || *result.Status == "failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending", "failed"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.completed_at", *result.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUsersView runs the validations defined on UsersView using the
// "default" view.
func ValidateUsersView(result *UsersView) (err error) {

	if result.Items != nil {
		if err2 := ValidateUserCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Page != nil {
		if err2 := ValidateEnduroPageView(result.Page); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserCollectionView runs the validations defined on
// UserCollectionView using the "default" view.
func ValidateUserCollectionView(result UserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {
	if result.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	return
}
