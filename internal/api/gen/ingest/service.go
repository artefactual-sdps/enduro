// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest service
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package ingest

import (
	"context"
	"io"

	ingestviews "github.com/artefactual-sdps/enduro/internal/api/gen/ingest/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The ingest service manages ingested SIPs.
type Service interface {
	// Request access to the /monitor WebSocket
	MonitorRequest(context.Context, *MonitorRequestPayload) (res *MonitorRequestResult, err error)
	// Obtain access to the /monitor WebSocket
	Monitor(context.Context, *MonitorPayload, MonitorServerStream) (err error)
	// List all ingested SIPs
	ListSips(context.Context, *ListSipsPayload) (res *SIPs, err error)
	// Show SIP by ID
	ShowSip(context.Context, *ShowSipPayload) (res *SIP, err error)
	// List all workflows for a SIP
	ListSipWorkflows(context.Context, *ListSipWorkflowsPayload) (res *SIPWorkflows, err error)
	// Signal the SIP has been reviewed and accepted
	ConfirmSip(context.Context, *ConfirmSipPayload) (err error)
	// Signal the SIP has been reviewed and rejected
	RejectSip(context.Context, *RejectSipPayload) (err error)
	// Upload a SIP to trigger an ingest workflow
	UploadSip(context.Context, *UploadSipPayload, io.ReadCloser) (res *UploadSipResult, err error)
	// Request access to SIP download
	DownloadSipRequest(context.Context, *DownloadSipRequestPayload) (res *DownloadSipRequestResult, err error)
	// Download the failed package related to a SIP. It will be the original SIP or
	// the transformed PIP, based on the SIP's `failed_as` value.
	DownloadSip(context.Context, *DownloadSipPayload) (res *DownloadSipResult, body io.ReadCloser, err error)
	// List all users
	ListUsers(context.Context, *ListUsersPayload) (res *Users, err error)
	// List the objects in a SIP source
	ListSipSourceObjects(context.Context, *ListSipSourceObjectsPayload) (res *SIPSourceObjects, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "enduro"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "ingest"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [12]string{"monitor_request", "monitor", "list_sips", "show_sip", "list_sip_workflows", "confirm_sip", "reject_sip", "upload_sip", "download_sip_request", "download_sip", "list_users", "list_sip_source_objects"}

// MonitorServerStream is the interface a "monitor" endpoint server stream must
// satisfy.
type MonitorServerStream interface {
	// Send streams instances of "IngestEvent".
	Send(*IngestEvent) error
	// Close closes the stream.
	Close() error
}

// MonitorClientStream is the interface a "monitor" endpoint client stream must
// satisfy.
type MonitorClientStream interface {
	// Recv reads instances of "IngestEvent" from the stream.
	Recv() (*IngestEvent, error)
}

// An AIP describes an AIP retrieved by the storage service.
type AIP struct {
	Name string
	UUID uuid.UUID
	// Status of the AIP
	Status    string
	ObjectKey uuid.UUID
	// Identifier of storage location
	LocationUUID *uuid.UUID
	// Creation datetime
	CreatedAt string
}

type AIPCreatedEvent struct {
	// Identifier of AIP
	UUID uuid.UUID
	Item *AIP
}

type AIPLocationUpdatedEvent struct {
	// Identifier of AIP
	UUID uuid.UUID
	// Identifier of Location
	LocationUUID uuid.UUID
}

type AIPStatusUpdatedEvent struct {
	// Identifier of AIP
	UUID   uuid.UUID
	Status string
}

// AIPTask describes an AIP workflow task.
type AIPTask struct {
	UUID        uuid.UUID
	Name        string
	Status      string
	StartedAt   *string
	CompletedAt *string
	Note        *string
	// Identifier of related workflow
	WorkflowUUID uuid.UUID
}

type AIPTaskCollection []*AIPTask

type AIPTaskCreatedEvent struct {
	// Identifier of task
	UUID uuid.UUID
	Item *AIPTask
}

type AIPTaskUpdatedEvent struct {
	// Identifier of task
	UUID uuid.UUID
	Item *AIPTask
}

// AIPWorkflow describes a workflow of an AIP.
type AIPWorkflow struct {
	UUID        uuid.UUID
	TemporalID  string
	Type        string
	Status      string
	StartedAt   *string
	CompletedAt *string
	// Identifier of related AIP
	AipUUID uuid.UUID
	Tasks   AIPTaskCollection
}

type AIPWorkflowCreatedEvent struct {
	// Identifier of workflow
	UUID uuid.UUID
	Item *AIPWorkflow
}

type AIPWorkflowUpdatedEvent struct {
	// Identifier of workflow
	UUID uuid.UUID
	Item *AIPWorkflow
}

type AMSSConfig struct {
	APIKey   string
	URL      string
	Username string
}

// ConfirmSipPayload is the payload type of the ingest service confirm_sip
// method.
type ConfirmSipPayload struct {
	// Identifier of SIP to look up
	UUID string
	// Identifier of storage location
	LocationUUID uuid.UUID
	Token        *string
}

// DownloadSipPayload is the payload type of the ingest service download_sip
// method.
type DownloadSipPayload struct {
	// Identifier of the SIP to download
	UUID   string
	Ticket *string
}

// DownloadSipRequestPayload is the payload type of the ingest service
// download_sip_request method.
type DownloadSipRequestPayload struct {
	// Identifier of the SIP to download
	UUID  string
	Token *string
}

// DownloadSipRequestResult is the result type of the ingest service
// download_sip_request method.
type DownloadSipRequestResult struct {
	Ticket *string
}

// DownloadSipResult is the result type of the ingest service download_sip
// method.
type DownloadSipResult struct {
	ContentType        string
	ContentLength      int64
	ContentDisposition string
}

// Page represents a subset of search results.
type EnduroPage struct {
	// Maximum items per page
	Limit int
	// Offset from first result to start of page
	Offset int
	// Total result count before paging
	Total int
}

// IngestEvent is the result type of the ingest service monitor method.
type IngestEvent struct {
	IngestValue interface {
		ingestValueVal()
	}
}

type IngestPingEvent struct {
	Message *string
}

// ListSipSourceObjectsPayload is the payload type of the ingest service
// list_sip_source_objects method.
type ListSipSourceObjectsPayload struct {
	// SIP source identifier -- CURRENTLY NOT USED
	UUID string
	// Limit the number of results to return
	Limit *int
	// Cursor token to get subsequent pages
	Cursor *string
	Token  *string
}

// ListSipWorkflowsPayload is the payload type of the ingest service
// list_sip_workflows method.
type ListSipWorkflowsPayload struct {
	// Identifier of SIP to look up
	UUID  string
	Token *string
}

// ListSipsPayload is the payload type of the ingest service list_sips method.
type ListSipsPayload struct {
	Name *string
	// Identifier of AIP
	AipUUID             *string
	EarliestCreatedTime *string
	LatestCreatedTime   *string
	Status              *string
	// UUID of the SIP uploader
	UploaderUUID *string
	// Limit number of results to return
	Limit *int
	// Offset from the beginning of the found set
	Offset *int
	Token  *string
}

// ListUsersPayload is the payload type of the ingest service list_users method.
type ListUsersPayload struct {
	// Email of the user
	Email *string
	// Name of the user
	Name *string
	// Limit number of results to return
	Limit *int
	// Offset from the beginning of the found set
	Offset *int
	Token  *string
}

// A Location describes a location retrieved by the storage service.
type Location struct {
	// Name of location
	Name string
	// Description of the location
	Description *string
	// Data source of the location
	Source string
	// Purpose of the location
	Purpose string
	UUID    uuid.UUID
	Config  interface {
		configVal()
	}
	// Creation datetime
	CreatedAt string
}

type LocationCreatedEvent struct {
	// Identifier of Location
	UUID uuid.UUID
	Item *Location
}

// MonitorPayload is the payload type of the ingest service monitor method.
type MonitorPayload struct {
	Ticket *string
}

// MonitorRequestPayload is the payload type of the ingest service
// monitor_request method.
type MonitorRequestPayload struct {
	Token *string
}

// MonitorRequestResult is the result type of the ingest service
// monitor_request method.
type MonitorRequestResult struct {
	Ticket *string
}

// RejectSipPayload is the payload type of the ingest service reject_sip method.
type RejectSipPayload struct {
	// Identifier of SIP to look up
	UUID  string
	Token *string
}

type S3Config struct {
	Bucket    string
	Region    string
	Endpoint  *string
	PathStyle *bool
	Profile   *string
	Key       *string
	Secret    *string
	Token     *string
}

type SFTPConfig struct {
	Address   string
	Username  string
	Password  string
	Directory string
}

// SIP is the result type of the ingest service show_sip method.
type SIP struct {
	// Identifier of SIP
	UUID uuid.UUID
	// Name of the SIP
	Name *string
	// Status of the SIP
	Status string
	// Identifier of AIP
	AipUUID *string
	// Creation datetime
	CreatedAt string
	// Start datetime
	StartedAt *string
	// Completion datetime
	CompletedAt *string
	// Package type in case of failure (SIP or PIP)
	FailedAs *string
	// Object key of the failed package in the internal bucket
	FailedKey *string
	// UUID of the user who uploaded the SIP
	UploaderUUID *uuid.UUID
	// Email of the user who uploaded the SIP
	UploaderEmail *string
	// Name of the user who uploaded the SIP
	UploaderName *string
}

type SIPCollection []*SIP

type SIPCreatedEvent struct {
	// Identifier of SIP
	UUID uuid.UUID
	Item *SIP
}

// SIP not found.
type SIPNotFound struct {
	// Message of error
	Message string
	// Identifier of missing SIP
	UUID string
}

// SIPSourceObject describes an object in a SIP source location.
type SIPSourceObject struct {
	// Key of the object
	Key string
	// Last modification time of the object
	ModTime *string
	// Size of the object in bytes
	Size *int64
	// True if the object is a directory, false if it is a file
	IsDir bool
}

type SIPSourceObjectCollection []*SIPSourceObject

// SIPSourceObjects is the result type of the ingest service
// list_sip_source_objects method.
type SIPSourceObjects struct {
	Objects SIPSourceObjectCollection
	// Limit of objects per page
	Limit int
	// Token to get the next page of objects
	Next *string
}

type SIPStatusUpdatedEvent struct {
	// Identifier of SIP
	UUID   uuid.UUID
	Status string
}

// SIPTask describes a SIP workflow task.
type SIPTask struct {
	// Identifier of the task
	UUID        uuid.UUID
	Name        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Note        *string
	// Identifier of related workflow
	WorkflowUUID uuid.UUID
}

type SIPTaskCollection []*SIPTask

type SIPTaskCreatedEvent struct {
	// Identifier of task
	UUID uuid.UUID
	Item *SIPTask
}

type SIPTaskUpdatedEvent struct {
	// Identifier of task
	UUID uuid.UUID
	Item *SIPTask
}

type SIPUpdatedEvent struct {
	// Identifier of SIP
	UUID uuid.UUID
	Item *SIP
}

// SIPWorkflow describes a workflow of a SIP.
type SIPWorkflow struct {
	// Identifier of the workflow
	UUID        uuid.UUID
	TemporalID  string
	Type        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Tasks       SIPTaskCollection
	// Identifier of related SIP
	SipUUID uuid.UUID
}

type SIPWorkflowCollection []*SIPWorkflow

type SIPWorkflowCreatedEvent struct {
	// Identifier of workflow
	UUID uuid.UUID
	Item *SIPWorkflow
}

type SIPWorkflowUpdatedEvent struct {
	// Identifier of workflow
	UUID uuid.UUID
	Item *SIPWorkflow
}

// SIPWorkflows is the result type of the ingest service list_sip_workflows
// method.
type SIPWorkflows struct {
	Workflows SIPWorkflowCollection
}

// SIPs is the result type of the ingest service list_sips method.
type SIPs struct {
	Items SIPCollection
	Page  *EnduroPage
}

// ShowSipPayload is the payload type of the ingest service show_sip method.
type ShowSipPayload struct {
	// Identifier of SIP to show
	UUID  string
	Token *string
}

type StoragePingEvent struct {
	Message *string
}

type URLConfig struct {
	URL string
}

// UploadSipPayload is the payload type of the ingest service upload_sip method.
type UploadSipPayload struct {
	// Content-Type header, must define value for multipart boundary.
	ContentType string
	Token       *string
}

// UploadSipResult is the result type of the ingest service upload_sip method.
type UploadSipResult struct {
	// Identifier of uploaded SIP
	UUID string
}

// User describes an Enduro user.
type User struct {
	// Identifier of the user
	UUID uuid.UUID
	// Email of the user
	Email string
	// Name of the user
	Name string
	// Creation date & time of the user
	CreatedAt string
}

type UserCollection []*User

// Users is the result type of the ingest service list_users method.
type Users struct {
	Items UserCollection
	Page  *EnduroPage
}

// Forbidden
type Forbidden string

// Unauthorized
type Unauthorized string

// Error returns an error description.
func (e *SIPNotFound) Error() string {
	return "SIP not found."
}

// ErrorName returns "SIPNotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *SIPNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "SIPNotFound".
func (e *SIPNotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e Forbidden) Error() string {
	return "Forbidden"
}

// ErrorName returns "forbidden".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Forbidden) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "forbidden".
func (e Forbidden) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
func (*AMSSConfig) configVal()                   {}
func (*IngestPingEvent) ingestValueVal()         {}
func (*S3Config) configVal()                     {}
func (*SFTPConfig) configVal()                   {}
func (*SIPCreatedEvent) ingestValueVal()         {}
func (*SIPStatusUpdatedEvent) ingestValueVal()   {}
func (*SIPTaskCreatedEvent) ingestValueVal()     {}
func (*SIPTaskUpdatedEvent) ingestValueVal()     {}
func (*SIPUpdatedEvent) ingestValueVal()         {}
func (*SIPWorkflowCreatedEvent) ingestValueVal() {}
func (*SIPWorkflowUpdatedEvent) ingestValueVal() {}
func (*URLConfig) configVal()                    {}

// MakeNotAvailable builds a goa.ServiceError from an error.
func MakeNotAvailable(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_available", false, false, false)
}

// MakeNotValid builds a goa.ServiceError from an error.
func MakeNotValid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_valid", false, false, false)
}

// MakeInvalidMediaType builds a goa.ServiceError from an error.
func MakeInvalidMediaType(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_media_type", false, false, false)
}

// MakeInvalidMultipartRequest builds a goa.ServiceError from an error.
func MakeInvalidMultipartRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_multipart_request", false, false, false)
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "internal_error", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// NewSIPs initializes result type SIPs from viewed result type SIPs.
func NewSIPs(vres *ingestviews.SIPs) *SIPs {
	return newSIPs(vres.Projected)
}

// NewViewedSIPs initializes viewed result type SIPs from result type SIPs
// using the given view.
func NewViewedSIPs(res *SIPs, view string) *ingestviews.SIPs {
	p := newSIPsView(res)
	return &ingestviews.SIPs{Projected: p, View: "default"}
}

// NewSIP initializes result type SIP from viewed result type SIP.
func NewSIP(vres *ingestviews.SIP) *SIP {
	return newSIP(vres.Projected)
}

// NewViewedSIP initializes viewed result type SIP from result type SIP using
// the given view.
func NewViewedSIP(res *SIP, view string) *ingestviews.SIP {
	p := newSIPView(res)
	return &ingestviews.SIP{Projected: p, View: "default"}
}

// NewSIPWorkflows initializes result type SIPWorkflows from viewed result type
// SIPWorkflows.
func NewSIPWorkflows(vres *ingestviews.SIPWorkflows) *SIPWorkflows {
	return newSIPWorkflows(vres.Projected)
}

// NewViewedSIPWorkflows initializes viewed result type SIPWorkflows from
// result type SIPWorkflows using the given view.
func NewViewedSIPWorkflows(res *SIPWorkflows, view string) *ingestviews.SIPWorkflows {
	p := newSIPWorkflowsView(res)
	return &ingestviews.SIPWorkflows{Projected: p, View: "default"}
}

// NewUsers initializes result type Users from viewed result type Users.
func NewUsers(vres *ingestviews.Users) *Users {
	return newUsers(vres.Projected)
}

// NewViewedUsers initializes viewed result type Users from result type Users
// using the given view.
func NewViewedUsers(res *Users, view string) *ingestviews.Users {
	p := newUsersView(res)
	return &ingestviews.Users{Projected: p, View: "default"}
}

// NewSIPSourceObjects initializes result type SIPSourceObjects from viewed
// result type SIPSourceObjects.
func NewSIPSourceObjects(vres *ingestviews.SIPSourceObjects) *SIPSourceObjects {
	return newSIPSourceObjects(vres.Projected)
}

// NewViewedSIPSourceObjects initializes viewed result type SIPSourceObjects
// from result type SIPSourceObjects using the given view.
func NewViewedSIPSourceObjects(res *SIPSourceObjects, view string) *ingestviews.SIPSourceObjects {
	p := newSIPSourceObjectsView(res)
	return &ingestviews.SIPSourceObjects{Projected: p, View: "default"}
}

// newSIPs converts projected type SIPs to service type SIPs.
func newSIPs(vres *ingestviews.SIPsView) *SIPs {
	res := &SIPs{}
	if vres.Items != nil {
		res.Items = newSIPCollection(vres.Items)
	}
	if vres.Page != nil {
		res.Page = newEnduroPage(vres.Page)
	}
	return res
}

// newSIPsView projects result type SIPs to projected type SIPsView using the
// "default" view.
func newSIPsView(res *SIPs) *ingestviews.SIPsView {
	vres := &ingestviews.SIPsView{}
	if res.Items != nil {
		vres.Items = newSIPCollectionView(res.Items)
	}
	if res.Page != nil {
		vres.Page = newEnduroPageView(res.Page)
	}
	return vres
}

// newSIPCollection converts projected type SIPCollection to service type
// SIPCollection.
func newSIPCollection(vres ingestviews.SIPCollectionView) SIPCollection {
	res := make(SIPCollection, len(vres))
	for i, n := range vres {
		res[i] = newSIP(n)
	}
	return res
}

// newSIPCollectionView projects result type SIPCollection to projected type
// SIPCollectionView using the "default" view.
func newSIPCollectionView(res SIPCollection) ingestviews.SIPCollectionView {
	vres := make(ingestviews.SIPCollectionView, len(res))
	for i, n := range res {
		vres[i] = newSIPView(n)
	}
	return vres
}

// newSIP converts projected type SIP to service type SIP.
func newSIP(vres *ingestviews.SIPView) *SIP {
	res := &SIP{
		Name:          vres.Name,
		AipUUID:       vres.AipUUID,
		StartedAt:     vres.StartedAt,
		CompletedAt:   vres.CompletedAt,
		FailedAs:      vres.FailedAs,
		FailedKey:     vres.FailedKey,
		UploaderUUID:  vres.UploaderUUID,
		UploaderEmail: vres.UploaderEmail,
		UploaderName:  vres.UploaderName,
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	return res
}

// newSIPView projects result type SIP to projected type SIPView using the
// "default" view.
func newSIPView(res *SIP) *ingestviews.SIPView {
	vres := &ingestviews.SIPView{
		UUID:          &res.UUID,
		Name:          res.Name,
		Status:        &res.Status,
		AipUUID:       res.AipUUID,
		CreatedAt:     &res.CreatedAt,
		StartedAt:     res.StartedAt,
		CompletedAt:   res.CompletedAt,
		FailedAs:      res.FailedAs,
		FailedKey:     res.FailedKey,
		UploaderUUID:  res.UploaderUUID,
		UploaderEmail: res.UploaderEmail,
		UploaderName:  res.UploaderName,
	}
	return vres
}

// newEnduroPage converts projected type EnduroPage to service type EnduroPage.
func newEnduroPage(vres *ingestviews.EnduroPageView) *EnduroPage {
	res := &EnduroPage{}
	if vres.Limit != nil {
		res.Limit = *vres.Limit
	}
	if vres.Offset != nil {
		res.Offset = *vres.Offset
	}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	return res
}

// newEnduroPageView projects result type EnduroPage to projected type
// EnduroPageView using the "default" view.
func newEnduroPageView(res *EnduroPage) *ingestviews.EnduroPageView {
	vres := &ingestviews.EnduroPageView{
		Limit:  &res.Limit,
		Offset: &res.Offset,
		Total:  &res.Total,
	}
	return vres
}

// newSIPWorkflows converts projected type SIPWorkflows to service type
// SIPWorkflows.
func newSIPWorkflows(vres *ingestviews.SIPWorkflowsView) *SIPWorkflows {
	res := &SIPWorkflows{}
	if vres.Workflows != nil {
		res.Workflows = newSIPWorkflowCollection(vres.Workflows)
	}
	return res
}

// newSIPWorkflowsView projects result type SIPWorkflows to projected type
// SIPWorkflowsView using the "default" view.
func newSIPWorkflowsView(res *SIPWorkflows) *ingestviews.SIPWorkflowsView {
	vres := &ingestviews.SIPWorkflowsView{}
	if res.Workflows != nil {
		vres.Workflows = newSIPWorkflowCollectionView(res.Workflows)
	}
	return vres
}

// newSIPWorkflowCollectionSimple converts projected type SIPWorkflowCollection
// to service type SIPWorkflowCollection.
func newSIPWorkflowCollectionSimple(vres ingestviews.SIPWorkflowCollectionView) SIPWorkflowCollection {
	res := make(SIPWorkflowCollection, len(vres))
	for i, n := range vres {
		res[i] = newSIPWorkflowSimple(n)
	}
	return res
}

// newSIPWorkflowCollection converts projected type SIPWorkflowCollection to
// service type SIPWorkflowCollection.
func newSIPWorkflowCollection(vres ingestviews.SIPWorkflowCollectionView) SIPWorkflowCollection {
	res := make(SIPWorkflowCollection, len(vres))
	for i, n := range vres {
		res[i] = newSIPWorkflow(n)
	}
	return res
}

// newSIPWorkflowCollectionViewSimple projects result type
// SIPWorkflowCollection to projected type SIPWorkflowCollectionView using the
// "simple" view.
func newSIPWorkflowCollectionViewSimple(res SIPWorkflowCollection) ingestviews.SIPWorkflowCollectionView {
	vres := make(ingestviews.SIPWorkflowCollectionView, len(res))
	for i, n := range res {
		vres[i] = newSIPWorkflowViewSimple(n)
	}
	return vres
}

// newSIPWorkflowCollectionView projects result type SIPWorkflowCollection to
// projected type SIPWorkflowCollectionView using the "default" view.
func newSIPWorkflowCollectionView(res SIPWorkflowCollection) ingestviews.SIPWorkflowCollectionView {
	vres := make(ingestviews.SIPWorkflowCollectionView, len(res))
	for i, n := range res {
		vres[i] = newSIPWorkflowView(n)
	}
	return vres
}

// newSIPWorkflowSimple converts projected type SIPWorkflow to service type
// SIPWorkflow.
func newSIPWorkflowSimple(vres *ingestviews.SIPWorkflowView) *SIPWorkflow {
	res := &SIPWorkflow{
		CompletedAt: vres.CompletedAt,
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.TemporalID != nil {
		res.TemporalID = *vres.TemporalID
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	if vres.SipUUID != nil {
		res.SipUUID = *vres.SipUUID
	}
	if vres.Tasks != nil {
		res.Tasks = newSIPTaskCollection(vres.Tasks)
	}
	return res
}

// newSIPWorkflow converts projected type SIPWorkflow to service type
// SIPWorkflow.
func newSIPWorkflow(vres *ingestviews.SIPWorkflowView) *SIPWorkflow {
	res := &SIPWorkflow{
		CompletedAt: vres.CompletedAt,
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.TemporalID != nil {
		res.TemporalID = *vres.TemporalID
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	if vres.SipUUID != nil {
		res.SipUUID = *vres.SipUUID
	}
	if vres.Tasks != nil {
		res.Tasks = newSIPTaskCollection(vres.Tasks)
	}
	return res
}

// newSIPWorkflowViewSimple projects result type SIPWorkflow to projected type
// SIPWorkflowView using the "simple" view.
func newSIPWorkflowViewSimple(res *SIPWorkflow) *ingestviews.SIPWorkflowView {
	vres := &ingestviews.SIPWorkflowView{
		UUID:        &res.UUID,
		TemporalID:  &res.TemporalID,
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   &res.StartedAt,
		CompletedAt: res.CompletedAt,
		SipUUID:     &res.SipUUID,
	}
	return vres
}

// newSIPWorkflowView projects result type SIPWorkflow to projected type
// SIPWorkflowView using the "default" view.
func newSIPWorkflowView(res *SIPWorkflow) *ingestviews.SIPWorkflowView {
	vres := &ingestviews.SIPWorkflowView{
		UUID:        &res.UUID,
		TemporalID:  &res.TemporalID,
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   &res.StartedAt,
		CompletedAt: res.CompletedAt,
		SipUUID:     &res.SipUUID,
	}
	if res.Tasks != nil {
		vres.Tasks = newSIPTaskCollectionView(res.Tasks)
	}
	return vres
}

// newSIPTaskCollection converts projected type SIPTaskCollection to service
// type SIPTaskCollection.
func newSIPTaskCollection(vres ingestviews.SIPTaskCollectionView) SIPTaskCollection {
	res := make(SIPTaskCollection, len(vres))
	for i, n := range vres {
		res[i] = newSIPTask(n)
	}
	return res
}

// newSIPTaskCollectionView projects result type SIPTaskCollection to projected
// type SIPTaskCollectionView using the "default" view.
func newSIPTaskCollectionView(res SIPTaskCollection) ingestviews.SIPTaskCollectionView {
	vres := make(ingestviews.SIPTaskCollectionView, len(res))
	for i, n := range res {
		vres[i] = newSIPTaskView(n)
	}
	return vres
}

// newSIPTask converts projected type SIPTask to service type SIPTask.
func newSIPTask(vres *ingestviews.SIPTaskView) *SIPTask {
	res := &SIPTask{
		CompletedAt: vres.CompletedAt,
		Note:        vres.Note,
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.StartedAt != nil {
		res.StartedAt = *vres.StartedAt
	}
	if vres.WorkflowUUID != nil {
		res.WorkflowUUID = *vres.WorkflowUUID
	}
	return res
}

// newSIPTaskView projects result type SIPTask to projected type SIPTaskView
// using the "default" view.
func newSIPTaskView(res *SIPTask) *ingestviews.SIPTaskView {
	vres := &ingestviews.SIPTaskView{
		UUID:         &res.UUID,
		Name:         &res.Name,
		Status:       &res.Status,
		StartedAt:    &res.StartedAt,
		CompletedAt:  res.CompletedAt,
		Note:         res.Note,
		WorkflowUUID: &res.WorkflowUUID,
	}
	return vres
}

// newUsers converts projected type Users to service type Users.
func newUsers(vres *ingestviews.UsersView) *Users {
	res := &Users{}
	if vres.Items != nil {
		res.Items = newUserCollection(vres.Items)
	}
	if vres.Page != nil {
		res.Page = newEnduroPage(vres.Page)
	}
	return res
}

// newUsersView projects result type Users to projected type UsersView using
// the "default" view.
func newUsersView(res *Users) *ingestviews.UsersView {
	vres := &ingestviews.UsersView{}
	if res.Items != nil {
		vres.Items = newUserCollectionView(res.Items)
	}
	if res.Page != nil {
		vres.Page = newEnduroPageView(res.Page)
	}
	return vres
}

// newUserCollection converts projected type UserCollection to service type
// UserCollection.
func newUserCollection(vres ingestviews.UserCollectionView) UserCollection {
	res := make(UserCollection, len(vres))
	for i, n := range vres {
		res[i] = newUser(n)
	}
	return res
}

// newUserCollectionView projects result type UserCollection to projected type
// UserCollectionView using the "default" view.
func newUserCollectionView(res UserCollection) ingestviews.UserCollectionView {
	vres := make(ingestviews.UserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUserView(n)
	}
	return vres
}

// newUser converts projected type User to service type User.
func newUser(vres *ingestviews.UserView) *User {
	res := &User{}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *ingestviews.UserView {
	vres := &ingestviews.UserView{
		UUID:      &res.UUID,
		Email:     &res.Email,
		Name:      &res.Name,
		CreatedAt: &res.CreatedAt,
	}
	return vres
}

// newSIPSourceObjects converts projected type SIPSourceObjects to service type
// SIPSourceObjects.
func newSIPSourceObjects(vres *ingestviews.SIPSourceObjectsView) *SIPSourceObjects {
	res := &SIPSourceObjects{
		Next: vres.Next,
	}
	if vres.Limit != nil {
		res.Limit = *vres.Limit
	}
	if vres.Objects != nil {
		res.Objects = newSIPSourceObjectCollection(vres.Objects)
	}
	return res
}

// newSIPSourceObjectsView projects result type SIPSourceObjects to projected
// type SIPSourceObjectsView using the "default" view.
func newSIPSourceObjectsView(res *SIPSourceObjects) *ingestviews.SIPSourceObjectsView {
	vres := &ingestviews.SIPSourceObjectsView{
		Limit: &res.Limit,
		Next:  res.Next,
	}
	if res.Objects != nil {
		vres.Objects = newSIPSourceObjectCollectionView(res.Objects)
	}
	return vres
}

// newSIPSourceObjectCollection converts projected type
// SIPSourceObjectCollection to service type SIPSourceObjectCollection.
func newSIPSourceObjectCollection(vres ingestviews.SIPSourceObjectCollectionView) SIPSourceObjectCollection {
	res := make(SIPSourceObjectCollection, len(vres))
	for i, n := range vres {
		res[i] = newSIPSourceObject(n)
	}
	return res
}

// newSIPSourceObjectCollectionView projects result type
// SIPSourceObjectCollection to projected type SIPSourceObjectCollectionView
// using the "default" view.
func newSIPSourceObjectCollectionView(res SIPSourceObjectCollection) ingestviews.SIPSourceObjectCollectionView {
	vres := make(ingestviews.SIPSourceObjectCollectionView, len(res))
	for i, n := range res {
		vres[i] = newSIPSourceObjectView(n)
	}
	return vres
}

// newSIPSourceObject converts projected type SIPSourceObject to service type
// SIPSourceObject.
func newSIPSourceObject(vres *ingestviews.SIPSourceObjectView) *SIPSourceObject {
	res := &SIPSourceObject{
		ModTime: vres.ModTime,
		Size:    vres.Size,
	}
	if vres.Key != nil {
		res.Key = *vres.Key
	}
	if vres.IsDir != nil {
		res.IsDir = *vres.IsDir
	}
	return res
}

// newSIPSourceObjectView projects result type SIPSourceObject to projected
// type SIPSourceObjectView using the "default" view.
func newSIPSourceObjectView(res *SIPSourceObject) *ingestviews.SIPSourceObjectView {
	vres := &ingestviews.SIPSourceObjectView{
		Key:     &res.Key,
		ModTime: res.ModTime,
		Size:    res.Size,
		IsDir:   &res.IsDir,
	}
	return vres
}
