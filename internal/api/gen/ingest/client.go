// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest client
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package ingest

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "ingest" service client.
type Client struct {
	MonitorRequestEndpoint   goa.Endpoint
	MonitorEndpoint          goa.Endpoint
	ListSipsEndpoint         goa.Endpoint
	ShowSipEndpoint          goa.Endpoint
	ListSipWorkflowsEndpoint goa.Endpoint
	ConfirmSipEndpoint       goa.Endpoint
	RejectSipEndpoint        goa.Endpoint
	MoveSipEndpoint          goa.Endpoint
	MoveSipStatusEndpoint    goa.Endpoint
	UploadSipEndpoint        goa.Endpoint
}

// NewClient initializes a "ingest" service client given the endpoints.
func NewClient(monitorRequest, monitor, listSips, showSip, listSipWorkflows, confirmSip, rejectSip, moveSip, moveSipStatus, uploadSip goa.Endpoint) *Client {
	return &Client{
		MonitorRequestEndpoint:   monitorRequest,
		MonitorEndpoint:          monitor,
		ListSipsEndpoint:         listSips,
		ShowSipEndpoint:          showSip,
		ListSipWorkflowsEndpoint: listSipWorkflows,
		ConfirmSipEndpoint:       confirmSip,
		RejectSipEndpoint:        rejectSip,
		MoveSipEndpoint:          moveSip,
		MoveSipStatusEndpoint:    moveSipStatus,
		UploadSipEndpoint:        uploadSip,
	}
}

// MonitorRequest calls the "monitor_request" endpoint of the "ingest" service.
// MonitorRequest may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) MonitorRequest(ctx context.Context, p *MonitorRequestPayload) (res *MonitorRequestResult, err error) {
	var ires any
	ires, err = c.MonitorRequestEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MonitorRequestResult), nil
}

// Monitor calls the "monitor" endpoint of the "ingest" service.
// Monitor may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) Monitor(ctx context.Context, p *MonitorPayload) (res MonitorClientStream, err error) {
	var ires any
	ires, err = c.MonitorEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(MonitorClientStream), nil
}

// ListSips calls the "list_sips" endpoint of the "ingest" service.
// ListSips may return the following errors:
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ListSips(ctx context.Context, p *ListSipsPayload) (res *SIPs, err error) {
	var ires any
	ires, err = c.ListSipsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SIPs), nil
}

// ShowSip calls the "show_sip" endpoint of the "ingest" service.
// ShowSip may return the following errors:
//   - "not_found" (type *SIPNotFound): SIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ShowSip(ctx context.Context, p *ShowSipPayload) (res *SIP, err error) {
	var ires any
	ires, err = c.ShowSipEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SIP), nil
}

// ListSipWorkflows calls the "list_sip_workflows" endpoint of the "ingest"
// service.
// ListSipWorkflows may return the following errors:
//   - "not_found" (type *SIPNotFound): SIP not found
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ListSipWorkflows(ctx context.Context, p *ListSipWorkflowsPayload) (res *SIPWorkflows, err error) {
	var ires any
	ires, err = c.ListSipWorkflowsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SIPWorkflows), nil
}

// ConfirmSip calls the "confirm_sip" endpoint of the "ingest" service.
// ConfirmSip may return the following errors:
//   - "not_found" (type *SIPNotFound): SIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ConfirmSip(ctx context.Context, p *ConfirmSipPayload) (err error) {
	_, err = c.ConfirmSipEndpoint(ctx, p)
	return
}

// RejectSip calls the "reject_sip" endpoint of the "ingest" service.
// RejectSip may return the following errors:
//   - "not_found" (type *SIPNotFound): SIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) RejectSip(ctx context.Context, p *RejectSipPayload) (err error) {
	_, err = c.RejectSipEndpoint(ctx, p)
	return
}

// MoveSip calls the "move_sip" endpoint of the "ingest" service.
// MoveSip may return the following errors:
//   - "not_found" (type *SIPNotFound): SIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) MoveSip(ctx context.Context, p *MoveSipPayload) (err error) {
	_, err = c.MoveSipEndpoint(ctx, p)
	return
}

// MoveSipStatus calls the "move_sip_status" endpoint of the "ingest" service.
// MoveSipStatus may return the following errors:
//   - "not_found" (type *SIPNotFound): SIP not found
//   - "failed_dependency" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) MoveSipStatus(ctx context.Context, p *MoveSipStatusPayload) (res *MoveStatusResult, err error) {
	var ires any
	ires, err = c.MoveSipStatusEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MoveStatusResult), nil
}

// UploadSip calls the "upload_sip" endpoint of the "ingest" service.
// UploadSip may return the following errors:
//   - "invalid_media_type" (type *goa.ServiceError): Error returned when the Content-Type header does not define a multipart request.
//   - "invalid_multipart_request" (type *goa.ServiceError): Error returned when the request body is not a valid multipart content.
//   - "internal_error" (type *goa.ServiceError): Fault while processing upload.
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) UploadSip(ctx context.Context, p *UploadSipPayload, req io.ReadCloser) (err error) {
	_, err = c.UploadSipEndpoint(ctx, &UploadSipRequestData{Payload: p, Body: req})
	return
}
