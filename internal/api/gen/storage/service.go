// Code generated by goa v3.7.6, DO NOT EDIT.
//
// storage service
//
// Command:
// $ goa-v3.7.6 gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package storage

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The storage service manages the storage of packages.
type Service interface {
	// Start the submission of a package
	Submit(context.Context, *SubmitPayload) (res *SubmitResult, err error)
	// Signal the storage service that an upload is complete
	Update(context.Context, *UpdatePayload) (res *UpdateResult, err error)
	// Download package by AIPID
	Download(context.Context, *DownloadPayload) (res *DownloadResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "storage"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"submit", "update", "download"}

// DownloadPayload is the payload type of the storage service download method.
type DownloadPayload struct {
	AipID string
}

// DownloadResult is the result type of the storage service download method.
type DownloadResult struct {
	URL string
}

// Storage package not found.
type StoragePackageNotfound struct {
	// Message of error
	Message string
	// Identifier of missing package
	AipID string
}

// SubmitPayload is the payload type of the storage service submit method.
type SubmitPayload struct {
	AipID string
	Name  string
}

// SubmitResult is the result type of the storage service submit method.
type SubmitResult struct {
	URL string
}

// UpdatePayload is the payload type of the storage service update method.
type UpdatePayload struct {
	AipID string
}

// UpdateResult is the result type of the storage service update method.
type UpdateResult struct {
	OK bool
}

// Error returns an error description.
func (e *StoragePackageNotfound) Error() string {
	return "Storage package not found."
}

// ErrorName returns "StoragePackageNotfound".
func (e *StoragePackageNotfound) ErrorName() string {
	return e.Message
}

// MakeNotAvailable builds a goa.ServiceError from an error.
func MakeNotAvailable(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_available",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotValid builds a goa.ServiceError from an error.
func MakeNotValid(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_valid",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
