// Code generated by goa v3.8.4, DO NOT EDIT.
//
// storage service
//
// Command:
// $ goa-v3.8.4 gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package storage

import (
	"context"

	storageviews "github.com/artefactual-sdps/enduro/internal/api/gen/storage/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// The storage service manages the storage of packages.
type Service interface {
	// Start the submission of a package
	Submit(context.Context, *SubmitPayload) (res *SubmitResult, err error)
	// Signal the storage service that an upload is complete
	Update(context.Context, *UpdatePayload) (err error)
	// Download package by AIPID
	Download(context.Context, *DownloadPayload) (res []byte, err error)
	// List locations
	Locations(context.Context) (res LocationCollection, err error)
	// Add a storage location
	AddLocation(context.Context, *AddLocationPayload) (res *AddLocationResult, err error)
	// Move a package to a permanent storage location
	Move(context.Context, *MovePayload) (err error)
	// Retrieve the status of a permanent storage location move of the package
	MoveStatus(context.Context, *MoveStatusPayload) (res *MoveStatusResult, err error)
	// Reject a package
	Reject(context.Context, *RejectPayload) (err error)
	// Show package by AIPID
	Show(context.Context, *ShowPayload) (res *StoredStoragePackage, err error)
	// Show location by UUID
	ShowLocation(context.Context, *ShowLocationPayload) (res *Location, err error)
	// List all the packages stored in the location with UUID
	LocationPackages(context.Context, *LocationPackagesPayload) (res StoredStoragePackageCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "storage"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [11]string{"submit", "update", "download", "locations", "add_location", "move", "move_status", "reject", "show", "show_location", "location_packages"}

// AddLocationPayload is the payload type of the storage service add_location
// method.
type AddLocationPayload struct {
	Name        string
	Description *string
	Source      string
	Purpose     string
	Config      interface {
		configVal()
	}
}

// AddLocationResult is the result type of the storage service add_location
// method.
type AddLocationResult struct {
	UUID string
}

// DownloadPayload is the payload type of the storage service download method.
type DownloadPayload struct {
	AipID string
}

// Location is the result type of the storage service show_location method.
type Location struct {
	// Name of location
	Name string
	// Description of the location
	Description *string
	// Data source of the location
	Source string
	// Purpose of the location
	Purpose string
	UUID    uuid.UUID
	Config  interface {
		configVal()
	}
	// Creation datetime
	CreatedAt string
}

// LocationCollection is the result type of the storage service locations
// method.
type LocationCollection []*Location

// Storage location not found.
type LocationNotFound struct {
	// Message of error
	Message string
	UUID    uuid.UUID
}

// LocationPackagesPayload is the payload type of the storage service
// location_packages method.
type LocationPackagesPayload struct {
	UUID string
}

// MovePayload is the payload type of the storage service move method.
type MovePayload struct {
	AipID      string
	LocationID uuid.UUID
}

// MoveStatusPayload is the payload type of the storage service move_status
// method.
type MoveStatusPayload struct {
	AipID string
}

// MoveStatusResult is the result type of the storage service move_status
// method.
type MoveStatusResult struct {
	Done bool
}

// Storage package not found.
type PackageNotFound struct {
	// Message of error
	Message string
	// Identifier of missing package
	AipID uuid.UUID
}

// RejectPayload is the payload type of the storage service reject method.
type RejectPayload struct {
	AipID string
}

type S3Config struct {
	Bucket    string
	Region    string
	Endpoint  *string
	PathStyle *bool
	Profile   *string
	Key       *string
	Secret    *string
	Token     *string
}

// ShowLocationPayload is the payload type of the storage service show_location
// method.
type ShowLocationPayload struct {
	UUID string
}

// ShowPayload is the payload type of the storage service show method.
type ShowPayload struct {
	AipID string
}

// Storage package describes a package of the storage service.
type StoragePackage struct {
	Name  string
	AipID uuid.UUID
	// Status of the package
	Status     string
	ObjectKey  *uuid.UUID
	LocationID *uuid.UUID
	// Creation datetime
	CreatedAt string
}

// StoredStoragePackage is the result type of the storage service show method.
type StoredStoragePackage struct {
	Name  string
	AipID uuid.UUID
	// Status of the package
	Status     string
	ObjectKey  uuid.UUID
	LocationID *uuid.UUID
	// Creation datetime
	CreatedAt string
}

// StoredStoragePackageCollection is the result type of the storage service
// location_packages method.
type StoredStoragePackageCollection []*StoredStoragePackage

// SubmitPayload is the payload type of the storage service submit method.
type SubmitPayload struct {
	AipID string
	Name  string
}

// SubmitResult is the result type of the storage service submit method.
type SubmitResult struct {
	URL string
}

// UpdatePayload is the payload type of the storage service update method.
type UpdatePayload struct {
	AipID string
}

// Error returns an error description.
func (e *LocationNotFound) Error() string {
	return "Storage location not found."
}

// ErrorName returns "LocationNotFound".
func (e *LocationNotFound) ErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *PackageNotFound) Error() string {
	return "Storage package not found."
}

// ErrorName returns "PackageNotFound".
func (e *PackageNotFound) ErrorName() string {
	return "not_found"
}
func (*S3Config) configVal() {}

// MakeNotAvailable builds a goa.ServiceError from an error.
func MakeNotAvailable(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_available", false, false, false)
}

// MakeNotValid builds a goa.ServiceError from an error.
func MakeNotValid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_valid", false, false, false)
}

// MakeFailedDependency builds a goa.ServiceError from an error.
func MakeFailedDependency(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "failed_dependency", false, false, false)
}

// NewLocationCollection initializes result type LocationCollection from viewed
// result type LocationCollection.
func NewLocationCollection(vres storageviews.LocationCollection) LocationCollection {
	return newLocationCollection(vres.Projected)
}

// NewViewedLocationCollection initializes viewed result type
// LocationCollection from result type LocationCollection using the given view.
func NewViewedLocationCollection(res LocationCollection, view string) storageviews.LocationCollection {
	p := newLocationCollectionView(res)
	return storageviews.LocationCollection{Projected: p, View: "default"}
}

// NewStoredStoragePackage initializes result type StoredStoragePackage from
// viewed result type StoredStoragePackage.
func NewStoredStoragePackage(vres *storageviews.StoredStoragePackage) *StoredStoragePackage {
	return newStoredStoragePackage(vres.Projected)
}

// NewViewedStoredStoragePackage initializes viewed result type
// StoredStoragePackage from result type StoredStoragePackage using the given
// view.
func NewViewedStoredStoragePackage(res *StoredStoragePackage, view string) *storageviews.StoredStoragePackage {
	p := newStoredStoragePackageView(res)
	return &storageviews.StoredStoragePackage{Projected: p, View: "default"}
}

// NewLocation initializes result type Location from viewed result type
// Location.
func NewLocation(vres *storageviews.Location) *Location {
	return newLocation(vres.Projected)
}

// NewViewedLocation initializes viewed result type Location from result type
// Location using the given view.
func NewViewedLocation(res *Location, view string) *storageviews.Location {
	p := newLocationView(res)
	return &storageviews.Location{Projected: p, View: "default"}
}

// NewStoredStoragePackageCollection initializes result type
// StoredStoragePackageCollection from viewed result type
// StoredStoragePackageCollection.
func NewStoredStoragePackageCollection(vres storageviews.StoredStoragePackageCollection) StoredStoragePackageCollection {
	return newStoredStoragePackageCollection(vres.Projected)
}

// NewViewedStoredStoragePackageCollection initializes viewed result type
// StoredStoragePackageCollection from result type
// StoredStoragePackageCollection using the given view.
func NewViewedStoredStoragePackageCollection(res StoredStoragePackageCollection, view string) storageviews.StoredStoragePackageCollection {
	p := newStoredStoragePackageCollectionView(res)
	return storageviews.StoredStoragePackageCollection{Projected: p, View: "default"}
}

// newLocationCollection converts projected type LocationCollection to service
// type LocationCollection.
func newLocationCollection(vres storageviews.LocationCollectionView) LocationCollection {
	res := make(LocationCollection, len(vres))
	for i, n := range vres {
		res[i] = newLocation(n)
	}
	return res
}

// newLocationCollectionView projects result type LocationCollection to
// projected type LocationCollectionView using the "default" view.
func newLocationCollectionView(res LocationCollection) storageviews.LocationCollectionView {
	vres := make(storageviews.LocationCollectionView, len(res))
	for i, n := range res {
		vres[i] = newLocationView(n)
	}
	return vres
}

// newLocation converts projected type Location to service type Location.
func newLocation(vres *storageviews.LocationView) *Location {
	res := &Location{
		Description: vres.Description,
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Source != nil {
		res.Source = *vres.Source
	}
	if vres.Purpose != nil {
		res.Purpose = *vres.Purpose
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Source == nil {
		res.Source = "unspecified"
	}
	if vres.Purpose == nil {
		res.Purpose = "unspecified"
	}
	return res
}

// newLocationView projects result type Location to projected type LocationView
// using the "default" view.
func newLocationView(res *Location) *storageviews.LocationView {
	vres := &storageviews.LocationView{
		Name:        &res.Name,
		Description: res.Description,
		Source:      &res.Source,
		Purpose:     &res.Purpose,
		UUID:        &res.UUID,
		CreatedAt:   &res.CreatedAt,
	}
	return vres
}

// newStoredStoragePackage converts projected type StoredStoragePackage to
// service type StoredStoragePackage.
func newStoredStoragePackage(vres *storageviews.StoredStoragePackageView) *StoredStoragePackage {
	res := &StoredStoragePackage{
		LocationID: vres.LocationID,
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.AipID != nil {
		res.AipID = *vres.AipID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.ObjectKey != nil {
		res.ObjectKey = *vres.ObjectKey
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Status == nil {
		res.Status = "unspecified"
	}
	return res
}

// newStoredStoragePackageView projects result type StoredStoragePackage to
// projected type StoredStoragePackageView using the "default" view.
func newStoredStoragePackageView(res *StoredStoragePackage) *storageviews.StoredStoragePackageView {
	vres := &storageviews.StoredStoragePackageView{
		Name:       &res.Name,
		AipID:      &res.AipID,
		Status:     &res.Status,
		ObjectKey:  &res.ObjectKey,
		LocationID: res.LocationID,
		CreatedAt:  &res.CreatedAt,
	}
	return vres
}

// newStoredStoragePackageCollection converts projected type
// StoredStoragePackageCollection to service type
// StoredStoragePackageCollection.
func newStoredStoragePackageCollection(vres storageviews.StoredStoragePackageCollectionView) StoredStoragePackageCollection {
	res := make(StoredStoragePackageCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredStoragePackage(n)
	}
	return res
}

// newStoredStoragePackageCollectionView projects result type
// StoredStoragePackageCollection to projected type
// StoredStoragePackageCollectionView using the "default" view.
func newStoredStoragePackageCollectionView(res StoredStoragePackageCollection) storageviews.StoredStoragePackageCollectionView {
	vres := make(storageviews.StoredStoragePackageCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredStoragePackageView(n)
	}
	return vres
}
