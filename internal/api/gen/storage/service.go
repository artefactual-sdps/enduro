// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage service
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package storage

import (
	"context"

	storageviews "github.com/artefactual-sdps/enduro/internal/api/gen/storage/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The storage service manages locations and AIPs.
type Service interface {
	// List all AIPs
	ListAips(context.Context, *ListAipsPayload) (res *AIPs, err error)
	// Create a new AIP
	CreateAip(context.Context, *CreateAipPayload) (res *AIP, err error)
	// Start the submission of an AIP
	SubmitAip(context.Context, *SubmitAipPayload) (res *SubmitAIPResult, err error)
	// Signal that an AIP submission is complete
	UpdateAip(context.Context, *UpdateAipPayload) (err error)
	// Download AIP by AIPID
	DownloadAip(context.Context, *DownloadAipPayload) (res []byte, err error)
	// Move an AIP to a permanent storage location
	MoveAip(context.Context, *MoveAipPayload) (err error)
	// Retrieve the status of a permanent storage location move of the AIP
	MoveAipStatus(context.Context, *MoveAipStatusPayload) (res *MoveStatusResult, err error)
	// Reject an AIP
	RejectAip(context.Context, *RejectAipPayload) (err error)
	// Show AIP by AIPID
	ShowAip(context.Context, *ShowAipPayload) (res *AIP, err error)
	// List workflows related to an AIP
	ListAipWorkflows(context.Context, *ListAipWorkflowsPayload) (res *AIPWorkflows, err error)
	// Request an AIP deletion
	RequestAipDeletion(context.Context, *RequestAipDeletionPayload) (err error)
	// Review an AIP deletion request
	ReviewAipDeletion(context.Context, *ReviewAipDeletionPayload) (err error)
	// Cancel an AIP deletion request
	CancelAipDeletion(context.Context, *CancelAipDeletionPayload) (err error)
	// List locations
	ListLocations(context.Context, *ListLocationsPayload) (res LocationCollection, err error)
	// Create a storage location
	CreateLocation(context.Context, *CreateLocationPayload) (res *CreateLocationResult, err error)
	// Show location by UUID
	ShowLocation(context.Context, *ShowLocationPayload) (res *Location, err error)
	// List all the AIPs stored in the location with UUID
	ListLocationAips(context.Context, *ListLocationAipsPayload) (res AIPCollection, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "enduro"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "storage"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [17]string{"list_aips", "create_aip", "submit_aip", "update_aip", "download_aip", "move_aip", "move_aip_status", "reject_aip", "show_aip", "list_aip_workflows", "request_aip_deletion", "review_aip_deletion", "cancel_aip_deletion", "list_locations", "create_location", "show_location", "list_location_aips"}

// AIP is the result type of the storage service create_aip method.
type AIP struct {
	Name string
	UUID uuid.UUID
	// Status of the AIP
	Status    string
	ObjectKey uuid.UUID
	// Identifier of storage location
	LocationID *uuid.UUID
	// Creation datetime
	CreatedAt string
}

// AIPCollection is the result type of the storage service list_location_aips
// method.
type AIPCollection []*AIP

// AIP not found.
type AIPNotFound struct {
	// Message of error
	Message string
	// Identifier of missing AIP
	UUID uuid.UUID
}

// AIPTask describes an AIP workflow task.
type AIPTask struct {
	UUID        uuid.UUID
	Name        string
	Status      string
	StartedAt   *string
	CompletedAt *string
	Note        *string
}

type AIPTaskCollection []*AIPTask

// AIPWorkflow describes a workflow of an AIP.
type AIPWorkflow struct {
	UUID        uuid.UUID
	TemporalID  string
	Type        string
	Status      string
	StartedAt   *string
	CompletedAt *string
	Tasks       AIPTaskCollection
}

type AIPWorkflowCollection []*AIPWorkflow

// AIPWorkflows is the result type of the storage service list_aip_workflows
// method.
type AIPWorkflows struct {
	Workflows AIPWorkflowCollection
}

// AIPs is the result type of the storage service list_aips method.
type AIPs struct {
	Items AIPCollection
	Page  *EnduroPage
}

type AMSSConfig struct {
	APIKey   string
	URL      string
	Username string
}

// CancelAipDeletionPayload is the payload type of the storage service
// cancel_aip_deletion method.
type CancelAipDeletionPayload struct {
	// Identifier of AIP
	UUID  string
	Token *string
	// If check is true, check user authorization to cancel deletion but don't
	// execute the cancellation.
	Check *bool
}

// CreateAipPayload is the payload type of the storage service create_aip
// method.
type CreateAipPayload struct {
	// Identifier of the AIP
	UUID string
	// Name of the AIP
	Name string
	// ObjectKey of the AIP
	ObjectKey string
	// Status of the the AIP
	Status string
	// Identifier of the AIP's storage location
	LocationID *uuid.UUID
	Token      *string
}

// CreateLocationPayload is the payload type of the storage service
// create_location method.
type CreateLocationPayload struct {
	Name        string
	Description *string
	Source      string
	Purpose     string
	Config      interface {
		configVal()
	}
	Token *string
}

// CreateLocationResult is the result type of the storage service
// create_location method.
type CreateLocationResult struct {
	UUID string
}

// DownloadAipPayload is the payload type of the storage service download_aip
// method.
type DownloadAipPayload struct {
	// Identifier of AIP
	UUID  string
	Token *string
}

// Page represents a subset of search results.
type EnduroPage struct {
	// Maximum items per page
	Limit int
	// Offset from first result to start of page
	Offset int
	// Total result count before paging
	Total int
}

// ListAipWorkflowsPayload is the payload type of the storage service
// list_aip_workflows method.
type ListAipWorkflowsPayload struct {
	// Identifier of AIP
	UUID   string
	Status *string
	Type   *string
	Token  *string
}

// ListAipsPayload is the payload type of the storage service list_aips method.
type ListAipsPayload struct {
	Name                *string
	EarliestCreatedTime *string
	LatestCreatedTime   *string
	Status              *string
	// Limit number of results to return
	Limit *int
	// Offset from the beginning of the found set
	Offset *int
	Token  *string
}

// ListLocationAipsPayload is the payload type of the storage service
// list_location_aips method.
type ListLocationAipsPayload struct {
	// Identifier of location
	UUID  string
	Token *string
}

// ListLocationsPayload is the payload type of the storage service
// list_locations method.
type ListLocationsPayload struct {
	Token *string
}

// Location is the result type of the storage service show_location method.
type Location struct {
	// Name of location
	Name string
	// Description of the location
	Description *string
	// Data source of the location
	Source string
	// Purpose of the location
	Purpose string
	UUID    uuid.UUID
	Config  interface {
		configVal()
	}
	// Creation datetime
	CreatedAt string
}

// LocationCollection is the result type of the storage service list_locations
// method.
type LocationCollection []*Location

// Storage location not found.
type LocationNotFound struct {
	// Message of error
	Message string
	UUID    uuid.UUID
}

type MonitorPingEvent struct {
	Message *string
}

// MoveAipPayload is the payload type of the storage service move_aip method.
type MoveAipPayload struct {
	// Identifier of AIP
	UUID string
	// Identifier of storage location
	LocationID uuid.UUID
	Token      *string
}

// MoveAipStatusPayload is the payload type of the storage service
// move_aip_status method.
type MoveAipStatusPayload struct {
	// Identifier of AIP
	UUID  string
	Token *string
}

// MoveStatusResult is the result type of the storage service move_aip_status
// method.
type MoveStatusResult struct {
	Done bool
}

// RejectAipPayload is the payload type of the storage service reject_aip
// method.
type RejectAipPayload struct {
	// Identifier of AIP
	UUID  string
	Token *string
}

// RequestAipDeletionPayload is the payload type of the storage service
// request_aip_deletion method.
type RequestAipDeletionPayload struct {
	// Identifier of AIP
	UUID   string
	Token  *string
	Reason string
}

// ReviewAipDeletionPayload is the payload type of the storage service
// review_aip_deletion method.
type ReviewAipDeletionPayload struct {
	// Identifier of AIP
	UUID     string
	Token    *string
	Approved bool
}

type S3Config struct {
	Bucket    string
	Region    string
	Endpoint  *string
	PathStyle *bool
	Profile   *string
	Key       *string
	Secret    *string
	Token     *string
}

type SFTPConfig struct {
	Address   string
	Username  string
	Password  string
	Directory string
}

// SIP describes an ingest SIP type.
type SIP struct {
	// Identifier of SIP
	UUID uuid.UUID
	// Name of the SIP
	Name *string
	// Status of the SIP
	Status string
	// Identifier of AIP
	AipID *string
	// Creation datetime
	CreatedAt string
	// Start datetime
	StartedAt *string
	// Completion datetime
	CompletedAt *string
	// Package type in case of failure (SIP or PIP)
	FailedAs *string
	// Object key of the failed package in the internal bucket
	FailedKey *string
	// UUID of the user who uploaded the SIP
	UploaderUUID *uuid.UUID
	// Email of the user who uploaded the SIP
	UploaderEmail *string
	// Name of the user who uploaded the SIP
	UploaderName *string
}

type SIPCreatedEvent struct {
	// Identifier of SIP
	UUID uuid.UUID
	Item *SIP
}

type SIPStatusUpdatedEvent struct {
	// Identifier of SIP
	UUID   uuid.UUID
	Status string
}

// SIPTask describes a SIP workflow task.
type SIPTask struct {
	ID          uint
	TaskID      string
	Name        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Note        *string
	WorkflowID  *uint
}

type SIPTaskCollection []*SIPTask

type SIPTaskCreatedEvent struct {
	// Identifier of task
	ID   uint
	Item *SIPTask
}

type SIPTaskUpdatedEvent struct {
	// Identifier of task
	ID   uint
	Item *SIPTask
}

type SIPUpdatedEvent struct {
	// Identifier of SIP
	UUID uuid.UUID
	Item *SIP
}

// SIPWorkflow describes a workflow of a SIP.
type SIPWorkflow struct {
	ID          uint
	TemporalID  string
	Type        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Tasks       SIPTaskCollection
	// Identifier of related SIP
	SipUUID uuid.UUID
}

type SIPWorkflowCreatedEvent struct {
	// Identifier of workflow
	ID   uint
	Item *SIPWorkflow
}

type SIPWorkflowUpdatedEvent struct {
	// Identifier of workflow
	ID   uint
	Item *SIPWorkflow
}

// ShowAipPayload is the payload type of the storage service show_aip method.
type ShowAipPayload struct {
	// Identifier of AIP
	UUID  string
	Token *string
}

// ShowLocationPayload is the payload type of the storage service show_location
// method.
type ShowLocationPayload struct {
	// Identifier of location
	UUID  string
	Token *string
}

// SubmitAIPResult is the result type of the storage service submit_aip method.
type SubmitAIPResult struct {
	URL string
}

// SubmitAipPayload is the payload type of the storage service submit_aip
// method.
type SubmitAipPayload struct {
	// Identifier of AIP
	UUID  string
	Name  string
	Token *string
}

type URLConfig struct {
	URL string
}

// UpdateAipPayload is the payload type of the storage service update_aip
// method.
type UpdateAipPayload struct {
	// Identifier of AIP
	UUID  string
	Token *string
}

// Forbidden
type Forbidden string

// Unauthorized
type Unauthorized string

// Error returns an error description.
func (e *AIPNotFound) Error() string {
	return "AIP not found."
}

// ErrorName returns "AIPNotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *AIPNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "AIPNotFound".
func (e *AIPNotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *LocationNotFound) Error() string {
	return "Storage location not found."
}

// ErrorName returns "LocationNotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *LocationNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "LocationNotFound".
func (e *LocationNotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e Forbidden) Error() string {
	return "Forbidden"
}

// ErrorName returns "forbidden".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Forbidden) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "forbidden".
func (e Forbidden) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
func (*AMSSConfig) configVal() {}
func (*S3Config) configVal()   {}
func (*SFTPConfig) configVal() {}
func (*URLConfig) configVal()  {}

// MakeNotAvailable builds a goa.ServiceError from an error.
func MakeNotAvailable(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_available", false, false, false)
}

// MakeNotValid builds a goa.ServiceError from an error.
func MakeNotValid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_valid", false, false, false)
}

// MakeFailedDependency builds a goa.ServiceError from an error.
func MakeFailedDependency(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "failed_dependency", false, false, false)
}

// NewAIPs initializes result type AIPs from viewed result type AIPs.
func NewAIPs(vres *storageviews.AIPs) *AIPs {
	return newAIPs(vres.Projected)
}

// NewViewedAIPs initializes viewed result type AIPs from result type AIPs
// using the given view.
func NewViewedAIPs(res *AIPs, view string) *storageviews.AIPs {
	p := newAIPsView(res)
	return &storageviews.AIPs{Projected: p, View: "default"}
}

// NewAIP initializes result type AIP from viewed result type AIP.
func NewAIP(vres *storageviews.AIP) *AIP {
	return newAIP(vres.Projected)
}

// NewViewedAIP initializes viewed result type AIP from result type AIP using
// the given view.
func NewViewedAIP(res *AIP, view string) *storageviews.AIP {
	p := newAIPView(res)
	return &storageviews.AIP{Projected: p, View: "default"}
}

// NewAIPWorkflows initializes result type AIPWorkflows from viewed result type
// AIPWorkflows.
func NewAIPWorkflows(vres *storageviews.AIPWorkflows) *AIPWorkflows {
	return newAIPWorkflows(vres.Projected)
}

// NewViewedAIPWorkflows initializes viewed result type AIPWorkflows from
// result type AIPWorkflows using the given view.
func NewViewedAIPWorkflows(res *AIPWorkflows, view string) *storageviews.AIPWorkflows {
	p := newAIPWorkflowsView(res)
	return &storageviews.AIPWorkflows{Projected: p, View: "default"}
}

// NewLocationCollection initializes result type LocationCollection from viewed
// result type LocationCollection.
func NewLocationCollection(vres storageviews.LocationCollection) LocationCollection {
	return newLocationCollection(vres.Projected)
}

// NewViewedLocationCollection initializes viewed result type
// LocationCollection from result type LocationCollection using the given view.
func NewViewedLocationCollection(res LocationCollection, view string) storageviews.LocationCollection {
	p := newLocationCollectionView(res)
	return storageviews.LocationCollection{Projected: p, View: "default"}
}

// NewLocation initializes result type Location from viewed result type
// Location.
func NewLocation(vres *storageviews.Location) *Location {
	return newLocation(vres.Projected)
}

// NewViewedLocation initializes viewed result type Location from result type
// Location using the given view.
func NewViewedLocation(res *Location, view string) *storageviews.Location {
	p := newLocationView(res)
	return &storageviews.Location{Projected: p, View: "default"}
}

// NewAIPCollection initializes result type AIPCollection from viewed result
// type AIPCollection.
func NewAIPCollection(vres storageviews.AIPCollection) AIPCollection {
	return newAIPCollection(vres.Projected)
}

// NewViewedAIPCollection initializes viewed result type AIPCollection from
// result type AIPCollection using the given view.
func NewViewedAIPCollection(res AIPCollection, view string) storageviews.AIPCollection {
	p := newAIPCollectionView(res)
	return storageviews.AIPCollection{Projected: p, View: "default"}
}

// newAIPs converts projected type AIPs to service type AIPs.
func newAIPs(vres *storageviews.AIPsView) *AIPs {
	res := &AIPs{}
	if vres.Items != nil {
		res.Items = newAIPCollection(vres.Items)
	}
	if vres.Page != nil {
		res.Page = newEnduroPage(vres.Page)
	}
	return res
}

// newAIPsView projects result type AIPs to projected type AIPsView using the
// "default" view.
func newAIPsView(res *AIPs) *storageviews.AIPsView {
	vres := &storageviews.AIPsView{}
	if res.Items != nil {
		vres.Items = newAIPCollectionView(res.Items)
	}
	if res.Page != nil {
		vres.Page = newEnduroPageView(res.Page)
	}
	return vres
}

// newAIPCollection converts projected type AIPCollection to service type
// AIPCollection.
func newAIPCollection(vres storageviews.AIPCollectionView) AIPCollection {
	res := make(AIPCollection, len(vres))
	for i, n := range vres {
		res[i] = newAIP(n)
	}
	return res
}

// newAIPCollectionView projects result type AIPCollection to projected type
// AIPCollectionView using the "default" view.
func newAIPCollectionView(res AIPCollection) storageviews.AIPCollectionView {
	vres := make(storageviews.AIPCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAIPView(n)
	}
	return vres
}

// newAIP converts projected type AIP to service type AIP.
func newAIP(vres *storageviews.AIPView) *AIP {
	res := &AIP{
		LocationID: vres.LocationID,
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.ObjectKey != nil {
		res.ObjectKey = *vres.ObjectKey
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Status == nil {
		res.Status = "unspecified"
	}
	return res
}

// newAIPView projects result type AIP to projected type AIPView using the
// "default" view.
func newAIPView(res *AIP) *storageviews.AIPView {
	vres := &storageviews.AIPView{
		Name:       &res.Name,
		UUID:       &res.UUID,
		Status:     &res.Status,
		ObjectKey:  &res.ObjectKey,
		LocationID: res.LocationID,
		CreatedAt:  &res.CreatedAt,
	}
	return vres
}

// newEnduroPage converts projected type EnduroPage to service type EnduroPage.
func newEnduroPage(vres *storageviews.EnduroPageView) *EnduroPage {
	res := &EnduroPage{}
	if vres.Limit != nil {
		res.Limit = *vres.Limit
	}
	if vres.Offset != nil {
		res.Offset = *vres.Offset
	}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	return res
}

// newEnduroPageView projects result type EnduroPage to projected type
// EnduroPageView using the "default" view.
func newEnduroPageView(res *EnduroPage) *storageviews.EnduroPageView {
	vres := &storageviews.EnduroPageView{
		Limit:  &res.Limit,
		Offset: &res.Offset,
		Total:  &res.Total,
	}
	return vres
}

// newAIPWorkflows converts projected type AIPWorkflows to service type
// AIPWorkflows.
func newAIPWorkflows(vres *storageviews.AIPWorkflowsView) *AIPWorkflows {
	res := &AIPWorkflows{}
	if vres.Workflows != nil {
		res.Workflows = newAIPWorkflowCollection(vres.Workflows)
	}
	return res
}

// newAIPWorkflowsView projects result type AIPWorkflows to projected type
// AIPWorkflowsView using the "default" view.
func newAIPWorkflowsView(res *AIPWorkflows) *storageviews.AIPWorkflowsView {
	vres := &storageviews.AIPWorkflowsView{}
	if res.Workflows != nil {
		vres.Workflows = newAIPWorkflowCollectionView(res.Workflows)
	}
	return vres
}

// newAIPWorkflowCollectionSimple converts projected type AIPWorkflowCollection
// to service type AIPWorkflowCollection.
func newAIPWorkflowCollectionSimple(vres storageviews.AIPWorkflowCollectionView) AIPWorkflowCollection {
	res := make(AIPWorkflowCollection, len(vres))
	for i, n := range vres {
		res[i] = newAIPWorkflowSimple(n)
	}
	return res
}

// newAIPWorkflowCollection converts projected type AIPWorkflowCollection to
// service type AIPWorkflowCollection.
func newAIPWorkflowCollection(vres storageviews.AIPWorkflowCollectionView) AIPWorkflowCollection {
	res := make(AIPWorkflowCollection, len(vres))
	for i, n := range vres {
		res[i] = newAIPWorkflow(n)
	}
	return res
}

// newAIPWorkflowCollectionViewSimple projects result type
// AIPWorkflowCollection to projected type AIPWorkflowCollectionView using the
// "simple" view.
func newAIPWorkflowCollectionViewSimple(res AIPWorkflowCollection) storageviews.AIPWorkflowCollectionView {
	vres := make(storageviews.AIPWorkflowCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAIPWorkflowViewSimple(n)
	}
	return vres
}

// newAIPWorkflowCollectionView projects result type AIPWorkflowCollection to
// projected type AIPWorkflowCollectionView using the "default" view.
func newAIPWorkflowCollectionView(res AIPWorkflowCollection) storageviews.AIPWorkflowCollectionView {
	vres := make(storageviews.AIPWorkflowCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAIPWorkflowView(n)
	}
	return vres
}

// newAIPWorkflowSimple converts projected type AIPWorkflow to service type
// AIPWorkflow.
func newAIPWorkflowSimple(vres *storageviews.AIPWorkflowView) *AIPWorkflow {
	res := &AIPWorkflow{
		StartedAt:   vres.StartedAt,
		CompletedAt: vres.CompletedAt,
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.TemporalID != nil {
		res.TemporalID = *vres.TemporalID
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Tasks != nil {
		res.Tasks = newAIPTaskCollection(vres.Tasks)
	}
	return res
}

// newAIPWorkflow converts projected type AIPWorkflow to service type
// AIPWorkflow.
func newAIPWorkflow(vres *storageviews.AIPWorkflowView) *AIPWorkflow {
	res := &AIPWorkflow{
		StartedAt:   vres.StartedAt,
		CompletedAt: vres.CompletedAt,
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.TemporalID != nil {
		res.TemporalID = *vres.TemporalID
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Tasks != nil {
		res.Tasks = newAIPTaskCollection(vres.Tasks)
	}
	return res
}

// newAIPWorkflowViewSimple projects result type AIPWorkflow to projected type
// AIPWorkflowView using the "simple" view.
func newAIPWorkflowViewSimple(res *AIPWorkflow) *storageviews.AIPWorkflowView {
	vres := &storageviews.AIPWorkflowView{
		UUID:        &res.UUID,
		TemporalID:  &res.TemporalID,
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   res.StartedAt,
		CompletedAt: res.CompletedAt,
	}
	return vres
}

// newAIPWorkflowView projects result type AIPWorkflow to projected type
// AIPWorkflowView using the "default" view.
func newAIPWorkflowView(res *AIPWorkflow) *storageviews.AIPWorkflowView {
	vres := &storageviews.AIPWorkflowView{
		UUID:        &res.UUID,
		TemporalID:  &res.TemporalID,
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   res.StartedAt,
		CompletedAt: res.CompletedAt,
	}
	if res.Tasks != nil {
		vres.Tasks = newAIPTaskCollectionView(res.Tasks)
	}
	return vres
}

// newAIPTaskCollection converts projected type AIPTaskCollection to service
// type AIPTaskCollection.
func newAIPTaskCollection(vres storageviews.AIPTaskCollectionView) AIPTaskCollection {
	res := make(AIPTaskCollection, len(vres))
	for i, n := range vres {
		res[i] = newAIPTask(n)
	}
	return res
}

// newAIPTaskCollectionView projects result type AIPTaskCollection to projected
// type AIPTaskCollectionView using the "default" view.
func newAIPTaskCollectionView(res AIPTaskCollection) storageviews.AIPTaskCollectionView {
	vres := make(storageviews.AIPTaskCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAIPTaskView(n)
	}
	return vres
}

// newAIPTask converts projected type AIPTask to service type AIPTask.
func newAIPTask(vres *storageviews.AIPTaskView) *AIPTask {
	res := &AIPTask{
		StartedAt:   vres.StartedAt,
		CompletedAt: vres.CompletedAt,
		Note:        vres.Note,
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	return res
}

// newAIPTaskView projects result type AIPTask to projected type AIPTaskView
// using the "default" view.
func newAIPTaskView(res *AIPTask) *storageviews.AIPTaskView {
	vres := &storageviews.AIPTaskView{
		UUID:        &res.UUID,
		Name:        &res.Name,
		Status:      &res.Status,
		StartedAt:   res.StartedAt,
		CompletedAt: res.CompletedAt,
		Note:        res.Note,
	}
	return vres
}

// newLocationCollection converts projected type LocationCollection to service
// type LocationCollection.
func newLocationCollection(vres storageviews.LocationCollectionView) LocationCollection {
	res := make(LocationCollection, len(vres))
	for i, n := range vres {
		res[i] = newLocation(n)
	}
	return res
}

// newLocationCollectionView projects result type LocationCollection to
// projected type LocationCollectionView using the "default" view.
func newLocationCollectionView(res LocationCollection) storageviews.LocationCollectionView {
	vres := make(storageviews.LocationCollectionView, len(res))
	for i, n := range res {
		vres[i] = newLocationView(n)
	}
	return vres
}

// newLocation converts projected type Location to service type Location.
func newLocation(vres *storageviews.LocationView) *Location {
	res := &Location{
		Description: vres.Description,
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Source != nil {
		res.Source = *vres.Source
	}
	if vres.Purpose != nil {
		res.Purpose = *vres.Purpose
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Source == nil {
		res.Source = "unspecified"
	}
	if vres.Purpose == nil {
		res.Purpose = "unspecified"
	}
	return res
}

// newLocationView projects result type Location to projected type LocationView
// using the "default" view.
func newLocationView(res *Location) *storageviews.LocationView {
	vres := &storageviews.LocationView{
		Name:        &res.Name,
		Description: res.Description,
		Source:      &res.Source,
		Purpose:     &res.Purpose,
		UUID:        &res.UUID,
		CreatedAt:   &res.CreatedAt,
	}
	return vres
}
