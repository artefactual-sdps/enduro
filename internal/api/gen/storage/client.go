// Code generated by goa v3.7.6, DO NOT EDIT.
//
// storage client
//
// Command:
// $ goa-v3.7.6 gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package storage

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "storage" service client.
type Client struct {
	SubmitEndpoint goa.Endpoint
	UpdateEndpoint goa.Endpoint
}

// NewClient initializes a "storage" service client given the endpoints.
func NewClient(submit, update goa.Endpoint) *Client {
	return &Client{
		SubmitEndpoint: submit,
		UpdateEndpoint: update,
	}
}

// Submit calls the "submit" endpoint of the "storage" service.
// Submit may return the following errors:
//	- "not_available" (type *goa.ServiceError)
//	- "not_valid" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Submit(ctx context.Context, p *SubmitPayload) (res *SubmitResult, err error) {
	var ires interface{}
	ires, err = c.SubmitEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SubmitResult), nil
}

// Update calls the "update" endpoint of the "storage" service.
// Update may return the following errors:
//	- "not_available" (type *goa.ServiceError)
//	- "not_valid" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Update(ctx context.Context, p *UpdatePayload) (res *UpdateResult, err error) {
	var ires interface{}
	ires, err = c.UpdateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateResult), nil
}
