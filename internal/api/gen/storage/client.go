// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage client
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package storage

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "storage" service client.
type Client struct {
	ListAipsEndpoint           goa.Endpoint
	CreateAipEndpoint          goa.Endpoint
	SubmitAipEndpoint          goa.Endpoint
	UpdateAipEndpoint          goa.Endpoint
	DownloadAipRequestEndpoint goa.Endpoint
	DownloadAipEndpoint        goa.Endpoint
	MoveAipEndpoint            goa.Endpoint
	MoveAipStatusEndpoint      goa.Endpoint
	RejectAipEndpoint          goa.Endpoint
	ShowAipEndpoint            goa.Endpoint
	ListAipWorkflowsEndpoint   goa.Endpoint
	RequestAipDeletionEndpoint goa.Endpoint
	ReviewAipDeletionEndpoint  goa.Endpoint
	CancelAipDeletionEndpoint  goa.Endpoint
	ListLocationsEndpoint      goa.Endpoint
	CreateLocationEndpoint     goa.Endpoint
	ShowLocationEndpoint       goa.Endpoint
	ListLocationAipsEndpoint   goa.Endpoint
	MonitorRequestEndpoint     goa.Endpoint
	MonitorEndpoint            goa.Endpoint
}

// NewClient initializes a "storage" service client given the endpoints.
func NewClient(listAips, createAip, submitAip, updateAip, downloadAipRequest, downloadAip, moveAip, moveAipStatus, rejectAip, showAip, listAipWorkflows, requestAipDeletion, reviewAipDeletion, cancelAipDeletion, listLocations, createLocation, showLocation, listLocationAips, monitorRequest, monitor goa.Endpoint) *Client {
	return &Client{
		ListAipsEndpoint:           listAips,
		CreateAipEndpoint:          createAip,
		SubmitAipEndpoint:          submitAip,
		UpdateAipEndpoint:          updateAip,
		DownloadAipRequestEndpoint: downloadAipRequest,
		DownloadAipEndpoint:        downloadAip,
		MoveAipEndpoint:            moveAip,
		MoveAipStatusEndpoint:      moveAipStatus,
		RejectAipEndpoint:          rejectAip,
		ShowAipEndpoint:            showAip,
		ListAipWorkflowsEndpoint:   listAipWorkflows,
		RequestAipDeletionEndpoint: requestAipDeletion,
		ReviewAipDeletionEndpoint:  reviewAipDeletion,
		CancelAipDeletionEndpoint:  cancelAipDeletion,
		ListLocationsEndpoint:      listLocations,
		CreateLocationEndpoint:     createLocation,
		ShowLocationEndpoint:       showLocation,
		ListLocationAipsEndpoint:   listLocationAips,
		MonitorRequestEndpoint:     monitorRequest,
		MonitorEndpoint:            monitor,
	}
}

// ListAips calls the "list_aips" endpoint of the "storage" service.
// ListAips may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ListAips(ctx context.Context, p *ListAipsPayload) (res *AIPs, err error) {
	var ires any
	ires, err = c.ListAipsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AIPs), nil
}

// CreateAip calls the "create_aip" endpoint of the "storage" service.
// CreateAip may return the following errors:
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) CreateAip(ctx context.Context, p *CreateAipPayload) (res *AIP, err error) {
	var ires any
	ires, err = c.CreateAipEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AIP), nil
}

// SubmitAip calls the "submit_aip" endpoint of the "storage" service.
// SubmitAip may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) SubmitAip(ctx context.Context, p *SubmitAipPayload) (res *SubmitAIPResult, err error) {
	var ires any
	ires, err = c.SubmitAipEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SubmitAIPResult), nil
}

// UpdateAip calls the "update_aip" endpoint of the "storage" service.
// UpdateAip may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) UpdateAip(ctx context.Context, p *UpdateAipPayload) (err error) {
	_, err = c.UpdateAipEndpoint(ctx, p)
	return
}

// DownloadAipRequest calls the "download_aip_request" endpoint of the
// "storage" service.
// DownloadAipRequest may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "not_valid" (type *goa.ServiceError)
//   - "internal_error" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) DownloadAipRequest(ctx context.Context, p *DownloadAipRequestPayload) (res *DownloadAipRequestResult, err error) {
	var ires any
	ires, err = c.DownloadAipRequestEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DownloadAipRequestResult), nil
}

// DownloadAip calls the "download_aip" endpoint of the "storage" service.
// DownloadAip may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "not_valid" (type *goa.ServiceError)
//   - "internal_error" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) DownloadAip(ctx context.Context, p *DownloadAipPayload) (res *DownloadAipResult, resp io.ReadCloser, err error) {
	var ires any
	ires, err = c.DownloadAipEndpoint(ctx, p)
	if err != nil {
		return
	}
	o := ires.(*DownloadAipResponseData)
	return o.Result, o.Body, nil
}

// MoveAip calls the "move_aip" endpoint of the "storage" service.
// MoveAip may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) MoveAip(ctx context.Context, p *MoveAipPayload) (err error) {
	_, err = c.MoveAipEndpoint(ctx, p)
	return
}

// MoveAipStatus calls the "move_aip_status" endpoint of the "storage" service.
// MoveAipStatus may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "failed_dependency" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) MoveAipStatus(ctx context.Context, p *MoveAipStatusPayload) (res *MoveStatusResult, err error) {
	var ires any
	ires, err = c.MoveAipStatusEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MoveStatusResult), nil
}

// RejectAip calls the "reject_aip" endpoint of the "storage" service.
// RejectAip may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) RejectAip(ctx context.Context, p *RejectAipPayload) (err error) {
	_, err = c.RejectAipEndpoint(ctx, p)
	return
}

// ShowAip calls the "show_aip" endpoint of the "storage" service.
// ShowAip may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ShowAip(ctx context.Context, p *ShowAipPayload) (res *AIP, err error) {
	var ires any
	ires, err = c.ShowAipEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AIP), nil
}

// ListAipWorkflows calls the "list_aip_workflows" endpoint of the "storage"
// service.
// ListAipWorkflows may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ListAipWorkflows(ctx context.Context, p *ListAipWorkflowsPayload) (res *AIPWorkflows, err error) {
	var ires any
	ires, err = c.ListAipWorkflowsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AIPWorkflows), nil
}

// RequestAipDeletion calls the "request_aip_deletion" endpoint of the
// "storage" service.
// RequestAipDeletion may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) RequestAipDeletion(ctx context.Context, p *RequestAipDeletionPayload) (err error) {
	_, err = c.RequestAipDeletionEndpoint(ctx, p)
	return
}

// ReviewAipDeletion calls the "review_aip_deletion" endpoint of the "storage"
// service.
// ReviewAipDeletion may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ReviewAipDeletion(ctx context.Context, p *ReviewAipDeletionPayload) (err error) {
	_, err = c.ReviewAipDeletionEndpoint(ctx, p)
	return
}

// CancelAipDeletion calls the "cancel_aip_deletion" endpoint of the "storage"
// service.
// CancelAipDeletion may return the following errors:
//   - "not_found" (type *AIPNotFound): AIP not found
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) CancelAipDeletion(ctx context.Context, p *CancelAipDeletionPayload) (err error) {
	_, err = c.CancelAipDeletionEndpoint(ctx, p)
	return
}

// ListLocations calls the "list_locations" endpoint of the "storage" service.
// ListLocations may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ListLocations(ctx context.Context, p *ListLocationsPayload) (res LocationCollection, err error) {
	var ires any
	ires, err = c.ListLocationsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(LocationCollection), nil
}

// CreateLocation calls the "create_location" endpoint of the "storage" service.
// CreateLocation may return the following errors:
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) CreateLocation(ctx context.Context, p *CreateLocationPayload) (res *CreateLocationResult, err error) {
	var ires any
	ires, err = c.CreateLocationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateLocationResult), nil
}

// ShowLocation calls the "show_location" endpoint of the "storage" service.
// ShowLocation may return the following errors:
//   - "not_found" (type *LocationNotFound): Storage location not found
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ShowLocation(ctx context.Context, p *ShowLocationPayload) (res *Location, err error) {
	var ires any
	ires, err = c.ShowLocationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Location), nil
}

// ListLocationAips calls the "list_location_aips" endpoint of the "storage"
// service.
// ListLocationAips may return the following errors:
//   - "not_found" (type *LocationNotFound): Storage location not found
//   - "not_valid" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) ListLocationAips(ctx context.Context, p *ListLocationAipsPayload) (res AIPCollection, err error) {
	var ires any
	ires, err = c.ListLocationAipsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(AIPCollection), nil
}

// MonitorRequest calls the "monitor_request" endpoint of the "storage" service.
// MonitorRequest may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) MonitorRequest(ctx context.Context, p *MonitorRequestPayload) (res *MonitorRequestResult, err error) {
	var ires any
	ires, err = c.MonitorRequestEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MonitorRequestResult), nil
}

// Monitor calls the "monitor" endpoint of the "storage" service.
// Monitor may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "forbidden" (type Forbidden)
//   - error: internal error
func (c *Client) Monitor(ctx context.Context, p *MonitorPayload) (res MonitorClientStream, err error) {
	var ires any
	ires, err = c.MonitorEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(MonitorClientStream), nil
}
