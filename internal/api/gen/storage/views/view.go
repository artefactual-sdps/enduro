// Code generated by goa v3.8.4, DO NOT EDIT.
//
// storage views
//
// Command:
// $ goa-v3.8.4 gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package views

import (
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// LocationCollection is the viewed result type that is projected based on a
// view.
type LocationCollection struct {
	// Type to project
	Projected LocationCollectionView
	// View to render
	View string
}

// StoredStoragePackage is the viewed result type that is projected based on a
// view.
type StoredStoragePackage struct {
	// Type to project
	Projected *StoredStoragePackageView
	// View to render
	View string
}

// Location is the viewed result type that is projected based on a view.
type Location struct {
	// Type to project
	Projected *LocationView
	// View to render
	View string
}

// StoredStoragePackageCollection is the viewed result type that is projected
// based on a view.
type StoredStoragePackageCollection struct {
	// Type to project
	Projected StoredStoragePackageCollectionView
	// View to render
	View string
}

// LocationCollectionView is a type that runs validations on a projected type.
type LocationCollectionView []*LocationView

// LocationView is a type that runs validations on a projected type.
type LocationView struct {
	// Name of location
	Name *string
	// Description of the location
	Description *string
	// Data source of the location
	Source *string
	// Purpose of the location
	Purpose *string
	UUID    *uuid.UUID
	Config  interface {
		configVal()
	}
	// Creation datetime
	CreatedAt *string
}

// S3ConfigView is a type that runs validations on a projected type.
type S3ConfigView struct {
	Bucket    *string
	Region    *string
	Endpoint  *string
	PathStyle *bool
	Profile   *string
	Key       *string
	Secret    *string
	Token     *string
}

// StoredStoragePackageView is a type that runs validations on a projected type.
type StoredStoragePackageView struct {
	Name  *string
	AipID *uuid.UUID
	// Status of the package
	Status     *string
	ObjectKey  *uuid.UUID
	LocationID *uuid.UUID
	// Creation datetime
	CreatedAt *string
}

// StoredStoragePackageCollectionView is a type that runs validations on a
// projected type.
type StoredStoragePackageCollectionView []*StoredStoragePackageView

func (*S3ConfigView) configVal() {}

var (
	// LocationCollectionMap is a map indexing the attribute names of
	// LocationCollection by view name.
	LocationCollectionMap = map[string][]string{
		"default": {
			"name",
			"description",
			"source",
			"purpose",
			"uuid",
			"created_at",
		},
	}
	// StoredStoragePackageMap is a map indexing the attribute names of
	// StoredStoragePackage by view name.
	StoredStoragePackageMap = map[string][]string{
		"default": {
			"name",
			"aip_id",
			"status",
			"object_key",
			"location_id",
			"created_at",
		},
	}
	// LocationMap is a map indexing the attribute names of Location by view name.
	LocationMap = map[string][]string{
		"default": {
			"name",
			"description",
			"source",
			"purpose",
			"uuid",
			"created_at",
		},
	}
	// StoredStoragePackageCollectionMap is a map indexing the attribute names of
	// StoredStoragePackageCollection by view name.
	StoredStoragePackageCollectionMap = map[string][]string{
		"default": {
			"name",
			"aip_id",
			"status",
			"object_key",
			"location_id",
			"created_at",
		},
	}
)

// ValidateLocationCollection runs the validations defined on the viewed result
// type LocationCollection.
func ValidateLocationCollection(result LocationCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateLocationCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredStoragePackage runs the validations defined on the viewed
// result type StoredStoragePackage.
func ValidateStoredStoragePackage(result *StoredStoragePackage) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredStoragePackageView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateLocation runs the validations defined on the viewed result type
// Location.
func ValidateLocation(result *Location) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateLocationView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredStoragePackageCollection runs the validations defined on the
// viewed result type StoredStoragePackageCollection.
func ValidateStoredStoragePackageCollection(result StoredStoragePackageCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredStoragePackageCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateLocationCollectionView runs the validations defined on
// LocationCollectionView using the "default" view.
func ValidateLocationCollectionView(result LocationCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateLocationView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLocationView runs the validations defined on LocationView using the
// "default" view.
func ValidateLocationView(result *LocationView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "result"))
	}
	if result.Purpose == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purpose", "result"))
	}
	if result.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.Source != nil {
		if !(*result.Source == "unspecified" || *result.Source == "minio") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.source", *result.Source, []interface{}{"unspecified", "minio"}))
		}
	}
	if result.Purpose != nil {
		if !(*result.Purpose == "unspecified" || *result.Purpose == "aip_store") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.purpose", *result.Purpose, []interface{}{"unspecified", "aip_store"}))
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateS3ConfigView runs the validations defined on S3ConfigView.
func ValidateS3ConfigView(result *S3ConfigView) (err error) {
	if result.Bucket == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bucket", "result"))
	}
	if result.Region == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("region", "result"))
	}
	return
}

// ValidateStoredStoragePackageView runs the validations defined on
// StoredStoragePackageView using the "default" view.
func ValidateStoredStoragePackageView(result *StoredStoragePackageView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.AipID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("aip_id", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.ObjectKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("object_key", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "unspecified" || *result.Status == "in_review" || *result.Status == "rejected" || *result.Status == "stored" || *result.Status == "moving") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"unspecified", "in_review", "rejected", "stored", "moving"}))
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateStoredStoragePackageCollectionView runs the validations defined on
// StoredStoragePackageCollectionView using the "default" view.
func ValidateStoredStoragePackageCollectionView(result StoredStoragePackageCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredStoragePackageView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
