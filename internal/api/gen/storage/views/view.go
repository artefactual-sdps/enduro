// Code generated by goa v3.7.6, DO NOT EDIT.
//
// storage views
//
// Command:
// $ goa-v3.7.6 gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StoredLocationCollection is the viewed result type that is projected based
// on a view.
type StoredLocationCollection struct {
	// Type to project
	Projected StoredLocationCollectionView
	// View to render
	View string
}

// StoredLocationCollectionView is a type that runs validations on a projected
// type.
type StoredLocationCollectionView []*StoredLocationView

// StoredLocationView is a type that runs validations on a projected type.
type StoredLocationView struct {
	// ID is the unique id of the location.
	ID *string
	// Name of location
	Name *string
}

var (
	// StoredLocationCollectionMap is a map indexing the attribute names of
	// StoredLocationCollection by view name.
	StoredLocationCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
	}
	// StoredLocationMap is a map indexing the attribute names of StoredLocation by
	// view name.
	StoredLocationMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
	}
)

// ValidateStoredLocationCollection runs the validations defined on the viewed
// result type StoredLocationCollection.
func ValidateStoredLocationCollection(result StoredLocationCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredLocationCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredLocationCollectionView runs the validations defined on
// StoredLocationCollectionView using the "default" view.
func ValidateStoredLocationCollectionView(result StoredLocationCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredLocationView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredLocationView runs the validations defined on
// StoredLocationView using the "default" view.
func ValidateStoredLocationView(result *StoredLocationView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
