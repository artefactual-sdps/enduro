// Code generated by goa v3.15.2, DO NOT EDIT.
//
// about service
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package about

import (
	"context"

	aboutviews "github.com/artefactual-sdps/enduro/internal/api/gen/about/views"
	"github.com/google/uuid"
	"goa.design/goa/v3/security"
)

// The about service provides information about the system.
type Service interface {
	// Get information about the system
	About(context.Context, *AboutPayload) (res *EnduroAbout, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "enduro"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "about"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"about"}

// AboutPayload is the payload type of the about service about method.
type AboutPayload struct {
	Token *string
}

// EnduroAbout is the result type of the about service about method.
type EnduroAbout struct {
	Version            string
	PreservationSystem string
	Preprocessing      *EnduroPreprocessing
	Poststorage        EnduroPoststorageCollection
	UploadMaxSize      int64
}

type EnduroPoststorage struct {
	WorkflowName string
	TaskQueue    string
}

type EnduroPoststorageCollection []*EnduroPoststorage

type EnduroPreprocessing struct {
	Enabled      bool
	WorkflowName string
	TaskQueue    string
}

type MonitorPingEvent struct {
	Message *string
}

// SIP describes an ingest SIP type.
type SIP struct {
	// Identifier of SIP
	UUID uuid.UUID
	// Name of the SIP
	Name *string
	// Status of the SIP
	Status string
	// Identifier of AIP
	AipUUID *string
	// Creation datetime
	CreatedAt string
	// Start datetime
	StartedAt *string
	// Completion datetime
	CompletedAt *string
	// Package type in case of failure (SIP or PIP)
	FailedAs *string
	// Object key of the failed package in the internal bucket
	FailedKey *string
	// UUID of the user who uploaded the SIP
	UploaderUUID *uuid.UUID
	// Email of the user who uploaded the SIP
	UploaderEmail *string
	// Name of the user who uploaded the SIP
	UploaderName *string
}

type SIPCreatedEvent struct {
	// Identifier of SIP
	UUID uuid.UUID
	Item *SIP
}

type SIPStatusUpdatedEvent struct {
	// Identifier of SIP
	UUID   uuid.UUID
	Status string
}

// SIPTask describes a SIP workflow task.
type SIPTask struct {
	// Identifier of the task
	UUID        uuid.UUID
	Name        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Note        *string
	// Identifier of related workflow
	WorkflowUUID uuid.UUID
}

type SIPTaskCollection []*SIPTask

type SIPTaskCreatedEvent struct {
	// Identifier of task
	UUID uuid.UUID
	Item *SIPTask
}

type SIPTaskUpdatedEvent struct {
	// Identifier of task
	UUID uuid.UUID
	Item *SIPTask
}

type SIPUpdatedEvent struct {
	// Identifier of SIP
	UUID uuid.UUID
	Item *SIP
}

// SIPWorkflow describes a workflow of a SIP.
type SIPWorkflow struct {
	// Identifier of the workflow
	UUID        uuid.UUID
	TemporalID  string
	Type        string
	Status      string
	StartedAt   string
	CompletedAt *string
	Tasks       SIPTaskCollection
	// Identifier of related SIP
	SipUUID uuid.UUID
}

type SIPWorkflowCreatedEvent struct {
	// Identifier of workflow
	UUID uuid.UUID
	Item *SIPWorkflow
}

type SIPWorkflowUpdatedEvent struct {
	// Identifier of workflow
	UUID uuid.UUID
	Item *SIPWorkflow
}

// Unauthorized
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// NewEnduroAbout initializes result type EnduroAbout from viewed result type
// EnduroAbout.
func NewEnduroAbout(vres *aboutviews.EnduroAbout) *EnduroAbout {
	return newEnduroAbout(vres.Projected)
}

// NewViewedEnduroAbout initializes viewed result type EnduroAbout from result
// type EnduroAbout using the given view.
func NewViewedEnduroAbout(res *EnduroAbout, view string) *aboutviews.EnduroAbout {
	p := newEnduroAboutView(res)
	return &aboutviews.EnduroAbout{Projected: p, View: "default"}
}

// newEnduroAbout converts projected type EnduroAbout to service type
// EnduroAbout.
func newEnduroAbout(vres *aboutviews.EnduroAboutView) *EnduroAbout {
	res := &EnduroAbout{}
	if vres.Version != nil {
		res.Version = *vres.Version
	}
	if vres.PreservationSystem != nil {
		res.PreservationSystem = *vres.PreservationSystem
	}
	if vres.UploadMaxSize != nil {
		res.UploadMaxSize = *vres.UploadMaxSize
	}
	if vres.Poststorage != nil {
		res.Poststorage = make([]*EnduroPoststorage, len(vres.Poststorage))
		for i, val := range vres.Poststorage {
			res.Poststorage[i] = transformAboutviewsEnduroPoststorageViewToEnduroPoststorage(val)
		}
	}
	if vres.Preprocessing != nil {
		res.Preprocessing = newEnduroPreprocessing(vres.Preprocessing)
	}
	return res
}

// newEnduroAboutView projects result type EnduroAbout to projected type
// EnduroAboutView using the "default" view.
func newEnduroAboutView(res *EnduroAbout) *aboutviews.EnduroAboutView {
	vres := &aboutviews.EnduroAboutView{
		Version:            &res.Version,
		PreservationSystem: &res.PreservationSystem,
		UploadMaxSize:      &res.UploadMaxSize,
	}
	if res.Poststorage != nil {
		vres.Poststorage = make([]*aboutviews.EnduroPoststorageView, len(res.Poststorage))
		for i, val := range res.Poststorage {
			vres.Poststorage[i] = transformEnduroPoststorageToAboutviewsEnduroPoststorageView(val)
		}
	}
	if res.Preprocessing != nil {
		vres.Preprocessing = newEnduroPreprocessingView(res.Preprocessing)
	}
	return vres
}

// newEnduroPreprocessing converts projected type EnduroPreprocessing to
// service type EnduroPreprocessing.
func newEnduroPreprocessing(vres *aboutviews.EnduroPreprocessingView) *EnduroPreprocessing {
	res := &EnduroPreprocessing{}
	if vres.Enabled != nil {
		res.Enabled = *vres.Enabled
	}
	if vres.WorkflowName != nil {
		res.WorkflowName = *vres.WorkflowName
	}
	if vres.TaskQueue != nil {
		res.TaskQueue = *vres.TaskQueue
	}
	return res
}

// newEnduroPreprocessingView projects result type EnduroPreprocessing to
// projected type EnduroPreprocessingView using the "default" view.
func newEnduroPreprocessingView(res *EnduroPreprocessing) *aboutviews.EnduroPreprocessingView {
	vres := &aboutviews.EnduroPreprocessingView{
		Enabled:      &res.Enabled,
		WorkflowName: &res.WorkflowName,
		TaskQueue:    &res.TaskQueue,
	}
	return vres
}

// newEnduroPoststorageCollection converts projected type
// EnduroPoststorageCollection to service type EnduroPoststorageCollection.
func newEnduroPoststorageCollection(vres aboutviews.EnduroPoststorageCollectionView) EnduroPoststorageCollection {
	res := make(EnduroPoststorageCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroPoststorage(n)
	}
	return res
}

// newEnduroPoststorageCollectionView projects result type
// EnduroPoststorageCollection to projected type
// EnduroPoststorageCollectionView using the "default" view.
func newEnduroPoststorageCollectionView(res EnduroPoststorageCollection) aboutviews.EnduroPoststorageCollectionView {
	vres := make(aboutviews.EnduroPoststorageCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroPoststorageView(n)
	}
	return vres
}

// newEnduroPoststorage converts projected type EnduroPoststorage to service
// type EnduroPoststorage.
func newEnduroPoststorage(vres *aboutviews.EnduroPoststorageView) *EnduroPoststorage {
	res := &EnduroPoststorage{}
	if vres.WorkflowName != nil {
		res.WorkflowName = *vres.WorkflowName
	}
	if vres.TaskQueue != nil {
		res.TaskQueue = *vres.TaskQueue
	}
	return res
}

// newEnduroPoststorageView projects result type EnduroPoststorage to projected
// type EnduroPoststorageView using the "default" view.
func newEnduroPoststorageView(res *EnduroPoststorage) *aboutviews.EnduroPoststorageView {
	vres := &aboutviews.EnduroPoststorageView{
		WorkflowName: &res.WorkflowName,
		TaskQueue:    &res.TaskQueue,
	}
	return vres
}

// transformAboutviewsEnduroPoststorageViewToEnduroPoststorage builds a value
// of type *EnduroPoststorage from a value of type
// *aboutviews.EnduroPoststorageView.
func transformAboutviewsEnduroPoststorageViewToEnduroPoststorage(v *aboutviews.EnduroPoststorageView) *EnduroPoststorage {
	if v == nil {
		return nil
	}
	res := &EnduroPoststorage{
		WorkflowName: *v.WorkflowName,
		TaskQueue:    *v.TaskQueue,
	}

	return res
}

// transformEnduroPoststorageToAboutviewsEnduroPoststorageView builds a value
// of type *aboutviews.EnduroPoststorageView from a value of type
// *EnduroPoststorage.
func transformEnduroPoststorageToAboutviewsEnduroPoststorageView(v *EnduroPoststorage) *aboutviews.EnduroPoststorageView {
	if v == nil {
		return nil
	}
	res := &aboutviews.EnduroPoststorageView{
		WorkflowName: &v.WorkflowName,
		TaskQueue:    &v.TaskQueue,
	}

	return res
}
