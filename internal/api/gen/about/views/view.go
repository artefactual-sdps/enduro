// Code generated by goa v3.15.2, DO NOT EDIT.
//
// about views
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// EnduroAbout is the viewed result type that is projected based on a view.
type EnduroAbout struct {
	// Type to project
	Projected *EnduroAboutView
	// View to render
	View string
}

// EnduroAboutView is a type that runs validations on a projected type.
type EnduroAboutView struct {
	Version            *string
	PreservationSystem *string
	Preprocessing      *EnduroPreprocessingView
	Poststorage        EnduroPoststorageCollectionView
	UploadMaxSize      *int64
}

// EnduroPreprocessingView is a type that runs validations on a projected type.
type EnduroPreprocessingView struct {
	Enabled      *bool
	WorkflowName *string
	TaskQueue    *string
}

// EnduroPoststorageCollectionView is a type that runs validations on a
// projected type.
type EnduroPoststorageCollectionView []*EnduroPoststorageView

// EnduroPoststorageView is a type that runs validations on a projected type.
type EnduroPoststorageView struct {
	WorkflowName *string
	TaskQueue    *string
}

var (
	// EnduroAboutMap is a map indexing the attribute names of EnduroAbout by view
	// name.
	EnduroAboutMap = map[string][]string{
		"default": {
			"version",
			"preservation_system",
			"preprocessing",
			"poststorage",
			"upload_max_size",
		},
	}
	// EnduroPreprocessingMap is a map indexing the attribute names of
	// EnduroPreprocessing by view name.
	EnduroPreprocessingMap = map[string][]string{
		"default": {
			"enabled",
			"workflow_name",
			"task_queue",
		},
	}
	// EnduroPoststorageCollectionMap is a map indexing the attribute names of
	// EnduroPoststorageCollection by view name.
	EnduroPoststorageCollectionMap = map[string][]string{
		"default": {
			"workflow_name",
			"task_queue",
		},
	}
	// EnduroPoststorageMap is a map indexing the attribute names of
	// EnduroPoststorage by view name.
	EnduroPoststorageMap = map[string][]string{
		"default": {
			"workflow_name",
			"task_queue",
		},
	}
)

// ValidateEnduroAbout runs the validations defined on the viewed result type
// EnduroAbout.
func ValidateEnduroAbout(result *EnduroAbout) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateEnduroAboutView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateEnduroAboutView runs the validations defined on EnduroAboutView
// using the "default" view.
func ValidateEnduroAboutView(result *EnduroAboutView) (err error) {
	if result.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "result"))
	}
	if result.PreservationSystem == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("preservation_system", "result"))
	}
	if result.UploadMaxSize == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("upload_max_size", "result"))
	}
	if result.Preprocessing != nil {
		if err2 := ValidateEnduroPreprocessingView(result.Preprocessing); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Poststorage != nil {
		if err2 := ValidateEnduroPoststorageCollectionView(result.Poststorage); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroPreprocessingView runs the validations defined on
// EnduroPreprocessingView using the "default" view.
func ValidateEnduroPreprocessingView(result *EnduroPreprocessingView) (err error) {
	if result.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "result"))
	}
	if result.WorkflowName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_name", "result"))
	}
	if result.TaskQueue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_queue", "result"))
	}
	return
}

// ValidateEnduroPoststorageCollectionView runs the validations defined on
// EnduroPoststorageCollectionView using the "default" view.
func ValidateEnduroPoststorageCollectionView(result EnduroPoststorageCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateEnduroPoststorageView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroPoststorageView runs the validations defined on
// EnduroPoststorageView using the "default" view.
func ValidateEnduroPoststorageView(result *EnduroPoststorageView) (err error) {
	if result.WorkflowName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_name", "result"))
	}
	if result.TaskQueue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_queue", "result"))
	}
	return
}
