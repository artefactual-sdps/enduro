// Code generated by goa v3.7.7, DO NOT EDIT.
//
// package HTTP client encoders and decoders
//
// Command:
// $ goa-v3.7.7 gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	package_ "github.com/artefactual-labs/enduro/internal/api/gen/package_"
	package_views "github.com/artefactual-labs/enduro/internal/api/gen/package_/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildMonitorRequest instantiates a HTTP request object with method and path
// set to call the "package" service "monitor" endpoint
func (c *Client) BuildMonitorRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: MonitorPackagePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "monitor", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMonitorResponse returns a decoder for responses returned by the
// package monitor endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeMonitorResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MonitorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "monitor", err)
			}
			p := NewMonitorEnduroMonitorEventOK(&body)
			view := "default"
			vres := &package_views.EnduroMonitorEvent{Projected: p, View: view}
			if err = package_views.ValidateEnduroMonitorEvent(vres); err != nil {
				return nil, goahttp.ErrValidationError("package", "monitor", err)
			}
			res := package_.NewEnduroMonitorEvent(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "monitor", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "package" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListPackagePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the package list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*package_.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("package", "list", "*package_.ListPayload", v)
		}
		values := req.URL.Query()
		if p.Name != nil {
			values.Add("name", *p.Name)
		}
		if p.AipID != nil {
			values.Add("aip_id", *p.AipID)
		}
		if p.EarliestCreatedTime != nil {
			values.Add("earliest_created_time", *p.EarliestCreatedTime)
		}
		if p.LatestCreatedTime != nil {
			values.Add("latest_created_time", *p.LatestCreatedTime)
		}
		if p.Location != nil {
			values.Add("location", *p.Location)
		}
		if p.Status != nil {
			values.Add("status", *p.Status)
		}
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the package
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "list", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "package" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "show", "*package_.ShowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowPackagePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowResponse returns a decoder for responses returned by the package
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "show", err)
			}
			p := NewShowEnduroStoredPackageOK(&body)
			view := "default"
			vres := &package_views.EnduroStoredPackage{Projected: p, View: view}
			if err = package_views.ValidateEnduroStoredPackage(vres); err != nil {
				return nil, goahttp.ErrValidationError("package", "show", err)
			}
			res := package_.NewEnduroStoredPackage(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "show", err)
			}
			return nil, NewShowNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "package" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "delete", "*package_.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeletePackagePath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the package
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildCancelRequest instantiates a HTTP request object with method and path
// set to call the "package" service "cancel" endpoint
func (c *Client) BuildCancelRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.CancelPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "cancel", "*package_.CancelPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CancelPackagePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "cancel", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCancelResponse returns a decoder for responses returned by the package
// cancel endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCancelResponse may return the following errors:
//	- "not_running" (type *goa.ServiceError): http.StatusBadRequest
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeCancelResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body CancelNotRunningResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "cancel", err)
			}
			err = ValidateCancelNotRunningResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "cancel", err)
			}
			return nil, NewCancelNotRunning(&body)
		case http.StatusNotFound:
			var (
				body CancelNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "cancel", err)
			}
			err = ValidateCancelNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "cancel", err)
			}
			return nil, NewCancelNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "cancel", resp.StatusCode, string(body))
		}
	}
}

// BuildRetryRequest instantiates a HTTP request object with method and path
// set to call the "package" service "retry" endpoint
func (c *Client) BuildRetryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.RetryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "retry", "*package_.RetryPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetryPackagePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "retry", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRetryResponse returns a decoder for responses returned by the package
// retry endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRetryResponse may return the following errors:
//	- "not_running" (type *goa.ServiceError): http.StatusBadRequest
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeRetryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RetryNotRunningResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "retry", err)
			}
			err = ValidateRetryNotRunningResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "retry", err)
			}
			return nil, NewRetryNotRunning(&body)
		case http.StatusNotFound:
			var (
				body RetryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "retry", err)
			}
			err = ValidateRetryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "retry", err)
			}
			return nil, NewRetryNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "retry", resp.StatusCode, string(body))
		}
	}
}

// BuildWorkflowRequest instantiates a HTTP request object with method and path
// set to call the "package" service "workflow" endpoint
func (c *Client) BuildWorkflowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.WorkflowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "workflow", "*package_.WorkflowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WorkflowPackagePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "workflow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeWorkflowResponse returns a decoder for responses returned by the
// package workflow endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeWorkflowResponse may return the following errors:
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeWorkflowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body WorkflowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "workflow", err)
			}
			p := NewWorkflowEnduroPackageWorkflowStatusOK(&body)
			view := "default"
			vres := &package_views.EnduroPackageWorkflowStatus{Projected: p, View: view}
			if err = package_views.ValidateEnduroPackageWorkflowStatus(vres); err != nil {
				return nil, goahttp.ErrValidationError("package", "workflow", err)
			}
			res := package_.NewEnduroPackageWorkflowStatus(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body WorkflowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "workflow", err)
			}
			err = ValidateWorkflowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "workflow", err)
			}
			return nil, NewWorkflowNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "workflow", resp.StatusCode, string(body))
		}
	}
}

// BuildBulkRequest instantiates a HTTP request object with method and path set
// to call the "package" service "bulk" endpoint
func (c *Client) BuildBulkRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BulkPackagePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "bulk", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBulkRequest returns an encoder for requests sent to the package bulk
// server.
func EncodeBulkRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*package_.BulkPayload)
		if !ok {
			return goahttp.ErrInvalidType("package", "bulk", "*package_.BulkPayload", v)
		}
		body := NewBulkRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("package", "bulk", err)
		}
		return nil
	}
}

// DecodeBulkResponse returns a decoder for responses returned by the package
// bulk endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeBulkResponse may return the following errors:
//	- "not_available" (type *goa.ServiceError): http.StatusConflict
//	- "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeBulkResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body BulkResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "bulk", err)
			}
			err = ValidateBulkResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "bulk", err)
			}
			res := NewBulkResultAccepted(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body BulkNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "bulk", err)
			}
			err = ValidateBulkNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "bulk", err)
			}
			return nil, NewBulkNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body BulkNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "bulk", err)
			}
			err = ValidateBulkNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "bulk", err)
			}
			return nil, NewBulkNotValid(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "bulk", resp.StatusCode, string(body))
		}
	}
}

// BuildBulkStatusRequest instantiates a HTTP request object with method and
// path set to call the "package" service "bulk_status" endpoint
func (c *Client) BuildBulkStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BulkStatusPackagePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "bulk_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeBulkStatusResponse returns a decoder for responses returned by the
// package bulk_status endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeBulkStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BulkStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "bulk_status", err)
			}
			err = ValidateBulkStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "bulk_status", err)
			}
			res := NewBulkStatusResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "bulk_status", resp.StatusCode, string(body))
		}
	}
}

// BuildPreservationActionsRequest instantiates a HTTP request object with
// method and path set to call the "package" service "preservation-actions"
// endpoint
func (c *Client) BuildPreservationActionsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.PreservationActionsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "preservation-actions", "*package_.PreservationActionsPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PreservationActionsPackagePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "preservation-actions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePreservationActionsResponse returns a decoder for responses returned
// by the package preservation-actions endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodePreservationActionsResponse may return the following errors:
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodePreservationActionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PreservationActionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "preservation-actions", err)
			}
			p := NewPreservationActionsEnduroPackagePreservationActionsOK(&body)
			view := "default"
			vres := &package_views.EnduroPackagePreservationActions{Projected: p, View: view}
			if err = package_views.ValidateEnduroPackagePreservationActions(vres); err != nil {
				return nil, goahttp.ErrValidationError("package", "preservation-actions", err)
			}
			res := package_.NewEnduroPackagePreservationActions(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body PreservationActionsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "preservation-actions", err)
			}
			err = ValidatePreservationActionsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "preservation-actions", err)
			}
			return nil, NewPreservationActionsNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "preservation-actions", resp.StatusCode, string(body))
		}
	}
}

// BuildConfirmRequest instantiates a HTTP request object with method and path
// set to call the "package" service "confirm" endpoint
func (c *Client) BuildConfirmRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.ConfirmPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "confirm", "*package_.ConfirmPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ConfirmPackagePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "confirm", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeConfirmRequest returns an encoder for requests sent to the package
// confirm server.
func EncodeConfirmRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*package_.ConfirmPayload)
		if !ok {
			return goahttp.ErrInvalidType("package", "confirm", "*package_.ConfirmPayload", v)
		}
		body := NewConfirmRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("package", "confirm", err)
		}
		return nil
	}
}

// DecodeConfirmResponse returns a decoder for responses returned by the
// package confirm endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeConfirmResponse may return the following errors:
//	- "not_available" (type *goa.ServiceError): http.StatusConflict
//	- "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeConfirmResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusConflict:
			var (
				body ConfirmNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "confirm", err)
			}
			err = ValidateConfirmNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "confirm", err)
			}
			return nil, NewConfirmNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body ConfirmNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "confirm", err)
			}
			err = ValidateConfirmNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "confirm", err)
			}
			return nil, NewConfirmNotValid(&body)
		case http.StatusNotFound:
			var (
				body ConfirmNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "confirm", err)
			}
			err = ValidateConfirmNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "confirm", err)
			}
			return nil, NewConfirmNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "confirm", resp.StatusCode, string(body))
		}
	}
}

// BuildRejectRequest instantiates a HTTP request object with method and path
// set to call the "package" service "reject" endpoint
func (c *Client) BuildRejectRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.RejectPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "reject", "*package_.RejectPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RejectPackagePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "reject", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRejectResponse returns a decoder for responses returned by the package
// reject endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRejectResponse may return the following errors:
//	- "not_available" (type *goa.ServiceError): http.StatusConflict
//	- "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeRejectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusConflict:
			var (
				body RejectNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "reject", err)
			}
			err = ValidateRejectNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "reject", err)
			}
			return nil, NewRejectNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body RejectNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "reject", err)
			}
			err = ValidateRejectNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "reject", err)
			}
			return nil, NewRejectNotValid(&body)
		case http.StatusNotFound:
			var (
				body RejectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "reject", err)
			}
			err = ValidateRejectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "reject", err)
			}
			return nil, NewRejectNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "reject", resp.StatusCode, string(body))
		}
	}
}

// BuildMoveRequest instantiates a HTTP request object with method and path set
// to call the "package" service "move" endpoint
func (c *Client) BuildMoveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.MovePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "move", "*package_.MovePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MovePackagePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "move", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMoveRequest returns an encoder for requests sent to the package move
// server.
func EncodeMoveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*package_.MovePayload)
		if !ok {
			return goahttp.ErrInvalidType("package", "move", "*package_.MovePayload", v)
		}
		body := NewMoveRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("package", "move", err)
		}
		return nil
	}
}

// DecodeMoveResponse returns a decoder for responses returned by the package
// move endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeMoveResponse may return the following errors:
//	- "not_available" (type *goa.ServiceError): http.StatusConflict
//	- "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeMoveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusConflict:
			var (
				body MoveNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "move", err)
			}
			err = ValidateMoveNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "move", err)
			}
			return nil, NewMoveNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body MoveNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "move", err)
			}
			err = ValidateMoveNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "move", err)
			}
			return nil, NewMoveNotValid(&body)
		case http.StatusNotFound:
			var (
				body MoveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "move", err)
			}
			err = ValidateMoveNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "move", err)
			}
			return nil, NewMoveNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "move", resp.StatusCode, string(body))
		}
	}
}

// BuildMoveStatusRequest instantiates a HTTP request object with method and
// path set to call the "package" service "move_status" endpoint
func (c *Client) BuildMoveStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*package_.MoveStatusPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("package", "move_status", "*package_.MoveStatusPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MoveStatusPackagePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("package", "move_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMoveStatusResponse returns a decoder for responses returned by the
// package move_status endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeMoveStatusResponse may return the following errors:
//	- "failed_dependency" (type *goa.ServiceError): http.StatusFailedDependency
//	- "not_found" (type *package_.PackageNotfound): http.StatusNotFound
//	- error: internal error
func DecodeMoveStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MoveStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "move_status", err)
			}
			err = ValidateMoveStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "move_status", err)
			}
			res := NewMoveStatusResultOK(&body)
			return res, nil
		case http.StatusFailedDependency:
			var (
				body MoveStatusFailedDependencyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "move_status", err)
			}
			err = ValidateMoveStatusFailedDependencyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "move_status", err)
			}
			return nil, NewMoveStatusFailedDependency(&body)
		case http.StatusNotFound:
			var (
				body MoveStatusNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("package", "move_status", err)
			}
			err = ValidateMoveStatusNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("package", "move_status", err)
			}
			return nil, NewMoveStatusNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("package", "move_status", resp.StatusCode, string(body))
		}
	}
}

// unmarshalEnduroMonitorPingEventResponseBodyToPackageViewsEnduroMonitorPingEventView
// builds a value of type *package_views.EnduroMonitorPingEventView from a
// value of type *EnduroMonitorPingEventResponseBody.
func unmarshalEnduroMonitorPingEventResponseBodyToPackageViewsEnduroMonitorPingEventView(v *EnduroMonitorPingEventResponseBody) *package_views.EnduroMonitorPingEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroMonitorPingEventView{
		Message: v.Message,
	}

	return res
}

// unmarshalEnduroPackageCreatedEventResponseBodyToPackageViewsEnduroPackageCreatedEventView
// builds a value of type *package_views.EnduroPackageCreatedEventView from a
// value of type *EnduroPackageCreatedEventResponseBody.
func unmarshalEnduroPackageCreatedEventResponseBodyToPackageViewsEnduroPackageCreatedEventView(v *EnduroPackageCreatedEventResponseBody) *package_views.EnduroPackageCreatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageCreatedEventView{
		ID: v.ID,
	}
	res.Item = unmarshalEnduroStoredPackageResponseBodyToPackageViewsEnduroStoredPackageView(v.Item)

	return res
}

// unmarshalEnduroStoredPackageResponseBodyToPackageViewsEnduroStoredPackageView
// builds a value of type *package_views.EnduroStoredPackageView from a value
// of type *EnduroStoredPackageResponseBody.
func unmarshalEnduroStoredPackageResponseBodyToPackageViewsEnduroStoredPackageView(v *EnduroStoredPackageResponseBody) *package_views.EnduroStoredPackageView {
	res := &package_views.EnduroStoredPackageView{
		ID:          v.ID,
		Name:        v.Name,
		Location:    v.Location,
		Status:      v.Status,
		WorkflowID:  v.WorkflowID,
		RunID:       v.RunID,
		AipID:       v.AipID,
		CreatedAt:   v.CreatedAt,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
	}

	return res
}

// unmarshalEnduroPackageDeletedEventResponseBodyToPackageViewsEnduroPackageDeletedEventView
// builds a value of type *package_views.EnduroPackageDeletedEventView from a
// value of type *EnduroPackageDeletedEventResponseBody.
func unmarshalEnduroPackageDeletedEventResponseBodyToPackageViewsEnduroPackageDeletedEventView(v *EnduroPackageDeletedEventResponseBody) *package_views.EnduroPackageDeletedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageDeletedEventView{
		ID: v.ID,
	}

	return res
}

// unmarshalEnduroPackageUpdatedEventResponseBodyToPackageViewsEnduroPackageUpdatedEventView
// builds a value of type *package_views.EnduroPackageUpdatedEventView from a
// value of type *EnduroPackageUpdatedEventResponseBody.
func unmarshalEnduroPackageUpdatedEventResponseBodyToPackageViewsEnduroPackageUpdatedEventView(v *EnduroPackageUpdatedEventResponseBody) *package_views.EnduroPackageUpdatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageUpdatedEventView{
		ID: v.ID,
	}
	res.Item = unmarshalEnduroStoredPackageResponseBodyToPackageViewsEnduroStoredPackageView(v.Item)

	return res
}

// unmarshalEnduroPackageStatusUpdatedEventResponseBodyToPackageViewsEnduroPackageStatusUpdatedEventView
// builds a value of type *package_views.EnduroPackageStatusUpdatedEventView
// from a value of type *EnduroPackageStatusUpdatedEventResponseBody.
func unmarshalEnduroPackageStatusUpdatedEventResponseBodyToPackageViewsEnduroPackageStatusUpdatedEventView(v *EnduroPackageStatusUpdatedEventResponseBody) *package_views.EnduroPackageStatusUpdatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageStatusUpdatedEventView{
		ID:     v.ID,
		Status: v.Status,
	}

	return res
}

// unmarshalEnduroPackageLocationUpdatedEventResponseBodyToPackageViewsEnduroPackageLocationUpdatedEventView
// builds a value of type *package_views.EnduroPackageLocationUpdatedEventView
// from a value of type *EnduroPackageLocationUpdatedEventResponseBody.
func unmarshalEnduroPackageLocationUpdatedEventResponseBodyToPackageViewsEnduroPackageLocationUpdatedEventView(v *EnduroPackageLocationUpdatedEventResponseBody) *package_views.EnduroPackageLocationUpdatedEventView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageLocationUpdatedEventView{
		ID:       v.ID,
		Location: v.Location,
	}

	return res
}

// unmarshalEnduroStoredPackageResponseBodyToPackageEnduroStoredPackage builds
// a value of type *package_.EnduroStoredPackage from a value of type
// *EnduroStoredPackageResponseBody.
func unmarshalEnduroStoredPackageResponseBodyToPackageEnduroStoredPackage(v *EnduroStoredPackageResponseBody) *package_.EnduroStoredPackage {
	res := &package_.EnduroStoredPackage{
		ID:          *v.ID,
		Name:        v.Name,
		Location:    v.Location,
		Status:      *v.Status,
		WorkflowID:  v.WorkflowID,
		RunID:       v.RunID,
		AipID:       v.AipID,
		CreatedAt:   *v.CreatedAt,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
	}

	return res
}

// unmarshalEnduroPackageWorkflowHistoryResponseBodyToPackageViewsEnduroPackageWorkflowHistoryView
// builds a value of type *package_views.EnduroPackageWorkflowHistoryView from
// a value of type *EnduroPackageWorkflowHistoryResponseBody.
func unmarshalEnduroPackageWorkflowHistoryResponseBodyToPackageViewsEnduroPackageWorkflowHistoryView(v *EnduroPackageWorkflowHistoryResponseBody) *package_views.EnduroPackageWorkflowHistoryView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackageWorkflowHistoryView{
		ID:      v.ID,
		Type:    v.Type,
		Details: v.Details,
	}

	return res
}

// unmarshalEnduroPackagePreservationActionsActionResponseBodyToPackageViewsEnduroPackagePreservationActionsActionView
// builds a value of type
// *package_views.EnduroPackagePreservationActionsActionView from a value of
// type *EnduroPackagePreservationActionsActionResponseBody.
func unmarshalEnduroPackagePreservationActionsActionResponseBodyToPackageViewsEnduroPackagePreservationActionsActionView(v *EnduroPackagePreservationActionsActionResponseBody) *package_views.EnduroPackagePreservationActionsActionView {
	if v == nil {
		return nil
	}
	res := &package_views.EnduroPackagePreservationActionsActionView{
		ID:          v.ID,
		ActionID:    v.ActionID,
		Name:        v.Name,
		Status:      v.Status,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
	}

	return res
}
