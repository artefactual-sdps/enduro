// Code generated by goa v3.9.1, DO NOT EDIT.
//
// package HTTP client types
//
// Command:
// $ goa-v3.10.2 gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	package_ "github.com/artefactual-sdps/enduro/internal/api/gen/package_"
	package_views "github.com/artefactual-sdps/enduro/internal/api/gen/package_/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// ConfirmRequestBody is the type of the "package" service "confirm" endpoint
// HTTP request body.
type ConfirmRequestBody struct {
	LocationID uuid.UUID `form:"location_id" json:"location_id" xml:"location_id"`
}

// MoveRequestBody is the type of the "package" service "move" endpoint HTTP
// request body.
type MoveRequestBody struct {
	LocationID uuid.UUID `form:"location_id" json:"location_id" xml:"location_id"`
}

// MonitorResponseBody is the type of the "package" service "monitor" endpoint
// HTTP response body.
type MonitorResponseBody struct {
	MonitorPingEvent               *EnduroMonitorPingEventResponseBody               `form:"monitor_ping_event,omitempty" json:"monitor_ping_event,omitempty" xml:"monitor_ping_event,omitempty"`
	PackageCreatedEvent            *EnduroPackageCreatedEventResponseBody            `form:"package_created_event,omitempty" json:"package_created_event,omitempty" xml:"package_created_event,omitempty"`
	PackageUpdatedEvent            *EnduroPackageUpdatedEventResponseBody            `form:"package_updated_event,omitempty" json:"package_updated_event,omitempty" xml:"package_updated_event,omitempty"`
	PackageStatusUpdatedEvent      *EnduroPackageStatusUpdatedEventResponseBody      `form:"package_status_updated_event,omitempty" json:"package_status_updated_event,omitempty" xml:"package_status_updated_event,omitempty"`
	PackageLocationUpdatedEvent    *EnduroPackageLocationUpdatedEventResponseBody    `form:"package_location_updated_event,omitempty" json:"package_location_updated_event,omitempty" xml:"package_location_updated_event,omitempty"`
	PreservationActionCreatedEvent *EnduroPreservationActionCreatedEventResponseBody `form:"preservation_action_created_event,omitempty" json:"preservation_action_created_event,omitempty" xml:"preservation_action_created_event,omitempty"`
	PreservationActionUpdatedEvent *EnduroPreservationActionUpdatedEventResponseBody `form:"preservation_action_updated_event,omitempty" json:"preservation_action_updated_event,omitempty" xml:"preservation_action_updated_event,omitempty"`
	PreservationTaskCreatedEvent   *EnduroPreservationTaskCreatedEventResponseBody   `form:"preservation_task_created_event,omitempty" json:"preservation_task_created_event,omitempty" xml:"preservation_task_created_event,omitempty"`
	PreservationTaskUpdatedEvent   *EnduroPreservationTaskUpdatedEventResponseBody   `form:"preservation_task_updated_event,omitempty" json:"preservation_task_updated_event,omitempty" xml:"preservation_task_updated_event,omitempty"`
}

// ListResponseBody is the type of the "package" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items      EnduroStoredPackageCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	NextCursor *string                                   `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
}

// ShowResponseBody is the type of the "package" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Identifier of package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the package
	Name       *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
	// Status of the package
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Identifier of processing workflow
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	// Identifier of latest processing workflow run
	RunID *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
	// Identifier of Archivematica AIP
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Start datetime
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// Completion datetime
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
}

// PreservationActionsResponseBody is the type of the "package" service
// "preservation_actions" endpoint HTTP response body.
type PreservationActionsResponseBody struct {
	Actions EnduroPackagePreservationActionCollectionResponseBody `form:"actions,omitempty" json:"actions,omitempty" xml:"actions,omitempty"`
}

// MoveStatusResponseBody is the type of the "package" service "move_status"
// endpoint HTTP response body.
type MoveStatusResponseBody struct {
	Done *bool `form:"done,omitempty" json:"done,omitempty" xml:"done,omitempty"`
}

// MonitorRequestNotAvailableResponseBody is the type of the "package" service
// "monitor_request" endpoint HTTP response body for the "not_available" error.
type MonitorRequestNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MonitorNotAvailableResponseBody is the type of the "package" service
// "monitor" endpoint HTTP response body for the "not_available" error.
type MonitorNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowNotAvailableResponseBody is the type of the "package" service "show"
// endpoint HTTP response body for the "not_available" error.
type ShowNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "package" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// PreservationActionsNotFoundResponseBody is the type of the "package" service
// "preservation_actions" endpoint HTTP response body for the "not_found" error.
type PreservationActionsNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConfirmNotAvailableResponseBody is the type of the "package" service
// "confirm" endpoint HTTP response body for the "not_available" error.
type ConfirmNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ConfirmNotValidResponseBody is the type of the "package" service "confirm"
// endpoint HTTP response body for the "not_valid" error.
type ConfirmNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ConfirmNotFoundResponseBody is the type of the "package" service "confirm"
// endpoint HTTP response body for the "not_found" error.
type ConfirmNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RejectNotAvailableResponseBody is the type of the "package" service "reject"
// endpoint HTTP response body for the "not_available" error.
type RejectNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectNotValidResponseBody is the type of the "package" service "reject"
// endpoint HTTP response body for the "not_valid" error.
type RejectNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectNotFoundResponseBody is the type of the "package" service "reject"
// endpoint HTTP response body for the "not_found" error.
type RejectNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MoveNotAvailableResponseBody is the type of the "package" service "move"
// endpoint HTTP response body for the "not_available" error.
type MoveNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveNotValidResponseBody is the type of the "package" service "move"
// endpoint HTTP response body for the "not_valid" error.
type MoveNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveNotFoundResponseBody is the type of the "package" service "move"
// endpoint HTTP response body for the "not_found" error.
type MoveNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MoveStatusFailedDependencyResponseBody is the type of the "package" service
// "move_status" endpoint HTTP response body for the "failed_dependency" error.
type MoveStatusFailedDependencyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveStatusNotFoundResponseBody is the type of the "package" service
// "move_status" endpoint HTTP response body for the "not_found" error.
type MoveStatusNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnduroMonitorPingEventResponseBody is used to define fields on response body
// types.
type EnduroMonitorPingEventResponseBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// EnduroPackageCreatedEventResponseBody is used to define fields on response
// body types.
type EnduroPackageCreatedEventResponseBody struct {
	// Identifier of package
	ID   *uint                            `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Item *EnduroStoredPackageResponseBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// EnduroStoredPackageResponseBody is used to define fields on response body
// types.
type EnduroStoredPackageResponseBody struct {
	// Identifier of package
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the package
	Name       *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
	// Status of the package
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Identifier of processing workflow
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	// Identifier of latest processing workflow run
	RunID *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
	// Identifier of Archivematica AIP
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Start datetime
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// Completion datetime
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
}

// EnduroPackageUpdatedEventResponseBody is used to define fields on response
// body types.
type EnduroPackageUpdatedEventResponseBody struct {
	// Identifier of package
	ID   *uint                            `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Item *EnduroStoredPackageResponseBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// EnduroPackageStatusUpdatedEventResponseBody is used to define fields on
// response body types.
type EnduroPackageStatusUpdatedEventResponseBody struct {
	// Identifier of package
	ID     *uint   `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// EnduroPackageLocationUpdatedEventResponseBody is used to define fields on
// response body types.
type EnduroPackageLocationUpdatedEventResponseBody struct {
	// Identifier of package
	ID         *uint      `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
}

// EnduroPreservationActionCreatedEventResponseBody is used to define fields on
// response body types.
type EnduroPreservationActionCreatedEventResponseBody struct {
	// Identifier of preservation action
	ID   *uint                                        `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Item *EnduroPackagePreservationActionResponseBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// EnduroPackagePreservationActionResponseBody is used to define fields on
// response body types.
type EnduroPackagePreservationActionResponseBody struct {
	ID          *uint                                               `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	WorkflowID  *string                                             `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	Type        *string                                             `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Status      *string                                             `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	StartedAt   *string                                             `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt *string                                             `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Tasks       EnduroPackagePreservationTaskCollectionResponseBody `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
	PackageID   *uint                                               `form:"package_id,omitempty" json:"package_id,omitempty" xml:"package_id,omitempty"`
}

// EnduroPackagePreservationTaskCollectionResponseBody is used to define fields
// on response body types.
type EnduroPackagePreservationTaskCollectionResponseBody []*EnduroPackagePreservationTaskResponseBody

// EnduroPackagePreservationTaskResponseBody is used to define fields on
// response body types.
type EnduroPackagePreservationTaskResponseBody struct {
	ID                   *uint   `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	TaskID               *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
	Name                 *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Status               *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	StartedAt            *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt          *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Note                 *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	PreservationActionID *uint   `form:"preservation_action_id,omitempty" json:"preservation_action_id,omitempty" xml:"preservation_action_id,omitempty"`
}

// EnduroPreservationActionUpdatedEventResponseBody is used to define fields on
// response body types.
type EnduroPreservationActionUpdatedEventResponseBody struct {
	// Identifier of preservation action
	ID   *uint                                        `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Item *EnduroPackagePreservationActionResponseBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// EnduroPreservationTaskCreatedEventResponseBody is used to define fields on
// response body types.
type EnduroPreservationTaskCreatedEventResponseBody struct {
	// Identifier of preservation task
	ID   *uint                                      `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Item *EnduroPackagePreservationTaskResponseBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// EnduroPreservationTaskUpdatedEventResponseBody is used to define fields on
// response body types.
type EnduroPreservationTaskUpdatedEventResponseBody struct {
	// Identifier of preservation task
	ID   *uint                                      `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Item *EnduroPackagePreservationTaskResponseBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// EnduroStoredPackageCollectionResponseBody is used to define fields on
// response body types.
type EnduroStoredPackageCollectionResponseBody []*EnduroStoredPackageResponseBody

// EnduroPackagePreservationActionCollectionResponseBody is used to define
// fields on response body types.
type EnduroPackagePreservationActionCollectionResponseBody []*EnduroPackagePreservationActionResponseBody

// NewConfirmRequestBody builds the HTTP request body from the payload of the
// "confirm" endpoint of the "package" service.
func NewConfirmRequestBody(p *package_.ConfirmPayload) *ConfirmRequestBody {
	body := &ConfirmRequestBody{
		LocationID: p.LocationID,
	}
	return body
}

// NewMoveRequestBody builds the HTTP request body from the payload of the
// "move" endpoint of the "package" service.
func NewMoveRequestBody(p *package_.MovePayload) *MoveRequestBody {
	body := &MoveRequestBody{
		LocationID: p.LocationID,
	}
	return body
}

// NewMonitorRequestResultOK builds a "package" service "monitor_request"
// endpoint result from a HTTP "OK" response.
func NewMonitorRequestResultOK(ticket *string) *package_.MonitorRequestResult {
	v := &package_.MonitorRequestResult{}
	v.Ticket = ticket

	return v
}

// NewMonitorRequestNotAvailable builds a package service monitor_request
// endpoint not_available error.
func NewMonitorRequestNotAvailable(body *MonitorRequestNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorRequestUnauthorized builds a package service monitor_request
// endpoint unauthorized error.
func NewMonitorRequestUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewMonitorEnduroMonitorEventOK builds a "package" service "monitor" endpoint
// result from a HTTP "OK" response.
func NewMonitorEnduroMonitorEventOK(body *MonitorResponseBody) *package_views.EnduroMonitorEventView {
	v := &package_views.EnduroMonitorEventView{}
	if body.MonitorPingEvent != nil {
		v.MonitorPingEvent = unmarshalEnduroMonitorPingEventResponseBodyToPackageViewsEnduroMonitorPingEventView(body.MonitorPingEvent)
	}
	if body.PackageCreatedEvent != nil {
		v.PackageCreatedEvent = unmarshalEnduroPackageCreatedEventResponseBodyToPackageViewsEnduroPackageCreatedEventView(body.PackageCreatedEvent)
	}
	if body.PackageUpdatedEvent != nil {
		v.PackageUpdatedEvent = unmarshalEnduroPackageUpdatedEventResponseBodyToPackageViewsEnduroPackageUpdatedEventView(body.PackageUpdatedEvent)
	}
	if body.PackageStatusUpdatedEvent != nil {
		v.PackageStatusUpdatedEvent = unmarshalEnduroPackageStatusUpdatedEventResponseBodyToPackageViewsEnduroPackageStatusUpdatedEventView(body.PackageStatusUpdatedEvent)
	}
	if body.PackageLocationUpdatedEvent != nil {
		v.PackageLocationUpdatedEvent = unmarshalEnduroPackageLocationUpdatedEventResponseBodyToPackageViewsEnduroPackageLocationUpdatedEventView(body.PackageLocationUpdatedEvent)
	}
	if body.PreservationActionCreatedEvent != nil {
		v.PreservationActionCreatedEvent = unmarshalEnduroPreservationActionCreatedEventResponseBodyToPackageViewsEnduroPreservationActionCreatedEventView(body.PreservationActionCreatedEvent)
	}
	if body.PreservationActionUpdatedEvent != nil {
		v.PreservationActionUpdatedEvent = unmarshalEnduroPreservationActionUpdatedEventResponseBodyToPackageViewsEnduroPreservationActionUpdatedEventView(body.PreservationActionUpdatedEvent)
	}
	if body.PreservationTaskCreatedEvent != nil {
		v.PreservationTaskCreatedEvent = unmarshalEnduroPreservationTaskCreatedEventResponseBodyToPackageViewsEnduroPreservationTaskCreatedEventView(body.PreservationTaskCreatedEvent)
	}
	if body.PreservationTaskUpdatedEvent != nil {
		v.PreservationTaskUpdatedEvent = unmarshalEnduroPreservationTaskUpdatedEventResponseBodyToPackageViewsEnduroPreservationTaskUpdatedEventView(body.PreservationTaskUpdatedEvent)
	}

	return v
}

// NewMonitorNotAvailable builds a package service monitor endpoint
// not_available error.
func NewMonitorNotAvailable(body *MonitorNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorUnauthorized builds a package service monitor endpoint
// unauthorized error.
func NewMonitorUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewListResultOK builds a "package" service "list" endpoint result from a
// HTTP "OK" response.
func NewListResultOK(body *ListResponseBody) *package_.ListResult {
	v := &package_.ListResult{
		NextCursor: body.NextCursor,
	}
	v.Items = make([]*package_.EnduroStoredPackage, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalEnduroStoredPackageResponseBodyToPackageEnduroStoredPackage(val)
	}

	return v
}

// NewListUnauthorized builds a package service list endpoint unauthorized
// error.
func NewListUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewShowEnduroStoredPackageOK builds a "package" service "show" endpoint
// result from a HTTP "OK" response.
func NewShowEnduroStoredPackageOK(body *ShowResponseBody) *package_views.EnduroStoredPackageView {
	v := &package_views.EnduroStoredPackageView{
		ID:          body.ID,
		Name:        body.Name,
		LocationID:  body.LocationID,
		Status:      body.Status,
		WorkflowID:  body.WorkflowID,
		RunID:       body.RunID,
		AipID:       body.AipID,
		CreatedAt:   body.CreatedAt,
		StartedAt:   body.StartedAt,
		CompletedAt: body.CompletedAt,
	}

	return v
}

// NewShowNotAvailable builds a package service show endpoint not_available
// error.
func NewShowNotAvailable(body *ShowNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowNotFound builds a package service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *package_.PackageNotFound {
	v := &package_.PackageNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewShowUnauthorized builds a package service show endpoint unauthorized
// error.
func NewShowUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewPreservationActionsEnduroPackagePreservationActionsOK builds a "package"
// service "preservation_actions" endpoint result from a HTTP "OK" response.
func NewPreservationActionsEnduroPackagePreservationActionsOK(body *PreservationActionsResponseBody) *package_views.EnduroPackagePreservationActionsView {
	v := &package_views.EnduroPackagePreservationActionsView{}
	if body.Actions != nil {
		v.Actions = make([]*package_views.EnduroPackagePreservationActionView, len(body.Actions))
		for i, val := range body.Actions {
			v.Actions[i] = unmarshalEnduroPackagePreservationActionResponseBodyToPackageViewsEnduroPackagePreservationActionView(val)
		}
	}

	return v
}

// NewPreservationActionsNotFound builds a package service preservation_actions
// endpoint not_found error.
func NewPreservationActionsNotFound(body *PreservationActionsNotFoundResponseBody) *package_.PackageNotFound {
	v := &package_.PackageNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewPreservationActionsUnauthorized builds a package service
// preservation_actions endpoint unauthorized error.
func NewPreservationActionsUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewConfirmNotAvailable builds a package service confirm endpoint
// not_available error.
func NewConfirmNotAvailable(body *ConfirmNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewConfirmNotValid builds a package service confirm endpoint not_valid error.
func NewConfirmNotValid(body *ConfirmNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewConfirmNotFound builds a package service confirm endpoint not_found error.
func NewConfirmNotFound(body *ConfirmNotFoundResponseBody) *package_.PackageNotFound {
	v := &package_.PackageNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewConfirmUnauthorized builds a package service confirm endpoint
// unauthorized error.
func NewConfirmUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewRejectNotAvailable builds a package service reject endpoint not_available
// error.
func NewRejectNotAvailable(body *RejectNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectNotValid builds a package service reject endpoint not_valid error.
func NewRejectNotValid(body *RejectNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectNotFound builds a package service reject endpoint not_found error.
func NewRejectNotFound(body *RejectNotFoundResponseBody) *package_.PackageNotFound {
	v := &package_.PackageNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewRejectUnauthorized builds a package service reject endpoint unauthorized
// error.
func NewRejectUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewMoveNotAvailable builds a package service move endpoint not_available
// error.
func NewMoveNotAvailable(body *MoveNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveNotValid builds a package service move endpoint not_valid error.
func NewMoveNotValid(body *MoveNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveNotFound builds a package service move endpoint not_found error.
func NewMoveNotFound(body *MoveNotFoundResponseBody) *package_.PackageNotFound {
	v := &package_.PackageNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewMoveUnauthorized builds a package service move endpoint unauthorized
// error.
func NewMoveUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// NewMoveStatusResultOK builds a "package" service "move_status" endpoint
// result from a HTTP "OK" response.
func NewMoveStatusResultOK(body *MoveStatusResponseBody) *package_.MoveStatusResult {
	v := &package_.MoveStatusResult{
		Done: *body.Done,
	}

	return v
}

// NewMoveStatusFailedDependency builds a package service move_status endpoint
// failed_dependency error.
func NewMoveStatusFailedDependency(body *MoveStatusFailedDependencyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveStatusNotFound builds a package service move_status endpoint
// not_found error.
func NewMoveStatusNotFound(body *MoveStatusNotFoundResponseBody) *package_.PackageNotFound {
	v := &package_.PackageNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewMoveStatusUnauthorized builds a package service move_status endpoint
// unauthorized error.
func NewMoveStatusUnauthorized(body string) package_.Unauthorized {
	v := package_.Unauthorized(body)

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if err2 := ValidateEnduroStoredPackageCollectionResponseBody(body.Items); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// ValidateMoveStatusResponseBody runs the validations defined on
// move_status_response_body
func ValidateMoveStatusResponseBody(body *MoveStatusResponseBody) (err error) {
	if body.Done == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("done", "body"))
	}
	return
}

// ValidateMonitorRequestNotAvailableResponseBody runs the validations defined
// on monitor_request_not_available_response_body
func ValidateMonitorRequestNotAvailableResponseBody(body *MonitorRequestNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMonitorNotAvailableResponseBody runs the validations defined on
// monitor_not_available_response_body
func ValidateMonitorNotAvailableResponseBody(body *MonitorNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowNotAvailableResponseBody runs the validations defined on
// show_not_available_response_body
func ValidateShowNotAvailableResponseBody(body *ShowNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidatePreservationActionsNotFoundResponseBody runs the validations defined
// on preservation_actions_not_found_response_body
func ValidatePreservationActionsNotFoundResponseBody(body *PreservationActionsNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateConfirmNotAvailableResponseBody runs the validations defined on
// confirm_not_available_response_body
func ValidateConfirmNotAvailableResponseBody(body *ConfirmNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateConfirmNotValidResponseBody runs the validations defined on
// confirm_not_valid_response_body
func ValidateConfirmNotValidResponseBody(body *ConfirmNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateConfirmNotFoundResponseBody runs the validations defined on
// confirm_not_found_response_body
func ValidateConfirmNotFoundResponseBody(body *ConfirmNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateRejectNotAvailableResponseBody runs the validations defined on
// reject_not_available_response_body
func ValidateRejectNotAvailableResponseBody(body *RejectNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectNotValidResponseBody runs the validations defined on
// reject_not_valid_response_body
func ValidateRejectNotValidResponseBody(body *RejectNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectNotFoundResponseBody runs the validations defined on
// reject_not_found_response_body
func ValidateRejectNotFoundResponseBody(body *RejectNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateMoveNotAvailableResponseBody runs the validations defined on
// move_not_available_response_body
func ValidateMoveNotAvailableResponseBody(body *MoveNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveNotValidResponseBody runs the validations defined on
// move_not_valid_response_body
func ValidateMoveNotValidResponseBody(body *MoveNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveNotFoundResponseBody runs the validations defined on
// move_not_found_response_body
func ValidateMoveNotFoundResponseBody(body *MoveNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateMoveStatusFailedDependencyResponseBody runs the validations defined
// on move_status_failed_dependency_response_body
func ValidateMoveStatusFailedDependencyResponseBody(body *MoveStatusFailedDependencyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveStatusNotFoundResponseBody runs the validations defined on
// move_status_not_found_response_body
func ValidateMoveStatusNotFoundResponseBody(body *MoveStatusNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateEnduroPackageCreatedEventResponseBody runs the validations defined
// on EnduroPackage-Created-EventResponseBody
func ValidateEnduroPackageCreatedEventResponseBody(body *EnduroPackageCreatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateEnduroStoredPackageResponseBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroStoredPackageResponseBody runs the validations defined on
// EnduroStored-PackageResponseBody
func ValidateEnduroStoredPackageResponseBody(body *EnduroStoredPackageResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "new" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "unknown" || *body.Status == "queued" || *body.Status == "pending" || *body.Status == "abandoned") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"new", "in progress", "done", "error", "unknown", "queued", "pending", "abandoned"}))
		}
	}
	if body.WorkflowID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workflow_id", *body.WorkflowID, goa.FormatUUID))
	}
	if body.RunID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.run_id", *body.RunID, goa.FormatUUID))
	}
	if body.AipID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.aip_id", *body.AipID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnduroPackageUpdatedEventResponseBody runs the validations defined
// on EnduroPackage-Updated-EventResponseBody
func ValidateEnduroPackageUpdatedEventResponseBody(body *EnduroPackageUpdatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateEnduroStoredPackageResponseBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroPackageStatusUpdatedEventResponseBody runs the validations
// defined on EnduroPackage-Status-Updated-EventResponseBody
func ValidateEnduroPackageStatusUpdatedEventResponseBody(body *EnduroPackageStatusUpdatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "new" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "unknown" || *body.Status == "queued" || *body.Status == "pending" || *body.Status == "abandoned") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"new", "in progress", "done", "error", "unknown", "queued", "pending", "abandoned"}))
		}
	}
	return
}

// ValidateEnduroPackageLocationUpdatedEventResponseBody runs the validations
// defined on EnduroPackage-Location-Updated-EventResponseBody
func ValidateEnduroPackageLocationUpdatedEventResponseBody(body *EnduroPackageLocationUpdatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.LocationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location_id", "body"))
	}
	return
}

// ValidateEnduroPreservationActionCreatedEventResponseBody runs the
// validations defined on EnduroPreservation-Action-Created-EventResponseBody
func ValidateEnduroPreservationActionCreatedEventResponseBody(body *EnduroPreservationActionCreatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateEnduroPackagePreservationActionResponseBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroPackagePreservationActionResponseBody runs the validations
// defined on EnduroPackage-Preservation-ActionResponseBody
func ValidateEnduroPackagePreservationActionResponseBody(body *EnduroPackagePreservationActionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkflowID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "create-aip" || *body.Type == "create-and-review-aip" || *body.Type == "move-package") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"create-aip", "create-and-review-aip", "move-package"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "queued" || *body.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	if err2 := ValidateEnduroPackagePreservationTaskCollectionResponseBody(body.Tasks); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// ValidateEnduroPackagePreservationTaskCollectionResponseBody runs the
// validations defined on EnduroPackage-Preservation-TaskCollectionResponseBody
func ValidateEnduroPackagePreservationTaskCollectionResponseBody(body EnduroPackagePreservationTaskCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateEnduroPackagePreservationTaskResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnduroPackagePreservationTaskResponseBody runs the validations
// defined on EnduroPackage-Preservation-TaskResponseBody
func ValidateEnduroPackagePreservationTaskResponseBody(body *EnduroPackagePreservationTaskResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "queued" || *body.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnduroPreservationActionUpdatedEventResponseBody runs the
// validations defined on EnduroPreservation-Action-Updated-EventResponseBody
func ValidateEnduroPreservationActionUpdatedEventResponseBody(body *EnduroPreservationActionUpdatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateEnduroPackagePreservationActionResponseBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroPreservationTaskCreatedEventResponseBody runs the validations
// defined on EnduroPreservation-Task-Created-EventResponseBody
func ValidateEnduroPreservationTaskCreatedEventResponseBody(body *EnduroPreservationTaskCreatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateEnduroPackagePreservationTaskResponseBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroPreservationTaskUpdatedEventResponseBody runs the validations
// defined on EnduroPreservation-Task-Updated-EventResponseBody
func ValidateEnduroPreservationTaskUpdatedEventResponseBody(body *EnduroPreservationTaskUpdatedEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateEnduroPackagePreservationTaskResponseBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnduroStoredPackageCollectionResponseBody runs the validations
// defined on EnduroStored-PackageCollectionResponseBody
func ValidateEnduroStoredPackageCollectionResponseBody(body EnduroStoredPackageCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateEnduroStoredPackageResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnduroPackagePreservationActionCollectionResponseBody runs the
// validations defined on
// EnduroPackage-Preservation-ActionCollectionResponseBody
func ValidateEnduroPackagePreservationActionCollectionResponseBody(body EnduroPackagePreservationActionCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateEnduroPackagePreservationActionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
