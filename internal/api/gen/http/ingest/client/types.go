// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest HTTP client types
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"encoding/json"

	ingest "github.com/artefactual-sdps/enduro/internal/api/gen/ingest"
	ingestviews "github.com/artefactual-sdps/enduro/internal/api/gen/ingest/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// ConfirmSipRequestBody is the type of the "ingest" service "confirm_sip"
// endpoint HTTP request body.
type ConfirmSipRequestBody struct {
	// Identifier of storage location
	LocationID uuid.UUID `form:"location_id" json:"location_id" xml:"location_id"`
}

// MoveSipRequestBody is the type of the "ingest" service "move_sip" endpoint
// HTTP request body.
type MoveSipRequestBody struct {
	// Identifier of storage location
	LocationID uuid.UUID `form:"location_id" json:"location_id" xml:"location_id"`
}

// MonitorResponseBody is the type of the "ingest" service "monitor" endpoint
// HTTP response body.
type MonitorResponseBody struct {
	Event *struct {
		// Union type name, one of:
		// - "monitor_ping_event"
		// - "sip_created_event"
		// - "sip_updated_event"
		// - "sip_status_updated_event"
		// - "sip_location_updated_event"
		// - "sip_preservation_action_created_event"
		// - "sip_preservation_action_updated_event"
		// - "sip_preservation_task_created_event"
		// - "sip_preservation_task_updated_event"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"event,omitempty" json:"event,omitempty" xml:"event,omitempty"`
}

// ListSipsResponseBody is the type of the "ingest" service "list_sips"
// endpoint HTTP response body.
type ListSipsResponseBody struct {
	Items SIPCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	Page  *EnduroPageResponseBody   `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
}

// ShowSipResponseBody is the type of the "ingest" service "show_sip" endpoint
// HTTP response body.
type ShowSipResponseBody struct {
	// Identifier of SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the SIP
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Identifier of storage location
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
	// Status of the SIP
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Identifier of processing workflow
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	// Identifier of latest processing workflow run
	RunID *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
	// Identifier of AIP
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Start datetime
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// Completion datetime
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
}

// ListSipPreservationActionsResponseBody is the type of the "ingest" service
// "list_sip_preservation_actions" endpoint HTTP response body.
type ListSipPreservationActionsResponseBody struct {
	Actions SIPPreservationActionCollectionResponseBody `form:"actions,omitempty" json:"actions,omitempty" xml:"actions,omitempty"`
}

// MoveSipStatusResponseBody is the type of the "ingest" service
// "move_sip_status" endpoint HTTP response body.
type MoveSipStatusResponseBody struct {
	Done *bool `form:"done,omitempty" json:"done,omitempty" xml:"done,omitempty"`
}

// MonitorRequestNotAvailableResponseBody is the type of the "ingest" service
// "monitor_request" endpoint HTTP response body for the "not_available" error.
type MonitorRequestNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MonitorNotAvailableResponseBody is the type of the "ingest" service
// "monitor" endpoint HTTP response body for the "not_available" error.
type MonitorNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListSipsNotValidResponseBody is the type of the "ingest" service "list_sips"
// endpoint HTTP response body for the "not_valid" error.
type ListSipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowSipNotAvailableResponseBody is the type of the "ingest" service
// "show_sip" endpoint HTTP response body for the "not_available" error.
type ShowSipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowSipNotFoundResponseBody is the type of the "ingest" service "show_sip"
// endpoint HTTP response body for the "not_found" error.
type ShowSipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListSipPreservationActionsNotFoundResponseBody is the type of the "ingest"
// service "list_sip_preservation_actions" endpoint HTTP response body for the
// "not_found" error.
type ListSipPreservationActionsNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConfirmSipNotAvailableResponseBody is the type of the "ingest" service
// "confirm_sip" endpoint HTTP response body for the "not_available" error.
type ConfirmSipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ConfirmSipNotValidResponseBody is the type of the "ingest" service
// "confirm_sip" endpoint HTTP response body for the "not_valid" error.
type ConfirmSipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ConfirmSipNotFoundResponseBody is the type of the "ingest" service
// "confirm_sip" endpoint HTTP response body for the "not_found" error.
type ConfirmSipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RejectSipNotAvailableResponseBody is the type of the "ingest" service
// "reject_sip" endpoint HTTP response body for the "not_available" error.
type RejectSipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectSipNotValidResponseBody is the type of the "ingest" service
// "reject_sip" endpoint HTTP response body for the "not_valid" error.
type RejectSipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectSipNotFoundResponseBody is the type of the "ingest" service
// "reject_sip" endpoint HTTP response body for the "not_found" error.
type RejectSipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MoveSipNotAvailableResponseBody is the type of the "ingest" service
// "move_sip" endpoint HTTP response body for the "not_available" error.
type MoveSipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveSipNotValidResponseBody is the type of the "ingest" service "move_sip"
// endpoint HTTP response body for the "not_valid" error.
type MoveSipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveSipNotFoundResponseBody is the type of the "ingest" service "move_sip"
// endpoint HTTP response body for the "not_found" error.
type MoveSipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MoveSipStatusFailedDependencyResponseBody is the type of the "ingest"
// service "move_sip_status" endpoint HTTP response body for the
// "failed_dependency" error.
type MoveSipStatusFailedDependencyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveSipStatusNotFoundResponseBody is the type of the "ingest" service
// "move_sip_status" endpoint HTTP response body for the "not_found" error.
type MoveSipStatusNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UploadSipInvalidMediaTypeResponseBody is the type of the "ingest" service
// "upload_sip" endpoint HTTP response body for the "invalid_media_type" error.
type UploadSipInvalidMediaTypeResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UploadSipInvalidMultipartRequestResponseBody is the type of the "ingest"
// service "upload_sip" endpoint HTTP response body for the
// "invalid_multipart_request" error.
type UploadSipInvalidMultipartRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UploadSipInternalErrorResponseBody is the type of the "ingest" service
// "upload_sip" endpoint HTTP response body for the "internal_error" error.
type UploadSipInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SIPCollectionResponseBody is used to define fields on response body types.
type SIPCollectionResponseBody []*SIPResponseBody

// SIPResponseBody is used to define fields on response body types.
type SIPResponseBody struct {
	// Identifier of SIP
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the SIP
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Identifier of storage location
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
	// Status of the SIP
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Identifier of processing workflow
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	// Identifier of latest processing workflow run
	RunID *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
	// Identifier of AIP
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Start datetime
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// Completion datetime
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
}

// EnduroPageResponseBody is used to define fields on response body types.
type EnduroPageResponseBody struct {
	// Maximum items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// Offset from first result to start of page
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
	// Total result count before paging
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// SIPPreservationActionCollectionResponseBody is used to define fields on
// response body types.
type SIPPreservationActionCollectionResponseBody []*SIPPreservationActionResponseBody

// SIPPreservationActionResponseBody is used to define fields on response body
// types.
type SIPPreservationActionResponseBody struct {
	ID          *uint                                     `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	WorkflowID  *string                                   `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	Type        *string                                   `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Status      *string                                   `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	StartedAt   *string                                   `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt *string                                   `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Tasks       SIPPreservationTaskCollectionResponseBody `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
	SipID       *uint                                     `form:"sip_id,omitempty" json:"sip_id,omitempty" xml:"sip_id,omitempty"`
}

// SIPPreservationTaskCollectionResponseBody is used to define fields on
// response body types.
type SIPPreservationTaskCollectionResponseBody []*SIPPreservationTaskResponseBody

// SIPPreservationTaskResponseBody is used to define fields on response body
// types.
type SIPPreservationTaskResponseBody struct {
	ID                   *uint   `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	TaskID               *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
	Name                 *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Status               *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	StartedAt            *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt          *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Note                 *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	PreservationActionID *uint   `form:"preservation_action_id,omitempty" json:"preservation_action_id,omitempty" xml:"preservation_action_id,omitempty"`
}

// NewConfirmSipRequestBody builds the HTTP request body from the payload of
// the "confirm_sip" endpoint of the "ingest" service.
func NewConfirmSipRequestBody(p *ingest.ConfirmSipPayload) *ConfirmSipRequestBody {
	body := &ConfirmSipRequestBody{
		LocationID: p.LocationID,
	}
	return body
}

// NewMoveSipRequestBody builds the HTTP request body from the payload of the
// "move_sip" endpoint of the "ingest" service.
func NewMoveSipRequestBody(p *ingest.MoveSipPayload) *MoveSipRequestBody {
	body := &MoveSipRequestBody{
		LocationID: p.LocationID,
	}
	return body
}

// NewMonitorRequestResultOK builds a "ingest" service "monitor_request"
// endpoint result from a HTTP "OK" response.
func NewMonitorRequestResultOK(ticket *string) *ingest.MonitorRequestResult {
	v := &ingest.MonitorRequestResult{}
	v.Ticket = ticket

	return v
}

// NewMonitorRequestNotAvailable builds a ingest service monitor_request
// endpoint not_available error.
func NewMonitorRequestNotAvailable(body *MonitorRequestNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorRequestForbidden builds a ingest service monitor_request endpoint
// forbidden error.
func NewMonitorRequestForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewMonitorRequestUnauthorized builds a ingest service monitor_request
// endpoint unauthorized error.
func NewMonitorRequestUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewMonitorEventOK builds a "ingest" service "monitor" endpoint result from a
// HTTP "OK" response.
func NewMonitorEventOK(body *MonitorResponseBody) *ingest.MonitorEvent {
	v := &ingest.MonitorEvent{}
	if body.Event != nil {
		switch *body.Event.Type {
		case "monitor_ping_event":
			var val *ingest.MonitorPingEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_created_event":
			var val *ingest.SIPCreatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_updated_event":
			var val *ingest.SIPUpdatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_status_updated_event":
			var val *ingest.SIPStatusUpdatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_location_updated_event":
			var val *ingest.SIPLocationUpdatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_preservation_action_created_event":
			var val *ingest.SIPPreservationActionCreatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_preservation_action_updated_event":
			var val *ingest.SIPPreservationActionUpdatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_preservation_task_created_event":
			var val *ingest.SIPPreservationTaskCreatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		case "sip_preservation_task_updated_event":
			var val *ingest.SIPPreservationTaskUpdatedEvent
			json.Unmarshal([]byte(*body.Event.Value), &val)
			v.Event = val
		}
	}

	return v
}

// NewMonitorNotAvailable builds a ingest service monitor endpoint
// not_available error.
func NewMonitorNotAvailable(body *MonitorNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorForbidden builds a ingest service monitor endpoint forbidden error.
func NewMonitorForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewMonitorUnauthorized builds a ingest service monitor endpoint unauthorized
// error.
func NewMonitorUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewListSipsSIPsOK builds a "ingest" service "list_sips" endpoint result from
// a HTTP "OK" response.
func NewListSipsSIPsOK(body *ListSipsResponseBody) *ingestviews.SIPsView {
	v := &ingestviews.SIPsView{}
	v.Items = make([]*ingestviews.SIPView, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalSIPResponseBodyToIngestviewsSIPView(val)
	}
	v.Page = unmarshalEnduroPageResponseBodyToIngestviewsEnduroPageView(body.Page)

	return v
}

// NewListSipsNotValid builds a ingest service list_sips endpoint not_valid
// error.
func NewListSipsNotValid(body *ListSipsNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListSipsForbidden builds a ingest service list_sips endpoint forbidden
// error.
func NewListSipsForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewListSipsUnauthorized builds a ingest service list_sips endpoint
// unauthorized error.
func NewListSipsUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewShowSipSIPOK builds a "ingest" service "show_sip" endpoint result from a
// HTTP "OK" response.
func NewShowSipSIPOK(body *ShowSipResponseBody) *ingestviews.SIPView {
	v := &ingestviews.SIPView{
		ID:          body.ID,
		Name:        body.Name,
		LocationID:  body.LocationID,
		Status:      body.Status,
		WorkflowID:  body.WorkflowID,
		RunID:       body.RunID,
		AipID:       body.AipID,
		CreatedAt:   body.CreatedAt,
		StartedAt:   body.StartedAt,
		CompletedAt: body.CompletedAt,
	}

	return v
}

// NewShowSipNotAvailable builds a ingest service show_sip endpoint
// not_available error.
func NewShowSipNotAvailable(body *ShowSipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowSipNotFound builds a ingest service show_sip endpoint not_found error.
func NewShowSipNotFound(body *ShowSipNotFoundResponseBody) *ingest.SIPNotFound {
	v := &ingest.SIPNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewShowSipForbidden builds a ingest service show_sip endpoint forbidden
// error.
func NewShowSipForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewShowSipUnauthorized builds a ingest service show_sip endpoint
// unauthorized error.
func NewShowSipUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewListSipPreservationActionsSIPPreservationActionsOK builds a "ingest"
// service "list_sip_preservation_actions" endpoint result from a HTTP "OK"
// response.
func NewListSipPreservationActionsSIPPreservationActionsOK(body *ListSipPreservationActionsResponseBody) *ingestviews.SIPPreservationActionsView {
	v := &ingestviews.SIPPreservationActionsView{}
	if body.Actions != nil {
		v.Actions = make([]*ingestviews.SIPPreservationActionView, len(body.Actions))
		for i, val := range body.Actions {
			v.Actions[i] = unmarshalSIPPreservationActionResponseBodyToIngestviewsSIPPreservationActionView(val)
		}
	}

	return v
}

// NewListSipPreservationActionsNotFound builds a ingest service
// list_sip_preservation_actions endpoint not_found error.
func NewListSipPreservationActionsNotFound(body *ListSipPreservationActionsNotFoundResponseBody) *ingest.SIPNotFound {
	v := &ingest.SIPNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewListSipPreservationActionsForbidden builds a ingest service
// list_sip_preservation_actions endpoint forbidden error.
func NewListSipPreservationActionsForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewListSipPreservationActionsUnauthorized builds a ingest service
// list_sip_preservation_actions endpoint unauthorized error.
func NewListSipPreservationActionsUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewConfirmSipNotAvailable builds a ingest service confirm_sip endpoint
// not_available error.
func NewConfirmSipNotAvailable(body *ConfirmSipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewConfirmSipNotValid builds a ingest service confirm_sip endpoint not_valid
// error.
func NewConfirmSipNotValid(body *ConfirmSipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewConfirmSipNotFound builds a ingest service confirm_sip endpoint not_found
// error.
func NewConfirmSipNotFound(body *ConfirmSipNotFoundResponseBody) *ingest.SIPNotFound {
	v := &ingest.SIPNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewConfirmSipForbidden builds a ingest service confirm_sip endpoint
// forbidden error.
func NewConfirmSipForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewConfirmSipUnauthorized builds a ingest service confirm_sip endpoint
// unauthorized error.
func NewConfirmSipUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewRejectSipNotAvailable builds a ingest service reject_sip endpoint
// not_available error.
func NewRejectSipNotAvailable(body *RejectSipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectSipNotValid builds a ingest service reject_sip endpoint not_valid
// error.
func NewRejectSipNotValid(body *RejectSipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectSipNotFound builds a ingest service reject_sip endpoint not_found
// error.
func NewRejectSipNotFound(body *RejectSipNotFoundResponseBody) *ingest.SIPNotFound {
	v := &ingest.SIPNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewRejectSipForbidden builds a ingest service reject_sip endpoint forbidden
// error.
func NewRejectSipForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewRejectSipUnauthorized builds a ingest service reject_sip endpoint
// unauthorized error.
func NewRejectSipUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewMoveSipNotAvailable builds a ingest service move_sip endpoint
// not_available error.
func NewMoveSipNotAvailable(body *MoveSipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveSipNotValid builds a ingest service move_sip endpoint not_valid error.
func NewMoveSipNotValid(body *MoveSipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveSipNotFound builds a ingest service move_sip endpoint not_found error.
func NewMoveSipNotFound(body *MoveSipNotFoundResponseBody) *ingest.SIPNotFound {
	v := &ingest.SIPNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewMoveSipForbidden builds a ingest service move_sip endpoint forbidden
// error.
func NewMoveSipForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewMoveSipUnauthorized builds a ingest service move_sip endpoint
// unauthorized error.
func NewMoveSipUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewMoveSipStatusMoveStatusResultOK builds a "ingest" service
// "move_sip_status" endpoint result from a HTTP "OK" response.
func NewMoveSipStatusMoveStatusResultOK(body *MoveSipStatusResponseBody) *ingest.MoveStatusResult {
	v := &ingest.MoveStatusResult{
		Done: *body.Done,
	}

	return v
}

// NewMoveSipStatusFailedDependency builds a ingest service move_sip_status
// endpoint failed_dependency error.
func NewMoveSipStatusFailedDependency(body *MoveSipStatusFailedDependencyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveSipStatusNotFound builds a ingest service move_sip_status endpoint
// not_found error.
func NewMoveSipStatusNotFound(body *MoveSipStatusNotFoundResponseBody) *ingest.SIPNotFound {
	v := &ingest.SIPNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewMoveSipStatusForbidden builds a ingest service move_sip_status endpoint
// forbidden error.
func NewMoveSipStatusForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewMoveSipStatusUnauthorized builds a ingest service move_sip_status
// endpoint unauthorized error.
func NewMoveSipStatusUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// NewUploadSipInvalidMediaType builds a ingest service upload_sip endpoint
// invalid_media_type error.
func NewUploadSipInvalidMediaType(body *UploadSipInvalidMediaTypeResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadSipInvalidMultipartRequest builds a ingest service upload_sip
// endpoint invalid_multipart_request error.
func NewUploadSipInvalidMultipartRequest(body *UploadSipInvalidMultipartRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadSipInternalError builds a ingest service upload_sip endpoint
// internal_error error.
func NewUploadSipInternalError(body *UploadSipInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadSipForbidden builds a ingest service upload_sip endpoint forbidden
// error.
func NewUploadSipForbidden(body string) ingest.Forbidden {
	v := ingest.Forbidden(body)

	return v
}

// NewUploadSipUnauthorized builds a ingest service upload_sip endpoint
// unauthorized error.
func NewUploadSipUnauthorized(body string) ingest.Unauthorized {
	v := ingest.Unauthorized(body)

	return v
}

// ValidateMonitorResponseBody runs the validations defined on
// MonitorResponseBody
func ValidateMonitorResponseBody(body *MonitorResponseBody) (err error) {
	if body.Event != nil {
		if body.Event.Type == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Type", "body.event"))
		}
		if body.Event.Value == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Value", "body.event"))
		}
		if body.Event.Type != nil {
			if !(*body.Event.Type == "monitor_ping_event" || *body.Event.Type == "sip_created_event" || *body.Event.Type == "sip_updated_event" || *body.Event.Type == "sip_status_updated_event" || *body.Event.Type == "sip_location_updated_event" || *body.Event.Type == "sip_preservation_action_created_event" || *body.Event.Type == "sip_preservation_action_updated_event" || *body.Event.Type == "sip_preservation_task_created_event" || *body.Event.Type == "sip_preservation_task_updated_event") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.event.Type", *body.Event.Type, []any{"monitor_ping_event", "sip_created_event", "sip_updated_event", "sip_status_updated_event", "sip_location_updated_event", "sip_preservation_action_created_event", "sip_preservation_action_updated_event", "sip_preservation_task_created_event", "sip_preservation_task_updated_event"}))
			}
		}
	}
	return
}

// ValidateMoveSipStatusResponseBody runs the validations defined on
// move_sip_status_response_body
func ValidateMoveSipStatusResponseBody(body *MoveSipStatusResponseBody) (err error) {
	if body.Done == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("done", "body"))
	}
	return
}

// ValidateMonitorRequestNotAvailableResponseBody runs the validations defined
// on monitor_request_not_available_response_body
func ValidateMonitorRequestNotAvailableResponseBody(body *MonitorRequestNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMonitorNotAvailableResponseBody runs the validations defined on
// monitor_not_available_response_body
func ValidateMonitorNotAvailableResponseBody(body *MonitorNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListSipsNotValidResponseBody runs the validations defined on
// list_sips_not_valid_response_body
func ValidateListSipsNotValidResponseBody(body *ListSipsNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowSipNotAvailableResponseBody runs the validations defined on
// show_sip_not_available_response_body
func ValidateShowSipNotAvailableResponseBody(body *ShowSipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowSipNotFoundResponseBody runs the validations defined on
// show_sip_not_found_response_body
func ValidateShowSipNotFoundResponseBody(body *ShowSipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateListSipPreservationActionsNotFoundResponseBody runs the validations
// defined on list_sip_preservation_actions_not_found_response_body
func ValidateListSipPreservationActionsNotFoundResponseBody(body *ListSipPreservationActionsNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateConfirmSipNotAvailableResponseBody runs the validations defined on
// confirm_sip_not_available_response_body
func ValidateConfirmSipNotAvailableResponseBody(body *ConfirmSipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateConfirmSipNotValidResponseBody runs the validations defined on
// confirm_sip_not_valid_response_body
func ValidateConfirmSipNotValidResponseBody(body *ConfirmSipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateConfirmSipNotFoundResponseBody runs the validations defined on
// confirm_sip_not_found_response_body
func ValidateConfirmSipNotFoundResponseBody(body *ConfirmSipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateRejectSipNotAvailableResponseBody runs the validations defined on
// reject_sip_not_available_response_body
func ValidateRejectSipNotAvailableResponseBody(body *RejectSipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectSipNotValidResponseBody runs the validations defined on
// reject_sip_not_valid_response_body
func ValidateRejectSipNotValidResponseBody(body *RejectSipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectSipNotFoundResponseBody runs the validations defined on
// reject_sip_not_found_response_body
func ValidateRejectSipNotFoundResponseBody(body *RejectSipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateMoveSipNotAvailableResponseBody runs the validations defined on
// move_sip_not_available_response_body
func ValidateMoveSipNotAvailableResponseBody(body *MoveSipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveSipNotValidResponseBody runs the validations defined on
// move_sip_not_valid_response_body
func ValidateMoveSipNotValidResponseBody(body *MoveSipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveSipNotFoundResponseBody runs the validations defined on
// move_sip_not_found_response_body
func ValidateMoveSipNotFoundResponseBody(body *MoveSipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateMoveSipStatusFailedDependencyResponseBody runs the validations
// defined on move_sip_status_failed_dependency_response_body
func ValidateMoveSipStatusFailedDependencyResponseBody(body *MoveSipStatusFailedDependencyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveSipStatusNotFoundResponseBody runs the validations defined on
// move_sip_status_not_found_response_body
func ValidateMoveSipStatusNotFoundResponseBody(body *MoveSipStatusNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateUploadSipInvalidMediaTypeResponseBody runs the validations defined
// on upload_sip_invalid_media_type_response_body
func ValidateUploadSipInvalidMediaTypeResponseBody(body *UploadSipInvalidMediaTypeResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUploadSipInvalidMultipartRequestResponseBody runs the validations
// defined on upload_sip_invalid_multipart_request_response_body
func ValidateUploadSipInvalidMultipartRequestResponseBody(body *UploadSipInvalidMultipartRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUploadSipInternalErrorResponseBody runs the validations defined on
// upload_sip_internal_error_response_body
func ValidateUploadSipInternalErrorResponseBody(body *UploadSipInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSIPCollectionResponseBody runs the validations defined on
// SIPCollectionResponseBody
func ValidateSIPCollectionResponseBody(body SIPCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateSIPResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSIPResponseBody runs the validations defined on SIPResponseBody
func ValidateSIPResponseBody(body *SIPResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "new" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "unknown" || *body.Status == "queued" || *body.Status == "abandoned" || *body.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"new", "in progress", "done", "error", "unknown", "queued", "abandoned", "pending"}))
		}
	}
	if body.WorkflowID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workflow_id", *body.WorkflowID, goa.FormatUUID))
	}
	if body.RunID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.run_id", *body.RunID, goa.FormatUUID))
	}
	if body.AipID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.aip_id", *body.AipID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnduroPageResponseBody runs the validations defined on
// EnduroPageResponseBody
func ValidateEnduroPageResponseBody(body *EnduroPageResponseBody) (err error) {
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	return
}

// ValidateSIPPreservationActionCollectionResponseBody runs the validations
// defined on SIPPreservationActionCollectionResponseBody
func ValidateSIPPreservationActionCollectionResponseBody(body SIPPreservationActionCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateSIPPreservationActionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSIPPreservationActionResponseBody runs the validations defined on
// SIPPreservationActionResponseBody
func ValidateSIPPreservationActionResponseBody(body *SIPPreservationActionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkflowID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "unspecified" || *body.Type == "create aip" || *body.Type == "create and review aip" || *body.Type == "move package") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"unspecified", "create aip", "create and review aip", "move package"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "queued" || *body.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	if body.Tasks != nil {
		if err2 := ValidateSIPPreservationTaskCollectionResponseBody(body.Tasks); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSIPPreservationTaskCollectionResponseBody runs the validations
// defined on SIPPreservationTaskCollectionResponseBody
func ValidateSIPPreservationTaskCollectionResponseBody(body SIPPreservationTaskCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateSIPPreservationTaskResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSIPPreservationTaskResponseBody runs the validations defined on
// SIPPreservationTaskResponseBody
func ValidateSIPPreservationTaskResponseBody(body *SIPPreservationTaskResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.StartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("started_at", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "queued" || *body.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	return
}
