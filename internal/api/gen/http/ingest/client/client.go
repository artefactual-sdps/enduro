// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest client HTTP transport
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"context"
	"net/http"
	"time"

	ingest "github.com/artefactual-sdps/enduro/internal/api/gen/ingest"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the ingest service endpoint HTTP clients.
type Client struct {
	// MonitorRequest Doer is the HTTP client used to make requests to the
	// monitor_request endpoint.
	MonitorRequestDoer goahttp.Doer

	// Monitor Doer is the HTTP client used to make requests to the monitor
	// endpoint.
	MonitorDoer goahttp.Doer

	// ListSips Doer is the HTTP client used to make requests to the list_sips
	// endpoint.
	ListSipsDoer goahttp.Doer

	// ShowSip Doer is the HTTP client used to make requests to the show_sip
	// endpoint.
	ShowSipDoer goahttp.Doer

	// ListSipWorkflows Doer is the HTTP client used to make requests to the
	// list_sip_workflows endpoint.
	ListSipWorkflowsDoer goahttp.Doer

	// ConfirmSip Doer is the HTTP client used to make requests to the confirm_sip
	// endpoint.
	ConfirmSipDoer goahttp.Doer

	// RejectSip Doer is the HTTP client used to make requests to the reject_sip
	// endpoint.
	RejectSipDoer goahttp.Doer

	// UploadSip Doer is the HTTP client used to make requests to the upload_sip
	// endpoint.
	UploadSipDoer goahttp.Doer

	// DownloadSipRequest Doer is the HTTP client used to make requests to the
	// download_sip_request endpoint.
	DownloadSipRequestDoer goahttp.Doer

	// DownloadSip Doer is the HTTP client used to make requests to the
	// download_sip endpoint.
	DownloadSipDoer goahttp.Doer

	// ListUsers Doer is the HTTP client used to make requests to the list_users
	// endpoint.
	ListUsersDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the ingest service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		MonitorRequestDoer:     doer,
		MonitorDoer:            doer,
		ListSipsDoer:           doer,
		ShowSipDoer:            doer,
		ListSipWorkflowsDoer:   doer,
		ConfirmSipDoer:         doer,
		RejectSipDoer:          doer,
		UploadSipDoer:          doer,
		DownloadSipRequestDoer: doer,
		DownloadSipDoer:        doer,
		ListUsersDoer:          doer,
		CORSDoer:               doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
		dialer:                 dialer,
		configurer:             cfn,
	}
}

// MonitorRequest returns an endpoint that makes HTTP requests to the ingest
// service monitor_request server.
func (c *Client) MonitorRequest() goa.Endpoint {
	var (
		encodeRequest  = EncodeMonitorRequestRequest(c.encoder)
		decodeResponse = DecodeMonitorRequestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorRequestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MonitorRequestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "monitor_request", err)
		}
		return decodeResponse(resp)
	}
}

// Monitor returns an endpoint that makes HTTP requests to the ingest service
// monitor server.
func (c *Client) Monitor() goa.Endpoint {
	var (
		encodeRequest  = EncodeMonitorRequest(c.encoder)
		decodeResponse = DecodeMonitorResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("ingest", "monitor", err)
		}
		if c.configurer.MonitorFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.MonitorFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &MonitorClientStream{conn: conn}
		return stream, nil
	}
}

// ListSips returns an endpoint that makes HTTP requests to the ingest service
// list_sips server.
func (c *Client) ListSips() goa.Endpoint {
	var (
		encodeRequest  = EncodeListSipsRequest(c.encoder)
		decodeResponse = DecodeListSipsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListSipsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListSipsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "list_sips", err)
		}
		return decodeResponse(resp)
	}
}

// ShowSip returns an endpoint that makes HTTP requests to the ingest service
// show_sip server.
func (c *Client) ShowSip() goa.Endpoint {
	var (
		encodeRequest  = EncodeShowSipRequest(c.encoder)
		decodeResponse = DecodeShowSipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildShowSipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowSipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "show_sip", err)
		}
		return decodeResponse(resp)
	}
}

// ListSipWorkflows returns an endpoint that makes HTTP requests to the ingest
// service list_sip_workflows server.
func (c *Client) ListSipWorkflows() goa.Endpoint {
	var (
		encodeRequest  = EncodeListSipWorkflowsRequest(c.encoder)
		decodeResponse = DecodeListSipWorkflowsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListSipWorkflowsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListSipWorkflowsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "list_sip_workflows", err)
		}
		return decodeResponse(resp)
	}
}

// ConfirmSip returns an endpoint that makes HTTP requests to the ingest
// service confirm_sip server.
func (c *Client) ConfirmSip() goa.Endpoint {
	var (
		encodeRequest  = EncodeConfirmSipRequest(c.encoder)
		decodeResponse = DecodeConfirmSipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildConfirmSipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ConfirmSipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "confirm_sip", err)
		}
		return decodeResponse(resp)
	}
}

// RejectSip returns an endpoint that makes HTTP requests to the ingest service
// reject_sip server.
func (c *Client) RejectSip() goa.Endpoint {
	var (
		encodeRequest  = EncodeRejectSipRequest(c.encoder)
		decodeResponse = DecodeRejectSipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRejectSipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RejectSipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "reject_sip", err)
		}
		return decodeResponse(resp)
	}
}

// UploadSip returns an endpoint that makes HTTP requests to the ingest service
// upload_sip server.
func (c *Client) UploadSip() goa.Endpoint {
	var (
		encodeRequest  = EncodeUploadSipRequest(c.encoder)
		decodeResponse = DecodeUploadSipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUploadSipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UploadSipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "upload_sip", err)
		}
		return decodeResponse(resp)
	}
}

// DownloadSipRequest returns an endpoint that makes HTTP requests to the
// ingest service download_sip_request server.
func (c *Client) DownloadSipRequest() goa.Endpoint {
	var (
		encodeRequest  = EncodeDownloadSipRequestRequest(c.encoder)
		decodeResponse = DecodeDownloadSipRequestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDownloadSipRequestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DownloadSipRequestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "download_sip_request", err)
		}
		return decodeResponse(resp)
	}
}

// DownloadSip returns an endpoint that makes HTTP requests to the ingest
// service download_sip server.
func (c *Client) DownloadSip() goa.Endpoint {
	var (
		encodeRequest  = EncodeDownloadSipRequest(c.encoder)
		decodeResponse = DecodeDownloadSipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDownloadSipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DownloadSipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "download_sip", err)
		}
		res, err := decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &ingest.DownloadSipResponseData{Result: res.(*ingest.DownloadSipResult), Body: resp.Body}, nil
	}
}

// ListUsers returns an endpoint that makes HTTP requests to the ingest service
// list_users server.
func (c *Client) ListUsers() goa.Endpoint {
	var (
		encodeRequest  = EncodeListUsersRequest(c.encoder)
		decodeResponse = DecodeListUsersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListUsersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListUsersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("ingest", "list_users", err)
		}
		return decodeResponse(resp)
	}
}
