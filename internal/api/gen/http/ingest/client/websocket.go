// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest WebSocket client streaming
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"io"

	ingest "github.com/artefactual-sdps/enduro/internal/api/gen/ingest"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "ingest" service.
type ConnConfigurer struct {
	MonitorFn goahttp.ConnConfigureFunc
}

// MonitorClientStream implements the ingest.MonitorClientStream interface.
type MonitorClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "ingest" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		MonitorFn: fn,
	}
}

// Recv reads instances of "ingest.IngestEvent" from the "monitor" endpoint
// websocket connection.
func (s *MonitorClientStream) Recv() (*ingest.IngestEvent, error) {
	var (
		rv   *ingest.IngestEvent
		body MonitorResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateMonitorResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewMonitorIngestEventOK(&body)
	return res, nil
}
