// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest HTTP server
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package server

import (
	"context"
	"net/http"
	"os"

	ingest "github.com/artefactual-sdps/enduro/internal/api/gen/ingest"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the ingest service endpoint HTTP handlers.
type Server struct {
	Mounts                     []*MountPoint
	MonitorRequest             http.Handler
	Monitor                    http.Handler
	ListSips                   http.Handler
	ShowSip                    http.Handler
	ListSipPreservationActions http.Handler
	ConfirmSip                 http.Handler
	RejectSip                  http.Handler
	MoveSip                    http.Handler
	MoveSipStatus              http.Handler
	UploadSip                  http.Handler
	CORS                       http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the ingest service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *ingest.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer *ConnConfigurer,
) *Server {
	if configurer == nil {
		configurer = &ConnConfigurer{}
	}
	return &Server{
		Mounts: []*MountPoint{
			{"MonitorRequest", "POST", "/ingest/monitor"},
			{"Monitor", "GET", "/ingest/monitor"},
			{"ListSips", "GET", "/ingest/sips"},
			{"ShowSip", "GET", "/ingest/sips/{id}"},
			{"ListSipPreservationActions", "GET", "/ingest/sips/{id}/preservation-actions"},
			{"ConfirmSip", "POST", "/ingest/sips/{id}/confirm"},
			{"RejectSip", "POST", "/ingest/sips/{id}/reject"},
			{"MoveSip", "POST", "/ingest/sips/{id}/move"},
			{"MoveSipStatus", "GET", "/ingest/sips/{id}/move"},
			{"UploadSip", "POST", "/ingest/sips/upload"},
			{"CORS", "OPTIONS", "/ingest/monitor"},
			{"CORS", "OPTIONS", "/ingest/sips"},
			{"CORS", "OPTIONS", "/ingest/sips/{id}"},
			{"CORS", "OPTIONS", "/ingest/sips/{id}/preservation-actions"},
			{"CORS", "OPTIONS", "/ingest/sips/{id}/confirm"},
			{"CORS", "OPTIONS", "/ingest/sips/{id}/reject"},
			{"CORS", "OPTIONS", "/ingest/sips/{id}/move"},
			{"CORS", "OPTIONS", "/ingest/sips/upload"},
		},
		MonitorRequest:             NewMonitorRequestHandler(e.MonitorRequest, mux, decoder, encoder, errhandler, formatter),
		Monitor:                    NewMonitorHandler(e.Monitor, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.MonitorFn),
		ListSips:                   NewListSipsHandler(e.ListSips, mux, decoder, encoder, errhandler, formatter),
		ShowSip:                    NewShowSipHandler(e.ShowSip, mux, decoder, encoder, errhandler, formatter),
		ListSipPreservationActions: NewListSipPreservationActionsHandler(e.ListSipPreservationActions, mux, decoder, encoder, errhandler, formatter),
		ConfirmSip:                 NewConfirmSipHandler(e.ConfirmSip, mux, decoder, encoder, errhandler, formatter),
		RejectSip:                  NewRejectSipHandler(e.RejectSip, mux, decoder, encoder, errhandler, formatter),
		MoveSip:                    NewMoveSipHandler(e.MoveSip, mux, decoder, encoder, errhandler, formatter),
		MoveSipStatus:              NewMoveSipStatusHandler(e.MoveSipStatus, mux, decoder, encoder, errhandler, formatter),
		UploadSip:                  NewUploadSipHandler(e.UploadSip, mux, decoder, encoder, errhandler, formatter),
		CORS:                       NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "ingest" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.MonitorRequest = m(s.MonitorRequest)
	s.Monitor = m(s.Monitor)
	s.ListSips = m(s.ListSips)
	s.ShowSip = m(s.ShowSip)
	s.ListSipPreservationActions = m(s.ListSipPreservationActions)
	s.ConfirmSip = m(s.ConfirmSip)
	s.RejectSip = m(s.RejectSip)
	s.MoveSip = m(s.MoveSip)
	s.MoveSipStatus = m(s.MoveSipStatus)
	s.UploadSip = m(s.UploadSip)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return ingest.MethodNames[:] }

// Mount configures the mux to serve the ingest endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountMonitorRequestHandler(mux, h.MonitorRequest)
	MountMonitorHandler(mux, h.Monitor)
	MountListSipsHandler(mux, h.ListSips)
	MountShowSipHandler(mux, h.ShowSip)
	MountListSipPreservationActionsHandler(mux, h.ListSipPreservationActions)
	MountConfirmSipHandler(mux, h.ConfirmSip)
	MountRejectSipHandler(mux, h.RejectSip)
	MountMoveSipHandler(mux, h.MoveSip)
	MountMoveSipStatusHandler(mux, h.MoveSipStatus)
	MountUploadSipHandler(mux, h.UploadSip)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the ingest endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountMonitorRequestHandler configures the mux to serve the "ingest" service
// "monitor_request" endpoint.
func MountMonitorRequestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/monitor", otelhttp.WithRouteTag("/ingest/monitor", f).ServeHTTP)
}

// NewMonitorRequestHandler creates a HTTP handler which loads the HTTP request
// and calls the "ingest" service "monitor_request" endpoint.
func NewMonitorRequestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMonitorRequestRequest(mux, decoder)
		encodeResponse = EncodeMonitorRequestResponse(encoder)
		encodeError    = EncodeMonitorRequestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "monitor_request")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMonitorHandler configures the mux to serve the "ingest" service
// "monitor" endpoint.
func MountMonitorHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/monitor", otelhttp.WithRouteTag("/ingest/monitor", f).ServeHTTP)
}

// NewMonitorHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "monitor" endpoint.
func NewMonitorHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeMonitorRequest(mux, decoder)
		encodeError   = EncodeMonitorError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "monitor")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &ingest.MonitorEndpointInput{
			Stream: &MonitorServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload.(*ingest.MonitorPayload),
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			if v.Stream.(*MonitorServerStream).conn != nil {
				// Response writer has been hijacked, do not encode the error
				errhandler(ctx, w, err)
				return
			}
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountListSipsHandler configures the mux to serve the "ingest" service
// "list_sips" endpoint.
func MountListSipsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips", otelhttp.WithRouteTag("/ingest/sips", f).ServeHTTP)
}

// NewListSipsHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "list_sips" endpoint.
func NewListSipsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListSipsRequest(mux, decoder)
		encodeResponse = EncodeListSipsResponse(encoder)
		encodeError    = EncodeListSipsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_sips")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountShowSipHandler configures the mux to serve the "ingest" service
// "show_sip" endpoint.
func MountShowSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips/{id}", otelhttp.WithRouteTag("/ingest/sips/{id}", f).ServeHTTP)
}

// NewShowSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "show_sip" endpoint.
func NewShowSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeShowSipRequest(mux, decoder)
		encodeResponse = EncodeShowSipResponse(encoder)
		encodeError    = EncodeShowSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "show_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListSipPreservationActionsHandler configures the mux to serve the
// "ingest" service "list_sip_preservation_actions" endpoint.
func MountListSipPreservationActionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips/{id}/preservation-actions", otelhttp.WithRouteTag("/ingest/sips/{id}/preservation-actions", f).ServeHTTP)
}

// NewListSipPreservationActionsHandler creates a HTTP handler which loads the
// HTTP request and calls the "ingest" service "list_sip_preservation_actions"
// endpoint.
func NewListSipPreservationActionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListSipPreservationActionsRequest(mux, decoder)
		encodeResponse = EncodeListSipPreservationActionsResponse(encoder)
		encodeError    = EncodeListSipPreservationActionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_sip_preservation_actions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountConfirmSipHandler configures the mux to serve the "ingest" service
// "confirm_sip" endpoint.
func MountConfirmSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/{id}/confirm", otelhttp.WithRouteTag("/ingest/sips/{id}/confirm", f).ServeHTTP)
}

// NewConfirmSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "confirm_sip" endpoint.
func NewConfirmSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeConfirmSipRequest(mux, decoder)
		encodeResponse = EncodeConfirmSipResponse(encoder)
		encodeError    = EncodeConfirmSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "confirm_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRejectSipHandler configures the mux to serve the "ingest" service
// "reject_sip" endpoint.
func MountRejectSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/{id}/reject", otelhttp.WithRouteTag("/ingest/sips/{id}/reject", f).ServeHTTP)
}

// NewRejectSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "reject_sip" endpoint.
func NewRejectSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRejectSipRequest(mux, decoder)
		encodeResponse = EncodeRejectSipResponse(encoder)
		encodeError    = EncodeRejectSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "reject_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMoveSipHandler configures the mux to serve the "ingest" service
// "move_sip" endpoint.
func MountMoveSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/{id}/move", otelhttp.WithRouteTag("/ingest/sips/{id}/move", f).ServeHTTP)
}

// NewMoveSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "move_sip" endpoint.
func NewMoveSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMoveSipRequest(mux, decoder)
		encodeResponse = EncodeMoveSipResponse(encoder)
		encodeError    = EncodeMoveSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "move_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMoveSipStatusHandler configures the mux to serve the "ingest" service
// "move_sip_status" endpoint.
func MountMoveSipStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips/{id}/move", otelhttp.WithRouteTag("/ingest/sips/{id}/move", f).ServeHTTP)
}

// NewMoveSipStatusHandler creates a HTTP handler which loads the HTTP request
// and calls the "ingest" service "move_sip_status" endpoint.
func NewMoveSipStatusHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMoveSipStatusRequest(mux, decoder)
		encodeResponse = EncodeMoveSipStatusResponse(encoder)
		encodeError    = EncodeMoveSipStatusError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "move_sip_status")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUploadSipHandler configures the mux to serve the "ingest" service
// "upload_sip" endpoint.
func MountUploadSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/upload", otelhttp.WithRouteTag("/ingest/sips/upload", f).ServeHTTP)
}

// NewUploadSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "upload_sip" endpoint.
func NewUploadSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadSipRequest(mux, decoder)
		encodeResponse = EncodeUploadSipResponse(encoder)
		encodeError    = EncodeUploadSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "upload_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		data := &ingest.UploadSipRequestData{Payload: payload.(*ingest.UploadSipPayload), Body: r.Body}
		res, err := endpoint(ctx, data)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service ingest.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleIngestOrigin(h)
	mux.Handle("OPTIONS", "/ingest/monitor", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{id}/preservation-actions", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{id}/confirm", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{id}/reject", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{id}/move", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/upload", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleIngestOrigin applies the CORS response headers corresponding to the
// origin for the service ingest.
func HandleIngestOrigin(h http.Handler) http.Handler {
	originStr0, present := os.LookupEnv("ENDURO_API_CORS_ORIGIN")
	if !present {
		panic("CORS origin environment variable \"ENDURO_API_CORS_ORIGIN\" not set!")
	}
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, originStr0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
