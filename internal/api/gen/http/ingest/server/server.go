// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest HTTP server
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package server

import (
	"bufio"
	"context"
	"io"
	"net/http"
	"os"

	ingest "github.com/artefactual-sdps/enduro/internal/api/gen/ingest"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the ingest service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	MonitorRequest     http.Handler
	Monitor            http.Handler
	ListSips           http.Handler
	ShowSip            http.Handler
	ListSipWorkflows   http.Handler
	ConfirmSip         http.Handler
	RejectSip          http.Handler
	UploadSip          http.Handler
	DownloadSipRequest http.Handler
	DownloadSip        http.Handler
	ListUsers          http.Handler
	CORS               http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the ingest service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *ingest.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer *ConnConfigurer,
) *Server {
	if configurer == nil {
		configurer = &ConnConfigurer{}
	}
	return &Server{
		Mounts: []*MountPoint{
			{"MonitorRequest", "POST", "/ingest/monitor"},
			{"Monitor", "GET", "/ingest/monitor"},
			{"ListSips", "GET", "/ingest/sips"},
			{"ShowSip", "GET", "/ingest/sips/{uuid}"},
			{"ListSipWorkflows", "GET", "/ingest/sips/{uuid}/workflows"},
			{"ConfirmSip", "POST", "/ingest/sips/{uuid}/confirm"},
			{"RejectSip", "POST", "/ingest/sips/{uuid}/reject"},
			{"UploadSip", "POST", "/ingest/sips/upload"},
			{"DownloadSipRequest", "POST", "/ingest/sips/{uuid}/download"},
			{"DownloadSip", "GET", "/ingest/sips/{uuid}/download"},
			{"ListUsers", "GET", "/ingest/users"},
			{"CORS", "OPTIONS", "/ingest/monitor"},
			{"CORS", "OPTIONS", "/ingest/sips"},
			{"CORS", "OPTIONS", "/ingest/sips/{uuid}"},
			{"CORS", "OPTIONS", "/ingest/sips/{uuid}/workflows"},
			{"CORS", "OPTIONS", "/ingest/sips/{uuid}/confirm"},
			{"CORS", "OPTIONS", "/ingest/sips/{uuid}/reject"},
			{"CORS", "OPTIONS", "/ingest/sips/upload"},
			{"CORS", "OPTIONS", "/ingest/sips/{uuid}/download"},
			{"CORS", "OPTIONS", "/ingest/users"},
		},
		MonitorRequest:     NewMonitorRequestHandler(e.MonitorRequest, mux, decoder, encoder, errhandler, formatter),
		Monitor:            NewMonitorHandler(e.Monitor, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.MonitorFn),
		ListSips:           NewListSipsHandler(e.ListSips, mux, decoder, encoder, errhandler, formatter),
		ShowSip:            NewShowSipHandler(e.ShowSip, mux, decoder, encoder, errhandler, formatter),
		ListSipWorkflows:   NewListSipWorkflowsHandler(e.ListSipWorkflows, mux, decoder, encoder, errhandler, formatter),
		ConfirmSip:         NewConfirmSipHandler(e.ConfirmSip, mux, decoder, encoder, errhandler, formatter),
		RejectSip:          NewRejectSipHandler(e.RejectSip, mux, decoder, encoder, errhandler, formatter),
		UploadSip:          NewUploadSipHandler(e.UploadSip, mux, decoder, encoder, errhandler, formatter),
		DownloadSipRequest: NewDownloadSipRequestHandler(e.DownloadSipRequest, mux, decoder, encoder, errhandler, formatter),
		DownloadSip:        NewDownloadSipHandler(e.DownloadSip, mux, decoder, encoder, errhandler, formatter),
		ListUsers:          NewListUsersHandler(e.ListUsers, mux, decoder, encoder, errhandler, formatter),
		CORS:               NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "ingest" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.MonitorRequest = m(s.MonitorRequest)
	s.Monitor = m(s.Monitor)
	s.ListSips = m(s.ListSips)
	s.ShowSip = m(s.ShowSip)
	s.ListSipWorkflows = m(s.ListSipWorkflows)
	s.ConfirmSip = m(s.ConfirmSip)
	s.RejectSip = m(s.RejectSip)
	s.UploadSip = m(s.UploadSip)
	s.DownloadSipRequest = m(s.DownloadSipRequest)
	s.DownloadSip = m(s.DownloadSip)
	s.ListUsers = m(s.ListUsers)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return ingest.MethodNames[:] }

// Mount configures the mux to serve the ingest endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountMonitorRequestHandler(mux, h.MonitorRequest)
	MountMonitorHandler(mux, h.Monitor)
	MountListSipsHandler(mux, h.ListSips)
	MountShowSipHandler(mux, h.ShowSip)
	MountListSipWorkflowsHandler(mux, h.ListSipWorkflows)
	MountConfirmSipHandler(mux, h.ConfirmSip)
	MountRejectSipHandler(mux, h.RejectSip)
	MountUploadSipHandler(mux, h.UploadSip)
	MountDownloadSipRequestHandler(mux, h.DownloadSipRequest)
	MountDownloadSipHandler(mux, h.DownloadSip)
	MountListUsersHandler(mux, h.ListUsers)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the ingest endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountMonitorRequestHandler configures the mux to serve the "ingest" service
// "monitor_request" endpoint.
func MountMonitorRequestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/monitor", otelhttp.WithRouteTag("/ingest/monitor", f).ServeHTTP)
}

// NewMonitorRequestHandler creates a HTTP handler which loads the HTTP request
// and calls the "ingest" service "monitor_request" endpoint.
func NewMonitorRequestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMonitorRequestRequest(mux, decoder)
		encodeResponse = EncodeMonitorRequestResponse(encoder)
		encodeError    = EncodeMonitorRequestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "monitor_request")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMonitorHandler configures the mux to serve the "ingest" service
// "monitor" endpoint.
func MountMonitorHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/monitor", otelhttp.WithRouteTag("/ingest/monitor", f).ServeHTTP)
}

// NewMonitorHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "monitor" endpoint.
func NewMonitorHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeMonitorRequest(mux, decoder)
		encodeError   = EncodeMonitorError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "monitor")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &ingest.MonitorEndpointInput{
			Stream: &MonitorServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload.(*ingest.MonitorPayload),
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			if v.Stream.(*MonitorServerStream).conn != nil {
				// Response writer has been hijacked, do not encode the error
				errhandler(ctx, w, err)
				return
			}
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountListSipsHandler configures the mux to serve the "ingest" service
// "list_sips" endpoint.
func MountListSipsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips", otelhttp.WithRouteTag("/ingest/sips", f).ServeHTTP)
}

// NewListSipsHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "list_sips" endpoint.
func NewListSipsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListSipsRequest(mux, decoder)
		encodeResponse = EncodeListSipsResponse(encoder)
		encodeError    = EncodeListSipsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_sips")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountShowSipHandler configures the mux to serve the "ingest" service
// "show_sip" endpoint.
func MountShowSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips/{uuid}", otelhttp.WithRouteTag("/ingest/sips/{uuid}", f).ServeHTTP)
}

// NewShowSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "show_sip" endpoint.
func NewShowSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeShowSipRequest(mux, decoder)
		encodeResponse = EncodeShowSipResponse(encoder)
		encodeError    = EncodeShowSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "show_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListSipWorkflowsHandler configures the mux to serve the "ingest"
// service "list_sip_workflows" endpoint.
func MountListSipWorkflowsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips/{uuid}/workflows", otelhttp.WithRouteTag("/ingest/sips/{uuid}/workflows", f).ServeHTTP)
}

// NewListSipWorkflowsHandler creates a HTTP handler which loads the HTTP
// request and calls the "ingest" service "list_sip_workflows" endpoint.
func NewListSipWorkflowsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListSipWorkflowsRequest(mux, decoder)
		encodeResponse = EncodeListSipWorkflowsResponse(encoder)
		encodeError    = EncodeListSipWorkflowsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_sip_workflows")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountConfirmSipHandler configures the mux to serve the "ingest" service
// "confirm_sip" endpoint.
func MountConfirmSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/{uuid}/confirm", otelhttp.WithRouteTag("/ingest/sips/{uuid}/confirm", f).ServeHTTP)
}

// NewConfirmSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "confirm_sip" endpoint.
func NewConfirmSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeConfirmSipRequest(mux, decoder)
		encodeResponse = EncodeConfirmSipResponse(encoder)
		encodeError    = EncodeConfirmSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "confirm_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRejectSipHandler configures the mux to serve the "ingest" service
// "reject_sip" endpoint.
func MountRejectSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/{uuid}/reject", otelhttp.WithRouteTag("/ingest/sips/{uuid}/reject", f).ServeHTTP)
}

// NewRejectSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "reject_sip" endpoint.
func NewRejectSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRejectSipRequest(mux, decoder)
		encodeResponse = EncodeRejectSipResponse(encoder)
		encodeError    = EncodeRejectSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "reject_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUploadSipHandler configures the mux to serve the "ingest" service
// "upload_sip" endpoint.
func MountUploadSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/upload", otelhttp.WithRouteTag("/ingest/sips/upload", f).ServeHTTP)
}

// NewUploadSipHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "upload_sip" endpoint.
func NewUploadSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadSipRequest(mux, decoder)
		encodeResponse = EncodeUploadSipResponse(encoder)
		encodeError    = EncodeUploadSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "upload_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		data := &ingest.UploadSipRequestData{Payload: payload.(*ingest.UploadSipPayload), Body: r.Body}
		res, err := endpoint(ctx, data)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDownloadSipRequestHandler configures the mux to serve the "ingest"
// service "download_sip_request" endpoint.
func MountDownloadSipRequestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/ingest/sips/{uuid}/download", otelhttp.WithRouteTag("/ingest/sips/{uuid}/download", f).ServeHTTP)
}

// NewDownloadSipRequestHandler creates a HTTP handler which loads the HTTP
// request and calls the "ingest" service "download_sip_request" endpoint.
func NewDownloadSipRequestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDownloadSipRequestRequest(mux, decoder)
		encodeResponse = EncodeDownloadSipRequestResponse(encoder)
		encodeError    = EncodeDownloadSipRequestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "download_sip_request")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDownloadSipHandler configures the mux to serve the "ingest" service
// "download_sip" endpoint.
func MountDownloadSipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/sips/{uuid}/download", otelhttp.WithRouteTag("/ingest/sips/{uuid}/download", f).ServeHTTP)
}

// NewDownloadSipHandler creates a HTTP handler which loads the HTTP request
// and calls the "ingest" service "download_sip" endpoint.
func NewDownloadSipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDownloadSipRequest(mux, decoder)
		encodeResponse = EncodeDownloadSipResponse(encoder)
		encodeError    = EncodeDownloadSipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "download_sip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		o := res.(*ingest.DownloadSipResponseData)
		defer o.Body.Close()
		// handle immediate read error like a returned error
		buf := bufio.NewReader(o.Body)
		if _, err := buf.Peek(1); err != nil && err != io.EOF {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, o.Result); err != nil {
			errhandler(ctx, w, err)
			return
		}
		if _, err := io.Copy(w, buf); err != nil {
			if f, ok := w.(http.Flusher); ok {
				f.Flush()
			}
			panic(http.ErrAbortHandler) // too late to write an error
		}
	})
}

// MountListUsersHandler configures the mux to serve the "ingest" service
// "list_users" endpoint.
func MountListUsersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleIngestOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/ingest/users", otelhttp.WithRouteTag("/ingest/users", f).ServeHTTP)
}

// NewListUsersHandler creates a HTTP handler which loads the HTTP request and
// calls the "ingest" service "list_users" endpoint.
func NewListUsersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListUsersRequest(mux, decoder)
		encodeResponse = EncodeListUsersResponse(encoder)
		encodeError    = EncodeListUsersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_users")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ingest")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service ingest.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleIngestOrigin(h)
	mux.Handle("OPTIONS", "/ingest/monitor", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{uuid}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{uuid}/workflows", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{uuid}/confirm", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{uuid}/reject", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/upload", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/sips/{uuid}/download", h.ServeHTTP)
	mux.Handle("OPTIONS", "/ingest/users", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleIngestOrigin applies the CORS response headers corresponding to the
// origin for the service ingest.
func HandleIngestOrigin(h http.Handler) http.Handler {
	originStr0, present := os.LookupEnv("ENDURO_API_CORS_ORIGIN")
	if !present {
		panic("CORS origin environment variable \"ENDURO_API_CORS_ORIGIN\" not set!")
	}
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, originStr0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
