// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ingest HTTP server types
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package server

import (
	"encoding/json"

	ingest "github.com/artefactual-sdps/enduro/internal/api/gen/ingest"
	ingestviews "github.com/artefactual-sdps/enduro/internal/api/gen/ingest/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// ConfirmSipRequestBody is the type of the "ingest" service "confirm_sip"
// endpoint HTTP request body.
type ConfirmSipRequestBody struct {
	// Identifier of storage location
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
}

// MonitorResponseBody is the type of the "ingest" service "monitor" endpoint
// HTTP response body.
type MonitorResponseBody struct {
	Event *struct {
		// Union type name, one of:
		// - "monitor_ping_event"
		// - "sip_created_event"
		// - "sip_updated_event"
		// - "sip_status_updated_event"
		// - "sip_workflow_created_event"
		// - "sip_workflow_updated_event"
		// - "sip_task_created_event"
		// - "sip_task_updated_event"
		Type string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value string `form:"Value" json:"Value" xml:"Value"`
	} `form:"event,omitempty" json:"event,omitempty" xml:"event,omitempty"`
}

// ListSipsResponseBody is the type of the "ingest" service "list_sips"
// endpoint HTTP response body.
type ListSipsResponseBody struct {
	Items SIPResponseBodyCollection `form:"items" json:"items" xml:"items"`
	Page  *EnduroPageResponseBody   `form:"page" json:"page" xml:"page"`
}

// ShowSipResponseBody is the type of the "ingest" service "show_sip" endpoint
// HTTP response body.
type ShowSipResponseBody struct {
	// Identifier of SIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Name of the SIP
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Status of the SIP
	Status string `form:"status" json:"status" xml:"status"`
	// Identifier of AIP
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Start datetime
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// Completion datetime
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	// Package type in case of failure (SIP or PIP)
	FailedAs *string `form:"failed_as,omitempty" json:"failed_as,omitempty" xml:"failed_as,omitempty"`
	// Object key of the failed package in the internal bucket
	FailedKey *string `form:"failed_key,omitempty" json:"failed_key,omitempty" xml:"failed_key,omitempty"`
	// UUID of the user who uploaded the SIP
	UploaderUUID *uuid.UUID `form:"uploader_uuid,omitempty" json:"uploader_uuid,omitempty" xml:"uploader_uuid,omitempty"`
	// Email of the user who uploaded the SIP
	UploaderEmail *string `form:"uploader_email,omitempty" json:"uploader_email,omitempty" xml:"uploader_email,omitempty"`
	// Name of the user who uploaded the SIP
	UploaderName *string `form:"uploader_name,omitempty" json:"uploader_name,omitempty" xml:"uploader_name,omitempty"`
}

// ListSipWorkflowsResponseBody is the type of the "ingest" service
// "list_sip_workflows" endpoint HTTP response body.
type ListSipWorkflowsResponseBody struct {
	Workflows SIPWorkflowResponseBodyCollection `form:"workflows,omitempty" json:"workflows,omitempty" xml:"workflows,omitempty"`
}

// UploadSipResponseBody is the type of the "ingest" service "upload_sip"
// endpoint HTTP response body.
type UploadSipResponseBody struct {
	// Identifier of uploaded SIP
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
}

// MonitorRequestNotAvailableResponseBody is the type of the "ingest" service
// "monitor_request" endpoint HTTP response body for the "not_available" error.
type MonitorRequestNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MonitorNotAvailableResponseBody is the type of the "ingest" service
// "monitor" endpoint HTTP response body for the "not_available" error.
type MonitorNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListSipsNotValidResponseBody is the type of the "ingest" service "list_sips"
// endpoint HTTP response body for the "not_valid" error.
type ListSipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowSipNotAvailableResponseBody is the type of the "ingest" service
// "show_sip" endpoint HTTP response body for the "not_available" error.
type ShowSipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowSipNotFoundResponseBody is the type of the "ingest" service "show_sip"
// endpoint HTTP response body for the "not_found" error.
type ShowSipNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing SIP
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
}

// ListSipWorkflowsNotFoundResponseBody is the type of the "ingest" service
// "list_sip_workflows" endpoint HTTP response body for the "not_found" error.
type ListSipWorkflowsNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing SIP
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
}

// ConfirmSipNotAvailableResponseBody is the type of the "ingest" service
// "confirm_sip" endpoint HTTP response body for the "not_available" error.
type ConfirmSipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ConfirmSipNotValidResponseBody is the type of the "ingest" service
// "confirm_sip" endpoint HTTP response body for the "not_valid" error.
type ConfirmSipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ConfirmSipNotFoundResponseBody is the type of the "ingest" service
// "confirm_sip" endpoint HTTP response body for the "not_found" error.
type ConfirmSipNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing SIP
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
}

// RejectSipNotAvailableResponseBody is the type of the "ingest" service
// "reject_sip" endpoint HTTP response body for the "not_available" error.
type RejectSipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RejectSipNotValidResponseBody is the type of the "ingest" service
// "reject_sip" endpoint HTTP response body for the "not_valid" error.
type RejectSipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RejectSipNotFoundResponseBody is the type of the "ingest" service
// "reject_sip" endpoint HTTP response body for the "not_found" error.
type RejectSipNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing SIP
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
}

// UploadSipInvalidMediaTypeResponseBody is the type of the "ingest" service
// "upload_sip" endpoint HTTP response body for the "invalid_media_type" error.
type UploadSipInvalidMediaTypeResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadSipInvalidMultipartRequestResponseBody is the type of the "ingest"
// service "upload_sip" endpoint HTTP response body for the
// "invalid_multipart_request" error.
type UploadSipInvalidMultipartRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadSipInternalErrorResponseBody is the type of the "ingest" service
// "upload_sip" endpoint HTTP response body for the "internal_error" error.
type UploadSipInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SIPResponseBodyCollection is used to define fields on response body types.
type SIPResponseBodyCollection []*SIPResponseBody

// SIPResponseBody is used to define fields on response body types.
type SIPResponseBody struct {
	// Identifier of SIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Name of the SIP
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Status of the SIP
	Status string `form:"status" json:"status" xml:"status"`
	// Identifier of AIP
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Start datetime
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// Completion datetime
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	// Package type in case of failure (SIP or PIP)
	FailedAs *string `form:"failed_as,omitempty" json:"failed_as,omitempty" xml:"failed_as,omitempty"`
	// Object key of the failed package in the internal bucket
	FailedKey *string `form:"failed_key,omitempty" json:"failed_key,omitempty" xml:"failed_key,omitempty"`
	// UUID of the user who uploaded the SIP
	UploaderUUID *uuid.UUID `form:"uploader_uuid,omitempty" json:"uploader_uuid,omitempty" xml:"uploader_uuid,omitempty"`
	// Email of the user who uploaded the SIP
	UploaderEmail *string `form:"uploader_email,omitempty" json:"uploader_email,omitempty" xml:"uploader_email,omitempty"`
	// Name of the user who uploaded the SIP
	UploaderName *string `form:"uploader_name,omitempty" json:"uploader_name,omitempty" xml:"uploader_name,omitempty"`
}

// EnduroPageResponseBody is used to define fields on response body types.
type EnduroPageResponseBody struct {
	// Maximum items per page
	Limit int `form:"limit" json:"limit" xml:"limit"`
	// Offset from first result to start of page
	Offset int `form:"offset" json:"offset" xml:"offset"`
	// Total result count before paging
	Total int `form:"total" json:"total" xml:"total"`
}

// SIPWorkflowResponseBodyCollection is used to define fields on response body
// types.
type SIPWorkflowResponseBodyCollection []*SIPWorkflowResponseBody

// SIPWorkflowResponseBody is used to define fields on response body types.
type SIPWorkflowResponseBody struct {
	ID          uint                          `form:"id" json:"id" xml:"id"`
	TemporalID  string                        `form:"temporal_id" json:"temporal_id" xml:"temporal_id"`
	Type        string                        `form:"type" json:"type" xml:"type"`
	Status      string                        `form:"status" json:"status" xml:"status"`
	StartedAt   string                        `form:"started_at" json:"started_at" xml:"started_at"`
	CompletedAt *string                       `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Tasks       SIPTaskResponseBodyCollection `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
	// Identifier of related SIP
	SipUUID uuid.UUID `form:"sip_uuid" json:"sip_uuid" xml:"sip_uuid"`
}

// SIPTaskResponseBodyCollection is used to define fields on response body
// types.
type SIPTaskResponseBodyCollection []*SIPTaskResponseBody

// SIPTaskResponseBody is used to define fields on response body types.
type SIPTaskResponseBody struct {
	ID          uint    `form:"id" json:"id" xml:"id"`
	TaskID      string  `form:"task_id" json:"task_id" xml:"task_id"`
	Name        string  `form:"name" json:"name" xml:"name"`
	Status      string  `form:"status" json:"status" xml:"status"`
	StartedAt   string  `form:"started_at" json:"started_at" xml:"started_at"`
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Note        *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	WorkflowID  *uint   `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
}

// NewMonitorResponseBody builds the HTTP response body from the result of the
// "monitor" endpoint of the "ingest" service.
func NewMonitorResponseBody(res *ingest.MonitorEvent) *MonitorResponseBody {
	body := &MonitorResponseBody{}
	if res.Event != nil {
		js, _ := json.Marshal(res.Event)
		var name string
		switch res.Event.(type) {
		case *ingest.MonitorPingEvent:
			name = "monitor_ping_event"
		case *ingest.SIPCreatedEvent:
			name = "sip_created_event"
		case *ingest.SIPUpdatedEvent:
			name = "sip_updated_event"
		case *ingest.SIPStatusUpdatedEvent:
			name = "sip_status_updated_event"
		case *ingest.SIPWorkflowCreatedEvent:
			name = "sip_workflow_created_event"
		case *ingest.SIPWorkflowUpdatedEvent:
			name = "sip_workflow_updated_event"
		case *ingest.SIPTaskCreatedEvent:
			name = "sip_task_created_event"
		case *ingest.SIPTaskUpdatedEvent:
			name = "sip_task_updated_event"
		}
		body.Event = &struct {
			// Union type name, one of:
			// - "monitor_ping_event"
			// - "sip_created_event"
			// - "sip_updated_event"
			// - "sip_status_updated_event"
			// - "sip_workflow_created_event"
			// - "sip_workflow_updated_event"
			// - "sip_task_created_event"
			// - "sip_task_updated_event"
			Type string `form:"Type" json:"Type" xml:"Type"`
			// JSON encoded union value
			Value string `form:"Value" json:"Value" xml:"Value"`
		}{
			Type:  name,
			Value: string(js),
		}
	}
	return body
}

// NewListSipsResponseBody builds the HTTP response body from the result of the
// "list_sips" endpoint of the "ingest" service.
func NewListSipsResponseBody(res *ingestviews.SIPsView) *ListSipsResponseBody {
	body := &ListSipsResponseBody{}
	if res.Items != nil {
		body.Items = make([]*SIPResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalIngestviewsSIPViewToSIPResponseBody(val)
		}
	} else {
		body.Items = []*SIPResponseBody{}
	}
	if res.Page != nil {
		body.Page = marshalIngestviewsEnduroPageViewToEnduroPageResponseBody(res.Page)
	}
	return body
}

// NewShowSipResponseBody builds the HTTP response body from the result of the
// "show_sip" endpoint of the "ingest" service.
func NewShowSipResponseBody(res *ingestviews.SIPView) *ShowSipResponseBody {
	body := &ShowSipResponseBody{
		UUID:          *res.UUID,
		Name:          res.Name,
		Status:        *res.Status,
		AipID:         res.AipID,
		CreatedAt:     *res.CreatedAt,
		StartedAt:     res.StartedAt,
		CompletedAt:   res.CompletedAt,
		FailedAs:      res.FailedAs,
		FailedKey:     res.FailedKey,
		UploaderUUID:  res.UploaderUUID,
		UploaderEmail: res.UploaderEmail,
		UploaderName:  res.UploaderName,
	}
	return body
}

// NewListSipWorkflowsResponseBody builds the HTTP response body from the
// result of the "list_sip_workflows" endpoint of the "ingest" service.
func NewListSipWorkflowsResponseBody(res *ingestviews.SIPWorkflowsView) *ListSipWorkflowsResponseBody {
	body := &ListSipWorkflowsResponseBody{}
	if res.Workflows != nil {
		body.Workflows = make([]*SIPWorkflowResponseBody, len(res.Workflows))
		for i, val := range res.Workflows {
			body.Workflows[i] = marshalIngestviewsSIPWorkflowViewToSIPWorkflowResponseBody(val)
		}
	}
	return body
}

// NewUploadSipResponseBody builds the HTTP response body from the result of
// the "upload_sip" endpoint of the "ingest" service.
func NewUploadSipResponseBody(res *ingest.UploadSipResult) *UploadSipResponseBody {
	body := &UploadSipResponseBody{
		UUID: res.UUID,
	}
	return body
}

// NewMonitorRequestNotAvailableResponseBody builds the HTTP response body from
// the result of the "monitor_request" endpoint of the "ingest" service.
func NewMonitorRequestNotAvailableResponseBody(res *goa.ServiceError) *MonitorRequestNotAvailableResponseBody {
	body := &MonitorRequestNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMonitorNotAvailableResponseBody builds the HTTP response body from the
// result of the "monitor" endpoint of the "ingest" service.
func NewMonitorNotAvailableResponseBody(res *goa.ServiceError) *MonitorNotAvailableResponseBody {
	body := &MonitorNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListSipsNotValidResponseBody builds the HTTP response body from the
// result of the "list_sips" endpoint of the "ingest" service.
func NewListSipsNotValidResponseBody(res *goa.ServiceError) *ListSipsNotValidResponseBody {
	body := &ListSipsNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowSipNotAvailableResponseBody builds the HTTP response body from the
// result of the "show_sip" endpoint of the "ingest" service.
func NewShowSipNotAvailableResponseBody(res *goa.ServiceError) *ShowSipNotAvailableResponseBody {
	body := &ShowSipNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowSipNotFoundResponseBody builds the HTTP response body from the result
// of the "show_sip" endpoint of the "ingest" service.
func NewShowSipNotFoundResponseBody(res *ingest.SIPNotFound) *ShowSipNotFoundResponseBody {
	body := &ShowSipNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewListSipWorkflowsNotFoundResponseBody builds the HTTP response body from
// the result of the "list_sip_workflows" endpoint of the "ingest" service.
func NewListSipWorkflowsNotFoundResponseBody(res *ingest.SIPNotFound) *ListSipWorkflowsNotFoundResponseBody {
	body := &ListSipWorkflowsNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewConfirmSipNotAvailableResponseBody builds the HTTP response body from the
// result of the "confirm_sip" endpoint of the "ingest" service.
func NewConfirmSipNotAvailableResponseBody(res *goa.ServiceError) *ConfirmSipNotAvailableResponseBody {
	body := &ConfirmSipNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewConfirmSipNotValidResponseBody builds the HTTP response body from the
// result of the "confirm_sip" endpoint of the "ingest" service.
func NewConfirmSipNotValidResponseBody(res *goa.ServiceError) *ConfirmSipNotValidResponseBody {
	body := &ConfirmSipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewConfirmSipNotFoundResponseBody builds the HTTP response body from the
// result of the "confirm_sip" endpoint of the "ingest" service.
func NewConfirmSipNotFoundResponseBody(res *ingest.SIPNotFound) *ConfirmSipNotFoundResponseBody {
	body := &ConfirmSipNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewRejectSipNotAvailableResponseBody builds the HTTP response body from the
// result of the "reject_sip" endpoint of the "ingest" service.
func NewRejectSipNotAvailableResponseBody(res *goa.ServiceError) *RejectSipNotAvailableResponseBody {
	body := &RejectSipNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRejectSipNotValidResponseBody builds the HTTP response body from the
// result of the "reject_sip" endpoint of the "ingest" service.
func NewRejectSipNotValidResponseBody(res *goa.ServiceError) *RejectSipNotValidResponseBody {
	body := &RejectSipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRejectSipNotFoundResponseBody builds the HTTP response body from the
// result of the "reject_sip" endpoint of the "ingest" service.
func NewRejectSipNotFoundResponseBody(res *ingest.SIPNotFound) *RejectSipNotFoundResponseBody {
	body := &RejectSipNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewUploadSipInvalidMediaTypeResponseBody builds the HTTP response body from
// the result of the "upload_sip" endpoint of the "ingest" service.
func NewUploadSipInvalidMediaTypeResponseBody(res *goa.ServiceError) *UploadSipInvalidMediaTypeResponseBody {
	body := &UploadSipInvalidMediaTypeResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadSipInvalidMultipartRequestResponseBody builds the HTTP response
// body from the result of the "upload_sip" endpoint of the "ingest" service.
func NewUploadSipInvalidMultipartRequestResponseBody(res *goa.ServiceError) *UploadSipInvalidMultipartRequestResponseBody {
	body := &UploadSipInvalidMultipartRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadSipInternalErrorResponseBody builds the HTTP response body from the
// result of the "upload_sip" endpoint of the "ingest" service.
func NewUploadSipInternalErrorResponseBody(res *goa.ServiceError) *UploadSipInternalErrorResponseBody {
	body := &UploadSipInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMonitorRequestPayload builds a ingest service monitor_request endpoint
// payload.
func NewMonitorRequestPayload(token *string) *ingest.MonitorRequestPayload {
	v := &ingest.MonitorRequestPayload{}
	v.Token = token

	return v
}

// NewMonitorPayload builds a ingest service monitor endpoint payload.
func NewMonitorPayload(ticket *string) *ingest.MonitorPayload {
	v := &ingest.MonitorPayload{}
	v.Ticket = ticket

	return v
}

// NewListSipsPayload builds a ingest service list_sips endpoint payload.
func NewListSipsPayload(name *string, aipID *string, earliestCreatedTime *string, latestCreatedTime *string, status *string, limit *int, offset *int, token *string) *ingest.ListSipsPayload {
	v := &ingest.ListSipsPayload{}
	v.Name = name
	v.AipID = aipID
	v.EarliestCreatedTime = earliestCreatedTime
	v.LatestCreatedTime = latestCreatedTime
	v.Status = status
	v.Limit = limit
	v.Offset = offset
	v.Token = token

	return v
}

// NewShowSipPayload builds a ingest service show_sip endpoint payload.
func NewShowSipPayload(uuid string, token *string) *ingest.ShowSipPayload {
	v := &ingest.ShowSipPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewListSipWorkflowsPayload builds a ingest service list_sip_workflows
// endpoint payload.
func NewListSipWorkflowsPayload(uuid string, token *string) *ingest.ListSipWorkflowsPayload {
	v := &ingest.ListSipWorkflowsPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewConfirmSipPayload builds a ingest service confirm_sip endpoint payload.
func NewConfirmSipPayload(body *ConfirmSipRequestBody, uuid string, token *string) *ingest.ConfirmSipPayload {
	v := &ingest.ConfirmSipPayload{
		LocationID: *body.LocationID,
	}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewRejectSipPayload builds a ingest service reject_sip endpoint payload.
func NewRejectSipPayload(uuid string, token *string) *ingest.RejectSipPayload {
	v := &ingest.RejectSipPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewUploadSipPayload builds a ingest service upload_sip endpoint payload.
func NewUploadSipPayload(contentType string, token *string) *ingest.UploadSipPayload {
	v := &ingest.UploadSipPayload{}
	v.ContentType = contentType
	v.Token = token

	return v
}

// ValidateConfirmSipRequestBody runs the validations defined on
// confirm_sip_request_body
func ValidateConfirmSipRequestBody(body *ConfirmSipRequestBody) (err error) {
	if body.LocationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location_id", "body"))
	}
	return
}
