// Code generated by goa v3.15.2, DO NOT EDIT.
//
// enduro HTTP client CLI support package
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	aboutc "github.com/artefactual-sdps/enduro/internal/api/gen/http/about/client"
	ingestc "github.com/artefactual-sdps/enduro/internal/api/gen/http/ingest/client"
	storagec "github.com/artefactual-sdps/enduro/internal/api/gen/http/storage/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `about about
ingest (monitor-request|monitor|list-sips|show-sip|list-sip-workflows|confirm-sip|reject-sip|upload-sip|download-sip-request|download-sip|list-users|list-sip-source-objects)
storage (monitor-request|monitor|list-aips|create-aip|submit-aip|update-aip|download-aip-request|download-aip|move-aip|move-aip-status|reject-aip|show-aip|list-aip-workflows|request-aip-deletion|review-aip-deletion|cancel-aip-deletion|list-locations|create-location|show-location|list-location-aips)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` about about --token "abc123"` + "\n" +
		os.Args[0] + ` ingest monitor-request --token "abc123"` + "\n" +
		os.Args[0] + ` storage monitor-request --token "abc123"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	ingestConfigurer *ingestc.ConnConfigurer,
	storageConfigurer *storagec.ConnConfigurer,
) (goa.Endpoint, any, error) {
	var (
		aboutFlags = flag.NewFlagSet("about", flag.ContinueOnError)

		aboutAboutFlags     = flag.NewFlagSet("about", flag.ExitOnError)
		aboutAboutTokenFlag = aboutAboutFlags.String("token", "", "")

		ingestFlags = flag.NewFlagSet("ingest", flag.ContinueOnError)

		ingestMonitorRequestFlags     = flag.NewFlagSet("monitor-request", flag.ExitOnError)
		ingestMonitorRequestTokenFlag = ingestMonitorRequestFlags.String("token", "", "")

		ingestMonitorFlags      = flag.NewFlagSet("monitor", flag.ExitOnError)
		ingestMonitorTicketFlag = ingestMonitorFlags.String("ticket", "", "")

		ingestListSipsFlags                   = flag.NewFlagSet("list-sips", flag.ExitOnError)
		ingestListSipsNameFlag                = ingestListSipsFlags.String("name", "", "")
		ingestListSipsAipUUIDFlag             = ingestListSipsFlags.String("aip-uuid", "", "")
		ingestListSipsEarliestCreatedTimeFlag = ingestListSipsFlags.String("earliest-created-time", "", "")
		ingestListSipsLatestCreatedTimeFlag   = ingestListSipsFlags.String("latest-created-time", "", "")
		ingestListSipsStatusFlag              = ingestListSipsFlags.String("status", "", "")
		ingestListSipsUploaderUUIDFlag        = ingestListSipsFlags.String("uploader-uuid", "", "")
		ingestListSipsLimitFlag               = ingestListSipsFlags.String("limit", "", "")
		ingestListSipsOffsetFlag              = ingestListSipsFlags.String("offset", "", "")
		ingestListSipsTokenFlag               = ingestListSipsFlags.String("token", "", "")

		ingestShowSipFlags     = flag.NewFlagSet("show-sip", flag.ExitOnError)
		ingestShowSipUUIDFlag  = ingestShowSipFlags.String("uuid", "REQUIRED", "Identifier of SIP to show")
		ingestShowSipTokenFlag = ingestShowSipFlags.String("token", "", "")

		ingestListSipWorkflowsFlags     = flag.NewFlagSet("list-sip-workflows", flag.ExitOnError)
		ingestListSipWorkflowsUUIDFlag  = ingestListSipWorkflowsFlags.String("uuid", "REQUIRED", "Identifier of SIP to look up")
		ingestListSipWorkflowsTokenFlag = ingestListSipWorkflowsFlags.String("token", "", "")

		ingestConfirmSipFlags     = flag.NewFlagSet("confirm-sip", flag.ExitOnError)
		ingestConfirmSipBodyFlag  = ingestConfirmSipFlags.String("body", "REQUIRED", "")
		ingestConfirmSipUUIDFlag  = ingestConfirmSipFlags.String("uuid", "REQUIRED", "Identifier of SIP to look up")
		ingestConfirmSipTokenFlag = ingestConfirmSipFlags.String("token", "", "")

		ingestRejectSipFlags     = flag.NewFlagSet("reject-sip", flag.ExitOnError)
		ingestRejectSipUUIDFlag  = ingestRejectSipFlags.String("uuid", "REQUIRED", "Identifier of SIP to look up")
		ingestRejectSipTokenFlag = ingestRejectSipFlags.String("token", "", "")

		ingestUploadSipFlags           = flag.NewFlagSet("upload-sip", flag.ExitOnError)
		ingestUploadSipContentTypeFlag = ingestUploadSipFlags.String("content-type", "multipart/form-data; boundary=goa", "")
		ingestUploadSipTokenFlag       = ingestUploadSipFlags.String("token", "", "")
		ingestUploadSipStreamFlag      = ingestUploadSipFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		ingestDownloadSipRequestFlags     = flag.NewFlagSet("download-sip-request", flag.ExitOnError)
		ingestDownloadSipRequestUUIDFlag  = ingestDownloadSipRequestFlags.String("uuid", "REQUIRED", "Identifier of the SIP to download")
		ingestDownloadSipRequestTokenFlag = ingestDownloadSipRequestFlags.String("token", "", "")

		ingestDownloadSipFlags      = flag.NewFlagSet("download-sip", flag.ExitOnError)
		ingestDownloadSipUUIDFlag   = ingestDownloadSipFlags.String("uuid", "REQUIRED", "Identifier of the SIP to download")
		ingestDownloadSipTicketFlag = ingestDownloadSipFlags.String("ticket", "", "")

		ingestListUsersFlags      = flag.NewFlagSet("list-users", flag.ExitOnError)
		ingestListUsersEmailFlag  = ingestListUsersFlags.String("email", "", "")
		ingestListUsersNameFlag   = ingestListUsersFlags.String("name", "", "")
		ingestListUsersLimitFlag  = ingestListUsersFlags.String("limit", "", "")
		ingestListUsersOffsetFlag = ingestListUsersFlags.String("offset", "", "")
		ingestListUsersTokenFlag  = ingestListUsersFlags.String("token", "", "")

		ingestListSipSourceObjectsFlags      = flag.NewFlagSet("list-sip-source-objects", flag.ExitOnError)
		ingestListSipSourceObjectsUUIDFlag   = ingestListSipSourceObjectsFlags.String("uuid", "REQUIRED", "SIP source identifier -- CURRENTLY NOT USED")
		ingestListSipSourceObjectsLimitFlag  = ingestListSipSourceObjectsFlags.String("limit", "", "")
		ingestListSipSourceObjectsCursorFlag = ingestListSipSourceObjectsFlags.String("cursor", "", "")
		ingestListSipSourceObjectsTokenFlag  = ingestListSipSourceObjectsFlags.String("token", "", "")

		storageFlags = flag.NewFlagSet("storage", flag.ContinueOnError)

		storageMonitorRequestFlags     = flag.NewFlagSet("monitor-request", flag.ExitOnError)
		storageMonitorRequestTokenFlag = storageMonitorRequestFlags.String("token", "", "")

		storageMonitorFlags      = flag.NewFlagSet("monitor", flag.ExitOnError)
		storageMonitorTicketFlag = storageMonitorFlags.String("ticket", "", "")

		storageListAipsFlags                   = flag.NewFlagSet("list-aips", flag.ExitOnError)
		storageListAipsNameFlag                = storageListAipsFlags.String("name", "", "")
		storageListAipsEarliestCreatedTimeFlag = storageListAipsFlags.String("earliest-created-time", "", "")
		storageListAipsLatestCreatedTimeFlag   = storageListAipsFlags.String("latest-created-time", "", "")
		storageListAipsStatusFlag              = storageListAipsFlags.String("status", "", "")
		storageListAipsLimitFlag               = storageListAipsFlags.String("limit", "", "")
		storageListAipsOffsetFlag              = storageListAipsFlags.String("offset", "", "")
		storageListAipsTokenFlag               = storageListAipsFlags.String("token", "", "")

		storageCreateAipFlags     = flag.NewFlagSet("create-aip", flag.ExitOnError)
		storageCreateAipBodyFlag  = storageCreateAipFlags.String("body", "REQUIRED", "")
		storageCreateAipTokenFlag = storageCreateAipFlags.String("token", "", "")

		storageSubmitAipFlags     = flag.NewFlagSet("submit-aip", flag.ExitOnError)
		storageSubmitAipBodyFlag  = storageSubmitAipFlags.String("body", "REQUIRED", "")
		storageSubmitAipUUIDFlag  = storageSubmitAipFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageSubmitAipTokenFlag = storageSubmitAipFlags.String("token", "", "")

		storageUpdateAipFlags     = flag.NewFlagSet("update-aip", flag.ExitOnError)
		storageUpdateAipUUIDFlag  = storageUpdateAipFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageUpdateAipTokenFlag = storageUpdateAipFlags.String("token", "", "")

		storageDownloadAipRequestFlags     = flag.NewFlagSet("download-aip-request", flag.ExitOnError)
		storageDownloadAipRequestUUIDFlag  = storageDownloadAipRequestFlags.String("uuid", "REQUIRED", "Identifier of the AIP to download")
		storageDownloadAipRequestTokenFlag = storageDownloadAipRequestFlags.String("token", "", "")

		storageDownloadAipFlags      = flag.NewFlagSet("download-aip", flag.ExitOnError)
		storageDownloadAipUUIDFlag   = storageDownloadAipFlags.String("uuid", "REQUIRED", "Identifier of the AIP to download")
		storageDownloadAipTicketFlag = storageDownloadAipFlags.String("ticket", "", "")

		storageMoveAipFlags     = flag.NewFlagSet("move-aip", flag.ExitOnError)
		storageMoveAipBodyFlag  = storageMoveAipFlags.String("body", "REQUIRED", "")
		storageMoveAipUUIDFlag  = storageMoveAipFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageMoveAipTokenFlag = storageMoveAipFlags.String("token", "", "")

		storageMoveAipStatusFlags     = flag.NewFlagSet("move-aip-status", flag.ExitOnError)
		storageMoveAipStatusUUIDFlag  = storageMoveAipStatusFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageMoveAipStatusTokenFlag = storageMoveAipStatusFlags.String("token", "", "")

		storageRejectAipFlags     = flag.NewFlagSet("reject-aip", flag.ExitOnError)
		storageRejectAipUUIDFlag  = storageRejectAipFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageRejectAipTokenFlag = storageRejectAipFlags.String("token", "", "")

		storageShowAipFlags     = flag.NewFlagSet("show-aip", flag.ExitOnError)
		storageShowAipUUIDFlag  = storageShowAipFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageShowAipTokenFlag = storageShowAipFlags.String("token", "", "")

		storageListAipWorkflowsFlags      = flag.NewFlagSet("list-aip-workflows", flag.ExitOnError)
		storageListAipWorkflowsUUIDFlag   = storageListAipWorkflowsFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageListAipWorkflowsStatusFlag = storageListAipWorkflowsFlags.String("status", "", "")
		storageListAipWorkflowsTypeFlag   = storageListAipWorkflowsFlags.String("type", "", "")
		storageListAipWorkflowsTokenFlag  = storageListAipWorkflowsFlags.String("token", "", "")

		storageRequestAipDeletionFlags     = flag.NewFlagSet("request-aip-deletion", flag.ExitOnError)
		storageRequestAipDeletionBodyFlag  = storageRequestAipDeletionFlags.String("body", "REQUIRED", "")
		storageRequestAipDeletionUUIDFlag  = storageRequestAipDeletionFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageRequestAipDeletionTokenFlag = storageRequestAipDeletionFlags.String("token", "", "")

		storageReviewAipDeletionFlags     = flag.NewFlagSet("review-aip-deletion", flag.ExitOnError)
		storageReviewAipDeletionBodyFlag  = storageReviewAipDeletionFlags.String("body", "REQUIRED", "")
		storageReviewAipDeletionUUIDFlag  = storageReviewAipDeletionFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageReviewAipDeletionTokenFlag = storageReviewAipDeletionFlags.String("token", "", "")

		storageCancelAipDeletionFlags     = flag.NewFlagSet("cancel-aip-deletion", flag.ExitOnError)
		storageCancelAipDeletionBodyFlag  = storageCancelAipDeletionFlags.String("body", "REQUIRED", "")
		storageCancelAipDeletionUUIDFlag  = storageCancelAipDeletionFlags.String("uuid", "REQUIRED", "Identifier of AIP")
		storageCancelAipDeletionTokenFlag = storageCancelAipDeletionFlags.String("token", "", "")

		storageListLocationsFlags     = flag.NewFlagSet("list-locations", flag.ExitOnError)
		storageListLocationsTokenFlag = storageListLocationsFlags.String("token", "", "")

		storageCreateLocationFlags     = flag.NewFlagSet("create-location", flag.ExitOnError)
		storageCreateLocationBodyFlag  = storageCreateLocationFlags.String("body", "REQUIRED", "")
		storageCreateLocationTokenFlag = storageCreateLocationFlags.String("token", "", "")

		storageShowLocationFlags     = flag.NewFlagSet("show-location", flag.ExitOnError)
		storageShowLocationUUIDFlag  = storageShowLocationFlags.String("uuid", "REQUIRED", "Identifier of location")
		storageShowLocationTokenFlag = storageShowLocationFlags.String("token", "", "")

		storageListLocationAipsFlags     = flag.NewFlagSet("list-location-aips", flag.ExitOnError)
		storageListLocationAipsUUIDFlag  = storageListLocationAipsFlags.String("uuid", "REQUIRED", "Identifier of location")
		storageListLocationAipsTokenFlag = storageListLocationAipsFlags.String("token", "", "")
	)
	aboutFlags.Usage = aboutUsage
	aboutAboutFlags.Usage = aboutAboutUsage

	ingestFlags.Usage = ingestUsage
	ingestMonitorRequestFlags.Usage = ingestMonitorRequestUsage
	ingestMonitorFlags.Usage = ingestMonitorUsage
	ingestListSipsFlags.Usage = ingestListSipsUsage
	ingestShowSipFlags.Usage = ingestShowSipUsage
	ingestListSipWorkflowsFlags.Usage = ingestListSipWorkflowsUsage
	ingestConfirmSipFlags.Usage = ingestConfirmSipUsage
	ingestRejectSipFlags.Usage = ingestRejectSipUsage
	ingestUploadSipFlags.Usage = ingestUploadSipUsage
	ingestDownloadSipRequestFlags.Usage = ingestDownloadSipRequestUsage
	ingestDownloadSipFlags.Usage = ingestDownloadSipUsage
	ingestListUsersFlags.Usage = ingestListUsersUsage
	ingestListSipSourceObjectsFlags.Usage = ingestListSipSourceObjectsUsage

	storageFlags.Usage = storageUsage
	storageMonitorRequestFlags.Usage = storageMonitorRequestUsage
	storageMonitorFlags.Usage = storageMonitorUsage
	storageListAipsFlags.Usage = storageListAipsUsage
	storageCreateAipFlags.Usage = storageCreateAipUsage
	storageSubmitAipFlags.Usage = storageSubmitAipUsage
	storageUpdateAipFlags.Usage = storageUpdateAipUsage
	storageDownloadAipRequestFlags.Usage = storageDownloadAipRequestUsage
	storageDownloadAipFlags.Usage = storageDownloadAipUsage
	storageMoveAipFlags.Usage = storageMoveAipUsage
	storageMoveAipStatusFlags.Usage = storageMoveAipStatusUsage
	storageRejectAipFlags.Usage = storageRejectAipUsage
	storageShowAipFlags.Usage = storageShowAipUsage
	storageListAipWorkflowsFlags.Usage = storageListAipWorkflowsUsage
	storageRequestAipDeletionFlags.Usage = storageRequestAipDeletionUsage
	storageReviewAipDeletionFlags.Usage = storageReviewAipDeletionUsage
	storageCancelAipDeletionFlags.Usage = storageCancelAipDeletionUsage
	storageListLocationsFlags.Usage = storageListLocationsUsage
	storageCreateLocationFlags.Usage = storageCreateLocationUsage
	storageShowLocationFlags.Usage = storageShowLocationUsage
	storageListLocationAipsFlags.Usage = storageListLocationAipsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "about":
			svcf = aboutFlags
		case "ingest":
			svcf = ingestFlags
		case "storage":
			svcf = storageFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "about":
			switch epn {
			case "about":
				epf = aboutAboutFlags

			}

		case "ingest":
			switch epn {
			case "monitor-request":
				epf = ingestMonitorRequestFlags

			case "monitor":
				epf = ingestMonitorFlags

			case "list-sips":
				epf = ingestListSipsFlags

			case "show-sip":
				epf = ingestShowSipFlags

			case "list-sip-workflows":
				epf = ingestListSipWorkflowsFlags

			case "confirm-sip":
				epf = ingestConfirmSipFlags

			case "reject-sip":
				epf = ingestRejectSipFlags

			case "upload-sip":
				epf = ingestUploadSipFlags

			case "download-sip-request":
				epf = ingestDownloadSipRequestFlags

			case "download-sip":
				epf = ingestDownloadSipFlags

			case "list-users":
				epf = ingestListUsersFlags

			case "list-sip-source-objects":
				epf = ingestListSipSourceObjectsFlags

			}

		case "storage":
			switch epn {
			case "monitor-request":
				epf = storageMonitorRequestFlags

			case "monitor":
				epf = storageMonitorFlags

			case "list-aips":
				epf = storageListAipsFlags

			case "create-aip":
				epf = storageCreateAipFlags

			case "submit-aip":
				epf = storageSubmitAipFlags

			case "update-aip":
				epf = storageUpdateAipFlags

			case "download-aip-request":
				epf = storageDownloadAipRequestFlags

			case "download-aip":
				epf = storageDownloadAipFlags

			case "move-aip":
				epf = storageMoveAipFlags

			case "move-aip-status":
				epf = storageMoveAipStatusFlags

			case "reject-aip":
				epf = storageRejectAipFlags

			case "show-aip":
				epf = storageShowAipFlags

			case "list-aip-workflows":
				epf = storageListAipWorkflowsFlags

			case "request-aip-deletion":
				epf = storageRequestAipDeletionFlags

			case "review-aip-deletion":
				epf = storageReviewAipDeletionFlags

			case "cancel-aip-deletion":
				epf = storageCancelAipDeletionFlags

			case "list-locations":
				epf = storageListLocationsFlags

			case "create-location":
				epf = storageCreateLocationFlags

			case "show-location":
				epf = storageShowLocationFlags

			case "list-location-aips":
				epf = storageListLocationAipsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "about":
			c := aboutc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "about":
				endpoint = c.About()
				data, err = aboutc.BuildAboutPayload(*aboutAboutTokenFlag)
			}
		case "ingest":
			c := ingestc.NewClient(scheme, host, doer, enc, dec, restore, dialer, ingestConfigurer)
			switch epn {
			case "monitor-request":
				endpoint = c.MonitorRequest()
				data, err = ingestc.BuildMonitorRequestPayload(*ingestMonitorRequestTokenFlag)
			case "monitor":
				endpoint = c.Monitor()
				data, err = ingestc.BuildMonitorPayload(*ingestMonitorTicketFlag)
			case "list-sips":
				endpoint = c.ListSips()
				data, err = ingestc.BuildListSipsPayload(*ingestListSipsNameFlag, *ingestListSipsAipUUIDFlag, *ingestListSipsEarliestCreatedTimeFlag, *ingestListSipsLatestCreatedTimeFlag, *ingestListSipsStatusFlag, *ingestListSipsUploaderUUIDFlag, *ingestListSipsLimitFlag, *ingestListSipsOffsetFlag, *ingestListSipsTokenFlag)
			case "show-sip":
				endpoint = c.ShowSip()
				data, err = ingestc.BuildShowSipPayload(*ingestShowSipUUIDFlag, *ingestShowSipTokenFlag)
			case "list-sip-workflows":
				endpoint = c.ListSipWorkflows()
				data, err = ingestc.BuildListSipWorkflowsPayload(*ingestListSipWorkflowsUUIDFlag, *ingestListSipWorkflowsTokenFlag)
			case "confirm-sip":
				endpoint = c.ConfirmSip()
				data, err = ingestc.BuildConfirmSipPayload(*ingestConfirmSipBodyFlag, *ingestConfirmSipUUIDFlag, *ingestConfirmSipTokenFlag)
			case "reject-sip":
				endpoint = c.RejectSip()
				data, err = ingestc.BuildRejectSipPayload(*ingestRejectSipUUIDFlag, *ingestRejectSipTokenFlag)
			case "upload-sip":
				endpoint = c.UploadSip()
				data, err = ingestc.BuildUploadSipPayload(*ingestUploadSipContentTypeFlag, *ingestUploadSipTokenFlag)
				if err == nil {
					data, err = ingestc.BuildUploadSipStreamPayload(data, *ingestUploadSipStreamFlag)
				}
			case "download-sip-request":
				endpoint = c.DownloadSipRequest()
				data, err = ingestc.BuildDownloadSipRequestPayload(*ingestDownloadSipRequestUUIDFlag, *ingestDownloadSipRequestTokenFlag)
			case "download-sip":
				endpoint = c.DownloadSip()
				data, err = ingestc.BuildDownloadSipPayload(*ingestDownloadSipUUIDFlag, *ingestDownloadSipTicketFlag)
			case "list-users":
				endpoint = c.ListUsers()
				data, err = ingestc.BuildListUsersPayload(*ingestListUsersEmailFlag, *ingestListUsersNameFlag, *ingestListUsersLimitFlag, *ingestListUsersOffsetFlag, *ingestListUsersTokenFlag)
			case "list-sip-source-objects":
				endpoint = c.ListSipSourceObjects()
				data, err = ingestc.BuildListSipSourceObjectsPayload(*ingestListSipSourceObjectsUUIDFlag, *ingestListSipSourceObjectsLimitFlag, *ingestListSipSourceObjectsCursorFlag, *ingestListSipSourceObjectsTokenFlag)
			}
		case "storage":
			c := storagec.NewClient(scheme, host, doer, enc, dec, restore, dialer, storageConfigurer)
			switch epn {
			case "monitor-request":
				endpoint = c.MonitorRequest()
				data, err = storagec.BuildMonitorRequestPayload(*storageMonitorRequestTokenFlag)
			case "monitor":
				endpoint = c.Monitor()
				data, err = storagec.BuildMonitorPayload(*storageMonitorTicketFlag)
			case "list-aips":
				endpoint = c.ListAips()
				data, err = storagec.BuildListAipsPayload(*storageListAipsNameFlag, *storageListAipsEarliestCreatedTimeFlag, *storageListAipsLatestCreatedTimeFlag, *storageListAipsStatusFlag, *storageListAipsLimitFlag, *storageListAipsOffsetFlag, *storageListAipsTokenFlag)
			case "create-aip":
				endpoint = c.CreateAip()
				data, err = storagec.BuildCreateAipPayload(*storageCreateAipBodyFlag, *storageCreateAipTokenFlag)
			case "submit-aip":
				endpoint = c.SubmitAip()
				data, err = storagec.BuildSubmitAipPayload(*storageSubmitAipBodyFlag, *storageSubmitAipUUIDFlag, *storageSubmitAipTokenFlag)
			case "update-aip":
				endpoint = c.UpdateAip()
				data, err = storagec.BuildUpdateAipPayload(*storageUpdateAipUUIDFlag, *storageUpdateAipTokenFlag)
			case "download-aip-request":
				endpoint = c.DownloadAipRequest()
				data, err = storagec.BuildDownloadAipRequestPayload(*storageDownloadAipRequestUUIDFlag, *storageDownloadAipRequestTokenFlag)
			case "download-aip":
				endpoint = c.DownloadAip()
				data, err = storagec.BuildDownloadAipPayload(*storageDownloadAipUUIDFlag, *storageDownloadAipTicketFlag)
			case "move-aip":
				endpoint = c.MoveAip()
				data, err = storagec.BuildMoveAipPayload(*storageMoveAipBodyFlag, *storageMoveAipUUIDFlag, *storageMoveAipTokenFlag)
			case "move-aip-status":
				endpoint = c.MoveAipStatus()
				data, err = storagec.BuildMoveAipStatusPayload(*storageMoveAipStatusUUIDFlag, *storageMoveAipStatusTokenFlag)
			case "reject-aip":
				endpoint = c.RejectAip()
				data, err = storagec.BuildRejectAipPayload(*storageRejectAipUUIDFlag, *storageRejectAipTokenFlag)
			case "show-aip":
				endpoint = c.ShowAip()
				data, err = storagec.BuildShowAipPayload(*storageShowAipUUIDFlag, *storageShowAipTokenFlag)
			case "list-aip-workflows":
				endpoint = c.ListAipWorkflows()
				data, err = storagec.BuildListAipWorkflowsPayload(*storageListAipWorkflowsUUIDFlag, *storageListAipWorkflowsStatusFlag, *storageListAipWorkflowsTypeFlag, *storageListAipWorkflowsTokenFlag)
			case "request-aip-deletion":
				endpoint = c.RequestAipDeletion()
				data, err = storagec.BuildRequestAipDeletionPayload(*storageRequestAipDeletionBodyFlag, *storageRequestAipDeletionUUIDFlag, *storageRequestAipDeletionTokenFlag)
			case "review-aip-deletion":
				endpoint = c.ReviewAipDeletion()
				data, err = storagec.BuildReviewAipDeletionPayload(*storageReviewAipDeletionBodyFlag, *storageReviewAipDeletionUUIDFlag, *storageReviewAipDeletionTokenFlag)
			case "cancel-aip-deletion":
				endpoint = c.CancelAipDeletion()
				data, err = storagec.BuildCancelAipDeletionPayload(*storageCancelAipDeletionBodyFlag, *storageCancelAipDeletionUUIDFlag, *storageCancelAipDeletionTokenFlag)
			case "list-locations":
				endpoint = c.ListLocations()
				data, err = storagec.BuildListLocationsPayload(*storageListLocationsTokenFlag)
			case "create-location":
				endpoint = c.CreateLocation()
				data, err = storagec.BuildCreateLocationPayload(*storageCreateLocationBodyFlag, *storageCreateLocationTokenFlag)
			case "show-location":
				endpoint = c.ShowLocation()
				data, err = storagec.BuildShowLocationPayload(*storageShowLocationUUIDFlag, *storageShowLocationTokenFlag)
			case "list-location-aips":
				endpoint = c.ListLocationAips()
				data, err = storagec.BuildListLocationAipsPayload(*storageListLocationAipsUUIDFlag, *storageListLocationAipsTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// aboutUsage displays the usage of the about command and its subcommands.
func aboutUsage() {
	fmt.Fprintf(os.Stderr, `The about service provides information about the system.
Usage:
    %[1]s [globalflags] about COMMAND [flags]

COMMAND:
    about: Get information about the system

Additional help:
    %[1]s about COMMAND --help
`, os.Args[0])
}
func aboutAboutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] about about -token STRING

Get information about the system
    -token STRING: 

Example:
    %[1]s about about --token "abc123"
`, os.Args[0])
}

// ingestUsage displays the usage of the ingest command and its subcommands.
func ingestUsage() {
	fmt.Fprintf(os.Stderr, `The ingest service manages ingested SIPs.
Usage:
    %[1]s [globalflags] ingest COMMAND [flags]

COMMAND:
    monitor-request: Request access to the /monitor WebSocket
    monitor: Obtain access to the /monitor WebSocket
    list-sips: List all ingested SIPs
    show-sip: Show SIP by ID
    list-sip-workflows: List all workflows for a SIP
    confirm-sip: Signal the SIP has been reviewed and accepted
    reject-sip: Signal the SIP has been reviewed and rejected
    upload-sip: Upload a SIP to trigger an ingest workflow
    download-sip-request: Request access to SIP download
    download-sip: Download the failed package related to a SIP. It will be the original SIP or the transformed PIP, based on the SIP's `+"`"+`failed_as`+"`"+` value.
    list-users: List all users
    list-sip-source-objects: List the objects in a SIP source

Additional help:
    %[1]s ingest COMMAND --help
`, os.Args[0])
}
func ingestMonitorRequestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest monitor-request -token STRING

Request access to the /monitor WebSocket
    -token STRING: 

Example:
    %[1]s ingest monitor-request --token "abc123"
`, os.Args[0])
}

func ingestMonitorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest monitor -ticket STRING

Obtain access to the /monitor WebSocket
    -ticket STRING: 

Example:
    %[1]s ingest monitor --ticket "abc123"
`, os.Args[0])
}

func ingestListSipsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest list-sips -name STRING -aip-uuid STRING -earliest-created-time STRING -latest-created-time STRING -status STRING -uploader-uuid STRING -limit INT -offset INT -token STRING

List all ingested SIPs
    -name STRING: 
    -aip-uuid STRING: 
    -earliest-created-time STRING: 
    -latest-created-time STRING: 
    -status STRING: 
    -uploader-uuid STRING: 
    -limit INT: 
    -offset INT: 
    -token STRING: 

Example:
    %[1]s ingest list-sips --name "abc123" --aip-uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --earliest-created-time "1970-01-01T00:00:01Z" --latest-created-time "1970-01-01T00:00:01Z" --status "failed" --uploader-uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --limit 1 --offset 1 --token "abc123"
`, os.Args[0])
}

func ingestShowSipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest show-sip -uuid STRING -token STRING

Show SIP by ID
    -uuid STRING: Identifier of SIP to show
    -token STRING: 

Example:
    %[1]s ingest show-sip --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func ingestListSipWorkflowsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest list-sip-workflows -uuid STRING -token STRING

List all workflows for a SIP
    -uuid STRING: Identifier of SIP to look up
    -token STRING: 

Example:
    %[1]s ingest list-sip-workflows --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func ingestConfirmSipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest confirm-sip -body JSON -uuid STRING -token STRING

Signal the SIP has been reviewed and accepted
    -body JSON: 
    -uuid STRING: Identifier of SIP to look up
    -token STRING: 

Example:
    %[1]s ingest confirm-sip --body '{
      "location_uuid": "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5"
   }' --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func ingestRejectSipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest reject-sip -uuid STRING -token STRING

Signal the SIP has been reviewed and rejected
    -uuid STRING: Identifier of SIP to look up
    -token STRING: 

Example:
    %[1]s ingest reject-sip --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func ingestUploadSipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest upload-sip -content-type STRING -token STRING -stream STRING

Upload a SIP to trigger an ingest workflow
    -content-type STRING: 
    -token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s ingest upload-sip --content-type "multipart/form-data; boundary=goa" --token "abc123" --stream "goa.png"
`, os.Args[0])
}

func ingestDownloadSipRequestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest download-sip-request -uuid STRING -token STRING

Request access to SIP download
    -uuid STRING: Identifier of the SIP to download
    -token STRING: 

Example:
    %[1]s ingest download-sip-request --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func ingestDownloadSipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest download-sip -uuid STRING -ticket STRING

Download the failed package related to a SIP. It will be the original SIP or the transformed PIP, based on the SIP's `+"`"+`failed_as`+"`"+` value.
    -uuid STRING: Identifier of the SIP to download
    -ticket STRING: 

Example:
    %[1]s ingest download-sip --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --ticket "abc123"
`, os.Args[0])
}

func ingestListUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest list-users -email STRING -name STRING -limit INT -offset INT -token STRING

List all users
    -email STRING: 
    -name STRING: 
    -limit INT: 
    -offset INT: 
    -token STRING: 

Example:
    %[1]s ingest list-users --email "nobody@example.com" --name "Jane Doe" --limit 1 --offset 1 --token "abc123"
`, os.Args[0])
}

func ingestListSipSourceObjectsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ingest list-sip-source-objects -uuid STRING -limit INT -cursor STRING -token STRING

List the objects in a SIP source
    -uuid STRING: SIP source identifier -- CURRENTLY NOT USED
    -limit INT: 
    -cursor STRING: 
    -token STRING: 

Example:
    %[1]s ingest list-sip-source-objects --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --limit 1 --cursor "abc123" --token "abc123"
`, os.Args[0])
}

// storageUsage displays the usage of the storage command and its subcommands.
func storageUsage() {
	fmt.Fprintf(os.Stderr, `The storage service manages locations and AIPs.
Usage:
    %[1]s [globalflags] storage COMMAND [flags]

COMMAND:
    monitor-request: Request access to the /monitor WebSocket
    monitor: Obtain access to the /monitor WebSocket
    list-aips: List all AIPs
    create-aip: Create a new AIP
    submit-aip: Start the submission of an AIP
    update-aip: Signal that an AIP submission is complete
    download-aip-request: Request access to AIP download
    download-aip: Download AIP by AIPID
    move-aip: Move an AIP to a permanent storage location
    move-aip-status: Retrieve the status of a permanent storage location move of the AIP
    reject-aip: Reject an AIP
    show-aip: Show AIP by AIPID
    list-aip-workflows: List workflows related to an AIP
    request-aip-deletion: Request an AIP deletion
    review-aip-deletion: Review an AIP deletion request
    cancel-aip-deletion: Cancel an AIP deletion request
    list-locations: List locations
    create-location: Create a storage location
    show-location: Show location by UUID
    list-location-aips: List all the AIPs stored in the location with UUID

Additional help:
    %[1]s storage COMMAND --help
`, os.Args[0])
}
func storageMonitorRequestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage monitor-request -token STRING

Request access to the /monitor WebSocket
    -token STRING: 

Example:
    %[1]s storage monitor-request --token "abc123"
`, os.Args[0])
}

func storageMonitorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage monitor -ticket STRING

Obtain access to the /monitor WebSocket
    -ticket STRING: 

Example:
    %[1]s storage monitor --ticket "abc123"
`, os.Args[0])
}

func storageListAipsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage list-aips -name STRING -earliest-created-time STRING -latest-created-time STRING -status STRING -limit INT -offset INT -token STRING

List all AIPs
    -name STRING: 
    -earliest-created-time STRING: 
    -latest-created-time STRING: 
    -status STRING: 
    -limit INT: 
    -offset INT: 
    -token STRING: 

Example:
    %[1]s storage list-aips --name "abc123" --earliest-created-time "1970-01-01T00:00:01Z" --latest-created-time "1970-01-01T00:00:01Z" --status "stored" --limit 1 --offset 1 --token "abc123"
`, os.Args[0])
}

func storageCreateAipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage create-aip -body JSON -token STRING

Create a new AIP
    -body JSON: 
    -token STRING: 

Example:
    %[1]s storage create-aip --body '{
      "location_uuid": "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5",
      "name": "abc123",
      "object_key": "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5",
      "status": "stored",
      "uuid": "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5"
   }' --token "abc123"
`, os.Args[0])
}

func storageSubmitAipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage submit-aip -body JSON -uuid STRING -token STRING

Start the submission of an AIP
    -body JSON: 
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage submit-aip --body '{
      "name": "abc123"
   }' --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageUpdateAipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage update-aip -uuid STRING -token STRING

Signal that an AIP submission is complete
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage update-aip --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageDownloadAipRequestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage download-aip-request -uuid STRING -token STRING

Request access to AIP download
    -uuid STRING: Identifier of the AIP to download
    -token STRING: 

Example:
    %[1]s storage download-aip-request --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageDownloadAipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage download-aip -uuid STRING -ticket STRING

Download AIP by AIPID
    -uuid STRING: Identifier of the AIP to download
    -ticket STRING: 

Example:
    %[1]s storage download-aip --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --ticket "abc123"
`, os.Args[0])
}

func storageMoveAipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage move-aip -body JSON -uuid STRING -token STRING

Move an AIP to a permanent storage location
    -body JSON: 
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage move-aip --body '{
      "location_uuid": "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5"
   }' --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageMoveAipStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage move-aip-status -uuid STRING -token STRING

Retrieve the status of a permanent storage location move of the AIP
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage move-aip-status --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageRejectAipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage reject-aip -uuid STRING -token STRING

Reject an AIP
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage reject-aip --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageShowAipUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage show-aip -uuid STRING -token STRING

Show AIP by AIPID
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage show-aip --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageListAipWorkflowsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage list-aip-workflows -uuid STRING -status STRING -type STRING -token STRING

List workflows related to an AIP
    -uuid STRING: Identifier of AIP
    -status STRING: 
    -type STRING: 
    -token STRING: 

Example:
    %[1]s storage list-aip-workflows --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --status "in progress" --type "upload aip" --token "abc123"
`, os.Args[0])
}

func storageRequestAipDeletionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage request-aip-deletion -body JSON -uuid STRING -token STRING

Request an AIP deletion
    -body JSON: 
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage request-aip-deletion --body '{
      "reason": "abc123"
   }' --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageReviewAipDeletionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage review-aip-deletion -body JSON -uuid STRING -token STRING

Review an AIP deletion request
    -body JSON: 
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage review-aip-deletion --body '{
      "approved": false
   }' --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageCancelAipDeletionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage cancel-aip-deletion -body JSON -uuid STRING -token STRING

Cancel an AIP deletion request
    -body JSON: 
    -uuid STRING: Identifier of AIP
    -token STRING: 

Example:
    %[1]s storage cancel-aip-deletion --body '{
      "check": false
   }' --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageListLocationsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage list-locations -token STRING

List locations
    -token STRING: 

Example:
    %[1]s storage list-locations --token "abc123"
`, os.Args[0])
}

func storageCreateLocationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage create-location -body JSON -token STRING

Create a storage location
    -body JSON: 
    -token STRING: 

Example:
    %[1]s storage create-location --body '{
      "config": {
         "Type": "s3",
         "Value": "{\"bucket\":\"abc123\",\"endpoint\":\"abc123\",\"key\":\"abc123\",\"path_style\":false,\"profile\":\"abc123\",\"region\":\"abc123\",\"secret\":\"abc123\",\"token\":\"abc123\"}"
      },
      "description": "abc123",
      "name": "abc123",
      "purpose": "aip_store",
      "source": "minio"
   }' --token "abc123"
`, os.Args[0])
}

func storageShowLocationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage show-location -uuid STRING -token STRING

Show location by UUID
    -uuid STRING: Identifier of location
    -token STRING: 

Example:
    %[1]s storage show-location --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}

func storageListLocationAipsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] storage list-location-aips -uuid STRING -token STRING

List all the AIPs stored in the location with UUID
    -uuid STRING: Identifier of location
    -token STRING: 

Example:
    %[1]s storage list-location-aips --uuid "d1845cb6-a5ea-474a-9ab8-26f9bcd919f5" --token "abc123"
`, os.Args[0])
}
