// Code generated by goa v3.15.2, DO NOT EDIT.
//
// about HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package server

import (
	"context"
	"errors"
	"net/http"
	"strings"

	about "github.com/artefactual-sdps/enduro/internal/api/gen/about"
	aboutviews "github.com/artefactual-sdps/enduro/internal/api/gen/about/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAboutResponse returns an encoder for responses returned by the about
// about endpoint.
func EncodeAboutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*aboutviews.EnduroAbout)
		enc := encoder(ctx, w)
		body := NewAboutResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAboutRequest returns a decoder for requests sent to the about about
// endpoint.
func DecodeAboutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewAboutPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeAboutError returns an encoder for errors returned by the about about
// endpoint.
func EncodeAboutError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res about.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalAboutviewsEnduroPreprocessingViewToEnduroPreprocessingResponseBody
// builds a value of type *EnduroPreprocessingResponseBody from a value of type
// *aboutviews.EnduroPreprocessingView.
func marshalAboutviewsEnduroPreprocessingViewToEnduroPreprocessingResponseBody(v *aboutviews.EnduroPreprocessingView) *EnduroPreprocessingResponseBody {
	res := &EnduroPreprocessingResponseBody{
		Enabled:      *v.Enabled,
		WorkflowName: *v.WorkflowName,
		TaskQueue:    *v.TaskQueue,
	}

	return res
}

// marshalAboutviewsEnduroPoststorageViewToEnduroPoststorageResponseBody builds
// a value of type *EnduroPoststorageResponseBody from a value of type
// *aboutviews.EnduroPoststorageView.
func marshalAboutviewsEnduroPoststorageViewToEnduroPoststorageResponseBody(v *aboutviews.EnduroPoststorageView) *EnduroPoststorageResponseBody {
	if v == nil {
		return nil
	}
	res := &EnduroPoststorageResponseBody{
		WorkflowName: *v.WorkflowName,
		TaskQueue:    *v.TaskQueue,
	}

	return res
}
