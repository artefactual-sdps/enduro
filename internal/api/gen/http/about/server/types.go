// Code generated by goa v3.15.2, DO NOT EDIT.
//
// about HTTP server types
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package server

import (
	about "github.com/artefactual-sdps/enduro/internal/api/gen/about"
	aboutviews "github.com/artefactual-sdps/enduro/internal/api/gen/about/views"
)

// AboutResponseBody is the type of the "about" service "about" endpoint HTTP
// response body.
type AboutResponseBody struct {
	Version            string                                  `form:"version" json:"version" xml:"version"`
	PreservationSystem string                                  `form:"preservation_system" json:"preservation_system" xml:"preservation_system"`
	Preprocessing      *EnduroPreprocessingResponseBody        `form:"preprocessing" json:"preprocessing" xml:"preprocessing"`
	Poststorage        EnduroPoststorageResponseBodyCollection `form:"poststorage,omitempty" json:"poststorage,omitempty" xml:"poststorage,omitempty"`
	UploadMaxSize      int64                                   `form:"upload_max_size" json:"upload_max_size" xml:"upload_max_size"`
}

// EnduroPreprocessingResponseBody is used to define fields on response body
// types.
type EnduroPreprocessingResponseBody struct {
	Enabled      bool   `form:"enabled" json:"enabled" xml:"enabled"`
	WorkflowName string `form:"workflow_name" json:"workflow_name" xml:"workflow_name"`
	TaskQueue    string `form:"task_queue" json:"task_queue" xml:"task_queue"`
}

// EnduroPoststorageResponseBodyCollection is used to define fields on response
// body types.
type EnduroPoststorageResponseBodyCollection []*EnduroPoststorageResponseBody

// EnduroPoststorageResponseBody is used to define fields on response body
// types.
type EnduroPoststorageResponseBody struct {
	WorkflowName string `form:"workflow_name" json:"workflow_name" xml:"workflow_name"`
	TaskQueue    string `form:"task_queue" json:"task_queue" xml:"task_queue"`
}

// NewAboutResponseBody builds the HTTP response body from the result of the
// "about" endpoint of the "about" service.
func NewAboutResponseBody(res *aboutviews.EnduroAboutView) *AboutResponseBody {
	body := &AboutResponseBody{
		Version:            *res.Version,
		PreservationSystem: *res.PreservationSystem,
		UploadMaxSize:      *res.UploadMaxSize,
	}
	if res.Preprocessing != nil {
		body.Preprocessing = marshalAboutviewsEnduroPreprocessingViewToEnduroPreprocessingResponseBody(res.Preprocessing)
	}
	if res.Poststorage != nil {
		body.Poststorage = make([]*EnduroPoststorageResponseBody, len(res.Poststorage))
		for i, val := range res.Poststorage {
			body.Poststorage[i] = marshalAboutviewsEnduroPoststorageViewToEnduroPoststorageResponseBody(val)
		}
	}
	return body
}

// NewAboutPayload builds a about service about endpoint payload.
func NewAboutPayload(token *string) *about.AboutPayload {
	v := &about.AboutPayload{}
	v.Token = token

	return v
}
