// Code generated by goa v3.15.2, DO NOT EDIT.
//
// about HTTP client types
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	about "github.com/artefactual-sdps/enduro/internal/api/gen/about"
	aboutviews "github.com/artefactual-sdps/enduro/internal/api/gen/about/views"
	goa "goa.design/goa/v3/pkg"
)

// AboutResponseBody is the type of the "about" service "about" endpoint HTTP
// response body.
type AboutResponseBody struct {
	Version            *string                                 `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	PreservationSystem *string                                 `form:"preservation_system,omitempty" json:"preservation_system,omitempty" xml:"preservation_system,omitempty"`
	Preprocessing      *EnduroPreprocessingResponseBody        `form:"preprocessing,omitempty" json:"preprocessing,omitempty" xml:"preprocessing,omitempty"`
	Poststorage        EnduroPoststorageCollectionResponseBody `form:"poststorage,omitempty" json:"poststorage,omitempty" xml:"poststorage,omitempty"`
}

// EnduroPreprocessingResponseBody is used to define fields on response body
// types.
type EnduroPreprocessingResponseBody struct {
	Enabled      *bool   `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
	WorkflowName *string `form:"workflow_name,omitempty" json:"workflow_name,omitempty" xml:"workflow_name,omitempty"`
	TaskQueue    *string `form:"task_queue,omitempty" json:"task_queue,omitempty" xml:"task_queue,omitempty"`
}

// EnduroPoststorageCollectionResponseBody is used to define fields on response
// body types.
type EnduroPoststorageCollectionResponseBody []*EnduroPoststorageResponseBody

// EnduroPoststorageResponseBody is used to define fields on response body
// types.
type EnduroPoststorageResponseBody struct {
	WorkflowName *string `form:"workflow_name,omitempty" json:"workflow_name,omitempty" xml:"workflow_name,omitempty"`
	TaskQueue    *string `form:"task_queue,omitempty" json:"task_queue,omitempty" xml:"task_queue,omitempty"`
}

// NewAboutEnduroAboutOK builds a "about" service "about" endpoint result from
// a HTTP "OK" response.
func NewAboutEnduroAboutOK(body *AboutResponseBody) *aboutviews.EnduroAboutView {
	v := &aboutviews.EnduroAboutView{
		Version:            body.Version,
		PreservationSystem: body.PreservationSystem,
	}
	v.Preprocessing = unmarshalEnduroPreprocessingResponseBodyToAboutviewsEnduroPreprocessingView(body.Preprocessing)
	if body.Poststorage != nil {
		v.Poststorage = make([]*aboutviews.EnduroPoststorageView, len(body.Poststorage))
		for i, val := range body.Poststorage {
			v.Poststorage[i] = unmarshalEnduroPoststorageResponseBodyToAboutviewsEnduroPoststorageView(val)
		}
	}

	return v
}

// NewAboutUnauthorized builds a about service about endpoint unauthorized
// error.
func NewAboutUnauthorized(body string) about.Unauthorized {
	v := about.Unauthorized(body)

	return v
}

// ValidateEnduroPreprocessingResponseBody runs the validations defined on
// EnduroPreprocessingResponseBody
func ValidateEnduroPreprocessingResponseBody(body *EnduroPreprocessingResponseBody) (err error) {
	if body.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "body"))
	}
	if body.WorkflowName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_name", "body"))
	}
	if body.TaskQueue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_queue", "body"))
	}
	return
}

// ValidateEnduroPoststorageCollectionResponseBody runs the validations defined
// on EnduroPoststorageCollectionResponseBody
func ValidateEnduroPoststorageCollectionResponseBody(body EnduroPoststorageCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateEnduroPoststorageResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnduroPoststorageResponseBody runs the validations defined on
// EnduroPoststorageResponseBody
func ValidateEnduroPoststorageResponseBody(body *EnduroPoststorageResponseBody) (err error) {
	if body.WorkflowName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_name", "body"))
	}
	if body.TaskQueue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_queue", "body"))
	}
	return
}
