// Code generated by goa v3.15.2, DO NOT EDIT.
//
// about HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	about "github.com/artefactual-sdps/enduro/internal/api/gen/about"
	aboutviews "github.com/artefactual-sdps/enduro/internal/api/gen/about/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAboutRequest instantiates a HTTP request object with method and path
// set to call the "about" service "about" endpoint
func (c *Client) BuildAboutRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AboutAboutPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("about", "about", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAboutRequest returns an encoder for requests sent to the about about
// server.
func EncodeAboutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*about.AboutPayload)
		if !ok {
			return goahttp.ErrInvalidType("about", "about", "*about.AboutPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeAboutResponse returns a decoder for responses returned by the about
// about endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAboutResponse may return the following errors:
//   - "unauthorized" (type about.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeAboutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AboutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "about", err)
			}
			p := NewAboutEnduroAboutOK(&body)
			view := "default"
			vres := &aboutviews.EnduroAbout{Projected: p, View: view}
			if err = aboutviews.ValidateEnduroAbout(vres); err != nil {
				return nil, goahttp.ErrValidationError("about", "about", err)
			}
			res := about.NewEnduroAbout(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "about", err)
			}
			return nil, NewAboutUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("about", "about", resp.StatusCode, string(body))
		}
	}
}

// unmarshalEnduroPreprocessingResponseBodyToAboutviewsEnduroPreprocessingView
// builds a value of type *aboutviews.EnduroPreprocessingView from a value of
// type *EnduroPreprocessingResponseBody.
func unmarshalEnduroPreprocessingResponseBodyToAboutviewsEnduroPreprocessingView(v *EnduroPreprocessingResponseBody) *aboutviews.EnduroPreprocessingView {
	res := &aboutviews.EnduroPreprocessingView{
		Enabled:      v.Enabled,
		WorkflowName: v.WorkflowName,
		TaskQueue:    v.TaskQueue,
	}

	return res
}

// unmarshalEnduroPoststorageResponseBodyToAboutviewsEnduroPoststorageView
// builds a value of type *aboutviews.EnduroPoststorageView from a value of
// type *EnduroPoststorageResponseBody.
func unmarshalEnduroPoststorageResponseBodyToAboutviewsEnduroPoststorageView(v *EnduroPoststorageResponseBody) *aboutviews.EnduroPoststorageView {
	if v == nil {
		return nil
	}
	res := &aboutviews.EnduroPoststorageView{
		WorkflowName: v.WorkflowName,
		TaskQueue:    v.TaskQueue,
	}

	return res
}
