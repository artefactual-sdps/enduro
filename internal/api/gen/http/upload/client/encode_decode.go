// Code generated by goa v3.10.2, DO NOT EDIT.
//
// upload HTTP client encoders and decoders
//
// Command:
// $ goa-v3.11.3 gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"

	upload "github.com/artefactual-sdps/enduro/internal/api/gen/upload"
	goahttp "goa.design/goa/v3/http"
)

// BuildUploadRequest instantiates a HTTP request object with method and path
// set to call the "upload" service "upload" endpoint
func (c *Client) BuildUploadRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*upload.UploadRequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("upload", "upload", "upload.UploadRequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadUploadPath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("upload", "upload", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadRequest returns an encoder for requests sent to the upload
// upload server.
func EncodeUploadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		data, ok := v.(*upload.UploadRequestData)
		if !ok {
			return goahttp.ErrInvalidType("upload", "upload", "*upload.UploadRequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeUploadResponse returns a decoder for responses returned by the upload
// upload endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUploadResponse may return the following errors:
//   - "invalid_media_type" (type *goa.ServiceError): http.StatusBadRequest
//   - "invalid_multipart_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unauthorized" (type upload.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUploadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invalid_media_type":
				var (
					body UploadInvalidMediaTypeResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("upload", "upload", err)
				}
				err = ValidateUploadInvalidMediaTypeResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("upload", "upload", err)
				}
				return nil, NewUploadInvalidMediaType(&body)
			case "invalid_multipart_request":
				var (
					body UploadInvalidMultipartRequestResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("upload", "upload", err)
				}
				err = ValidateUploadInvalidMultipartRequestResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("upload", "upload", err)
				}
				return nil, NewUploadInvalidMultipartRequest(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("upload", "upload", resp.StatusCode, string(body))
			}
		case http.StatusInternalServerError:
			var (
				body UploadInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("upload", "upload", err)
			}
			err = ValidateUploadInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("upload", "upload", err)
			}
			return nil, NewUploadInternalError(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("upload", "upload", err)
			}
			return nil, NewUploadUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("upload", "upload", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadStreamPayload creates a streaming endpoint request payload from
// the method payload and the path to the file to be streamed
func BuildUploadStreamPayload(payload interface{}, fpath string) (*upload.UploadRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &upload.UploadRequestData{
		Payload: payload.(*upload.UploadPayload),
		Body:    f,
	}, nil
}
