// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage HTTP client types
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"encoding/json"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	storageviews "github.com/artefactual-sdps/enduro/internal/api/gen/storage/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// CreateAipRequestBody is the type of the "storage" service "create_aip"
// endpoint HTTP request body.
type CreateAipRequestBody struct {
	// Identifier of the AIP
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Name of the AIP
	Name string `form:"name" json:"name" xml:"name"`
	// ObjectKey of the AIP
	ObjectKey string `form:"object_key" json:"object_key" xml:"object_key"`
	// Status of the the AIP
	Status string `form:"status" json:"status" xml:"status"`
	// Identifier of the AIP's storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
}

// SubmitAipRequestBody is the type of the "storage" service "submit_aip"
// endpoint HTTP request body.
type SubmitAipRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// MoveAipRequestBody is the type of the "storage" service "move_aip" endpoint
// HTTP request body.
type MoveAipRequestBody struct {
	// Identifier of storage location
	LocationUUID uuid.UUID `form:"location_uuid" json:"location_uuid" xml:"location_uuid"`
}

// RequestAipDeletionRequestBody is the type of the "storage" service
// "request_aip_deletion" endpoint HTTP request body.
type RequestAipDeletionRequestBody struct {
	Reason string `form:"reason" json:"reason" xml:"reason"`
}

// ReviewAipDeletionRequestBody is the type of the "storage" service
// "review_aip_deletion" endpoint HTTP request body.
type ReviewAipDeletionRequestBody struct {
	Approved bool `form:"approved" json:"approved" xml:"approved"`
}

// CancelAipDeletionRequestBody is the type of the "storage" service
// "cancel_aip_deletion" endpoint HTTP request body.
type CancelAipDeletionRequestBody struct {
	// If check is true, check user authorization to cancel deletion but don't
	// execute the cancellation.
	Check *bool `form:"check,omitempty" json:"check,omitempty" xml:"check,omitempty"`
}

// CreateLocationRequestBody is the type of the "storage" service
// "create_location" endpoint HTTP request body.
type CreateLocationRequestBody struct {
	Name        string  `form:"name" json:"name" xml:"name"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Source      string  `form:"source" json:"source" xml:"source"`
	Purpose     string  `form:"purpose" json:"purpose" xml:"purpose"`
	Config      *struct {
		// Union type name, one of:
		// - "amss"
		// - "s3"
		// - "sftp"
		// - "url"
		Type string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
}

// MonitorResponseBody is the type of the "storage" service "monitor" endpoint
// HTTP response body.
type MonitorResponseBody struct {
	StorageValue *struct {
		// Union type name, one of:
		// - "storage_ping_event"
		// - "location_created_event"
		// - "aip_created_event"
		// - "aip_status_updated_event"
		// - "aip_location_updated_event"
		// - "aip_workflow_created_event"
		// - "aip_workflow_updated_event"
		// - "aip_task_created_event"
		// - "aip_task_updated_event"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"storage_value,omitempty" json:"storage_value,omitempty" xml:"storage_value,omitempty"`
}

// ListAipsResponseBody is the type of the "storage" service "list_aips"
// endpoint HTTP response body.
type ListAipsResponseBody struct {
	Items AIPCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	Page  *EnduroPageResponseBody   `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
}

// CreateAipResponseBody is the type of the "storage" service "create_aip"
// endpoint HTTP response body.
type CreateAipResponseBody struct {
	Name *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the AIP
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// SubmitAipResponseBody is the type of the "storage" service "submit_aip"
// endpoint HTTP response body.
type SubmitAipResponseBody struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// MoveAipStatusResponseBody is the type of the "storage" service
// "move_aip_status" endpoint HTTP response body.
type MoveAipStatusResponseBody struct {
	Done *bool `form:"done,omitempty" json:"done,omitempty" xml:"done,omitempty"`
}

// ShowAipResponseBody is the type of the "storage" service "show_aip" endpoint
// HTTP response body.
type ShowAipResponseBody struct {
	Name *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the AIP
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ListAipWorkflowsResponseBody is the type of the "storage" service
// "list_aip_workflows" endpoint HTTP response body.
type ListAipWorkflowsResponseBody struct {
	Workflows AIPWorkflowCollectionResponseBody `form:"workflows,omitempty" json:"workflows,omitempty" xml:"workflows,omitempty"`
}

// ListLocationsResponseBody is the type of the "storage" service
// "list_locations" endpoint HTTP response body.
type ListLocationsResponseBody []*LocationResponse

// CreateLocationResponseBody is the type of the "storage" service
// "create_location" endpoint HTTP response body.
type CreateLocationResponseBody struct {
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ShowLocationResponseBody is the type of the "storage" service
// "show_location" endpoint HTTP response body.
type ShowLocationResponseBody struct {
	// Name of location
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Purpose of the location
	Purpose *string    `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Config  *struct {
		// Union type name, one of:
		// - "amss"
		// - "s3"
		// - "sftp"
		// - "url"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ListLocationAipsResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body.
type ListLocationAipsResponseBody []*AIPResponse

// MonitorRequestInternalErrorResponseBody is the type of the "storage" service
// "monitor_request" endpoint HTTP response body for the "internal_error" error.
type MonitorRequestInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MonitorRequestNotImplementedResponseBody is the type of the "storage"
// service "monitor_request" endpoint HTTP response body for the
// "not_implemented" error.
type MonitorRequestNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MonitorInternalErrorResponseBody is the type of the "storage" service
// "monitor" endpoint HTTP response body for the "internal_error" error.
type MonitorInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MonitorNotImplementedResponseBody is the type of the "storage" service
// "monitor" endpoint HTTP response body for the "not_implemented" error.
type MonitorNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListAipsNotAvailableResponseBody is the type of the "storage" service
// "list_aips" endpoint HTTP response body for the "not_available" error.
type ListAipsNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListAipsNotValidResponseBody is the type of the "storage" service
// "list_aips" endpoint HTTP response body for the "not_valid" error.
type ListAipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateAipNotValidResponseBody is the type of the "storage" service
// "create_aip" endpoint HTTP response body for the "not_valid" error.
type CreateAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SubmitAipNotAvailableResponseBody is the type of the "storage" service
// "submit_aip" endpoint HTTP response body for the "not_available" error.
type SubmitAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SubmitAipNotValidResponseBody is the type of the "storage" service
// "submit_aip" endpoint HTTP response body for the "not_valid" error.
type SubmitAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateAipNotAvailableResponseBody is the type of the "storage" service
// "update_aip" endpoint HTTP response body for the "not_available" error.
type UpdateAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateAipNotValidResponseBody is the type of the "storage" service
// "update_aip" endpoint HTTP response body for the "not_valid" error.
type UpdateAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DownloadAipRequestNotValidResponseBody is the type of the "storage" service
// "download_aip_request" endpoint HTTP response body for the "not_valid" error.
type DownloadAipRequestNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DownloadAipRequestInternalErrorResponseBody is the type of the "storage"
// service "download_aip_request" endpoint HTTP response body for the
// "internal_error" error.
type DownloadAipRequestInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DownloadAipRequestNotFoundResponseBody is the type of the "storage" service
// "download_aip_request" endpoint HTTP response body for the "not_found" error.
type DownloadAipRequestNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// DownloadAipNotValidResponseBody is the type of the "storage" service
// "download_aip" endpoint HTTP response body for the "not_valid" error.
type DownloadAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DownloadAipInternalErrorResponseBody is the type of the "storage" service
// "download_aip" endpoint HTTP response body for the "internal_error" error.
type DownloadAipInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DownloadAipNotFoundResponseBody is the type of the "storage" service
// "download_aip" endpoint HTTP response body for the "not_found" error.
type DownloadAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// MoveAipNotAvailableResponseBody is the type of the "storage" service
// "move_aip" endpoint HTTP response body for the "not_available" error.
type MoveAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveAipNotValidResponseBody is the type of the "storage" service "move_aip"
// endpoint HTTP response body for the "not_valid" error.
type MoveAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveAipNotFoundResponseBody is the type of the "storage" service "move_aip"
// endpoint HTTP response body for the "not_found" error.
type MoveAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// MoveAipStatusFailedDependencyResponseBody is the type of the "storage"
// service "move_aip_status" endpoint HTTP response body for the
// "failed_dependency" error.
type MoveAipStatusFailedDependencyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveAipStatusNotFoundResponseBody is the type of the "storage" service
// "move_aip_status" endpoint HTTP response body for the "not_found" error.
type MoveAipStatusNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// RejectAipNotAvailableResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_available" error.
type RejectAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectAipNotValidResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_valid" error.
type RejectAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectAipNotFoundResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_found" error.
type RejectAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ShowAipNotFoundResponseBody is the type of the "storage" service "show_aip"
// endpoint HTTP response body for the "not_found" error.
type ShowAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ListAipWorkflowsNotFoundResponseBody is the type of the "storage" service
// "list_aip_workflows" endpoint HTTP response body for the "not_found" error.
type ListAipWorkflowsNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// RequestAipDeletionNotFoundResponseBody is the type of the "storage" service
// "request_aip_deletion" endpoint HTTP response body for the "not_found" error.
type RequestAipDeletionNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ReviewAipDeletionNotFoundResponseBody is the type of the "storage" service
// "review_aip_deletion" endpoint HTTP response body for the "not_found" error.
type ReviewAipDeletionNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// CancelAipDeletionNotFoundResponseBody is the type of the "storage" service
// "cancel_aip_deletion" endpoint HTTP response body for the "not_found" error.
type CancelAipDeletionNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// CreateLocationNotValidResponseBody is the type of the "storage" service
// "create_location" endpoint HTTP response body for the "not_valid" error.
type CreateLocationNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLocationNotFoundResponseBody is the type of the "storage" service
// "show_location" endpoint HTTP response body for the "not_found" error.
type ShowLocationNotFoundResponseBody struct {
	// Message of error
	Message *string    `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ListLocationAipsNotValidResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body for the "not_valid" error.
type ListLocationAipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLocationAipsNotFoundResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body for the "not_found" error.
type ListLocationAipsNotFoundResponseBody struct {
	// Message of error
	Message *string    `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// AIPCollectionResponseBody is used to define fields on response body types.
type AIPCollectionResponseBody []*AIPResponseBody

// AIPResponseBody is used to define fields on response body types.
type AIPResponseBody struct {
	Name *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the AIP
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// EnduroPageResponseBody is used to define fields on response body types.
type EnduroPageResponseBody struct {
	// Maximum items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// Offset from first result to start of page
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
	// Total result count before paging
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// AIPWorkflowCollectionResponseBody is used to define fields on response body
// types.
type AIPWorkflowCollectionResponseBody []*AIPWorkflowResponseBody

// AIPWorkflowResponseBody is used to define fields on response body types.
type AIPWorkflowResponseBody struct {
	UUID        *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	TemporalID  *string    `form:"temporal_id,omitempty" json:"temporal_id,omitempty" xml:"temporal_id,omitempty"`
	Type        *string    `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Status      *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	StartedAt   *string    `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt *string    `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	// Identifier of related AIP
	AipUUID *uuid.UUID                    `form:"aip_uuid,omitempty" json:"aip_uuid,omitempty" xml:"aip_uuid,omitempty"`
	Tasks   AIPTaskCollectionResponseBody `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
}

// AIPTaskCollectionResponseBody is used to define fields on response body
// types.
type AIPTaskCollectionResponseBody []*AIPTaskResponseBody

// AIPTaskResponseBody is used to define fields on response body types.
type AIPTaskResponseBody struct {
	UUID        *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Name        *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Status      *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	StartedAt   *string    `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt *string    `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Note        *string    `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// Identifier of related workflow
	WorkflowUUID *uuid.UUID `form:"workflow_uuid,omitempty" json:"workflow_uuid,omitempty" xml:"workflow_uuid,omitempty"`
}

// LocationResponse is used to define fields on response body types.
type LocationResponse struct {
	// Name of location
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Purpose of the location
	Purpose *string    `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Config  *struct {
		// Union type name, one of:
		// - "amss"
		// - "s3"
		// - "sftp"
		// - "url"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// AIPResponse is used to define fields on response body types.
type AIPResponse struct {
	Name *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the AIP
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// NewCreateAipRequestBody builds the HTTP request body from the payload of the
// "create_aip" endpoint of the "storage" service.
func NewCreateAipRequestBody(p *storage.CreateAipPayload) *CreateAipRequestBody {
	body := &CreateAipRequestBody{
		UUID:         p.UUID,
		Name:         p.Name,
		ObjectKey:    p.ObjectKey,
		Status:       p.Status,
		LocationUUID: p.LocationUUID,
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "unspecified"
		}
	}
	return body
}

// NewSubmitAipRequestBody builds the HTTP request body from the payload of the
// "submit_aip" endpoint of the "storage" service.
func NewSubmitAipRequestBody(p *storage.SubmitAipPayload) *SubmitAipRequestBody {
	body := &SubmitAipRequestBody{
		Name: p.Name,
	}
	return body
}

// NewMoveAipRequestBody builds the HTTP request body from the payload of the
// "move_aip" endpoint of the "storage" service.
func NewMoveAipRequestBody(p *storage.MoveAipPayload) *MoveAipRequestBody {
	body := &MoveAipRequestBody{
		LocationUUID: p.LocationUUID,
	}
	return body
}

// NewRequestAipDeletionRequestBody builds the HTTP request body from the
// payload of the "request_aip_deletion" endpoint of the "storage" service.
func NewRequestAipDeletionRequestBody(p *storage.RequestAipDeletionPayload) *RequestAipDeletionRequestBody {
	body := &RequestAipDeletionRequestBody{
		Reason: p.Reason,
	}
	return body
}

// NewReviewAipDeletionRequestBody builds the HTTP request body from the
// payload of the "review_aip_deletion" endpoint of the "storage" service.
func NewReviewAipDeletionRequestBody(p *storage.ReviewAipDeletionPayload) *ReviewAipDeletionRequestBody {
	body := &ReviewAipDeletionRequestBody{
		Approved: p.Approved,
	}
	return body
}

// NewCancelAipDeletionRequestBody builds the HTTP request body from the
// payload of the "cancel_aip_deletion" endpoint of the "storage" service.
func NewCancelAipDeletionRequestBody(p *storage.CancelAipDeletionPayload) *CancelAipDeletionRequestBody {
	body := &CancelAipDeletionRequestBody{
		Check: p.Check,
	}
	return body
}

// NewCreateLocationRequestBody builds the HTTP request body from the payload
// of the "create_location" endpoint of the "storage" service.
func NewCreateLocationRequestBody(p *storage.CreateLocationPayload) *CreateLocationRequestBody {
	body := &CreateLocationRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Source:      p.Source,
		Purpose:     p.Purpose,
	}
	if p.Config != nil {
		js, _ := json.Marshal(p.Config)
		var name string
		switch p.Config.(type) {
		case *storage.AMSSConfig:
			name = "amss"
		case *storage.S3Config:
			name = "s3"
		case *storage.SFTPConfig:
			name = "sftp"
		case *storage.URLConfig:
			name = "url"
		}
		body.Config = &struct {
			// Union type name, one of:
			// - "amss"
			// - "s3"
			// - "sftp"
			// - "url"
			Type string `form:"Type" json:"Type" xml:"Type"`
			// JSON encoded union value
			Value string `form:"Value" json:"Value" xml:"Value"`
		}{
			Type:  name,
			Value: string(js),
		}
	}
	return body
}

// NewMonitorRequestResultOK builds a "storage" service "monitor_request"
// endpoint result from a HTTP "OK" response.
func NewMonitorRequestResultOK(ticket *string) *storage.MonitorRequestResult {
	v := &storage.MonitorRequestResult{}
	v.Ticket = ticket

	return v
}

// NewMonitorRequestInternalError builds a storage service monitor_request
// endpoint internal_error error.
func NewMonitorRequestInternalError(body *MonitorRequestInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorRequestNotImplemented builds a storage service monitor_request
// endpoint not_implemented error.
func NewMonitorRequestNotImplemented(body *MonitorRequestNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorRequestForbidden builds a storage service monitor_request endpoint
// forbidden error.
func NewMonitorRequestForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewMonitorRequestUnauthorized builds a storage service monitor_request
// endpoint unauthorized error.
func NewMonitorRequestUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewMonitorStorageEventOK builds a "storage" service "monitor" endpoint
// result from a HTTP "OK" response.
func NewMonitorStorageEventOK(body *MonitorResponseBody) *storage.StorageEvent {
	v := &storage.StorageEvent{}
	if body.StorageValue != nil {
		switch *body.StorageValue.Type {
		case "storage_ping_event":
			var val *storage.StoragePingEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "location_created_event":
			var val *storage.LocationCreatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "aip_created_event":
			var val *storage.AIPCreatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "aip_status_updated_event":
			var val *storage.AIPStatusUpdatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "aip_location_updated_event":
			var val *storage.AIPLocationUpdatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "aip_workflow_created_event":
			var val *storage.AIPWorkflowCreatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "aip_workflow_updated_event":
			var val *storage.AIPWorkflowUpdatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "aip_task_created_event":
			var val *storage.AIPTaskCreatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		case "aip_task_updated_event":
			var val *storage.AIPTaskUpdatedEvent
			json.Unmarshal([]byte(*body.StorageValue.Value), &val)
			v.StorageValue = val
		}
	}

	return v
}

// NewMonitorInternalError builds a storage service monitor endpoint
// internal_error error.
func NewMonitorInternalError(body *MonitorInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorNotImplemented builds a storage service monitor endpoint
// not_implemented error.
func NewMonitorNotImplemented(body *MonitorNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMonitorForbidden builds a storage service monitor endpoint forbidden
// error.
func NewMonitorForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewMonitorUnauthorized builds a storage service monitor endpoint
// unauthorized error.
func NewMonitorUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewListAipsAIPsOK builds a "storage" service "list_aips" endpoint result
// from a HTTP "OK" response.
func NewListAipsAIPsOK(body *ListAipsResponseBody) *storageviews.AIPsView {
	v := &storageviews.AIPsView{}
	v.Items = make([]*storageviews.AIPView, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalAIPResponseBodyToStorageviewsAIPView(val)
	}
	v.Page = unmarshalEnduroPageResponseBodyToStorageviewsEnduroPageView(body.Page)

	return v
}

// NewListAipsNotAvailable builds a storage service list_aips endpoint
// not_available error.
func NewListAipsNotAvailable(body *ListAipsNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListAipsNotValid builds a storage service list_aips endpoint not_valid
// error.
func NewListAipsNotValid(body *ListAipsNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListAipsForbidden builds a storage service list_aips endpoint forbidden
// error.
func NewListAipsForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewListAipsUnauthorized builds a storage service list_aips endpoint
// unauthorized error.
func NewListAipsUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewCreateAipAIPOK builds a "storage" service "create_aip" endpoint result
// from a HTTP "OK" response.
func NewCreateAipAIPOK(body *CreateAipResponseBody) *storageviews.AIPView {
	v := &storageviews.AIPView{
		Name:         body.Name,
		UUID:         body.UUID,
		Status:       body.Status,
		ObjectKey:    body.ObjectKey,
		LocationUUID: body.LocationUUID,
		CreatedAt:    body.CreatedAt,
	}

	return v
}

// NewCreateAipNotValid builds a storage service create_aip endpoint not_valid
// error.
func NewCreateAipNotValid(body *CreateAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateAipForbidden builds a storage service create_aip endpoint forbidden
// error.
func NewCreateAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewCreateAipUnauthorized builds a storage service create_aip endpoint
// unauthorized error.
func NewCreateAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewSubmitAipSubmitAIPResultAccepted builds a "storage" service "submit_aip"
// endpoint result from a HTTP "Accepted" response.
func NewSubmitAipSubmitAIPResultAccepted(body *SubmitAipResponseBody) *storage.SubmitAIPResult {
	v := &storage.SubmitAIPResult{
		URL: *body.URL,
	}

	return v
}

// NewSubmitAipNotAvailable builds a storage service submit_aip endpoint
// not_available error.
func NewSubmitAipNotAvailable(body *SubmitAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubmitAipNotValid builds a storage service submit_aip endpoint not_valid
// error.
func NewSubmitAipNotValid(body *SubmitAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubmitAipForbidden builds a storage service submit_aip endpoint forbidden
// error.
func NewSubmitAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewSubmitAipUnauthorized builds a storage service submit_aip endpoint
// unauthorized error.
func NewSubmitAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewUpdateAipNotAvailable builds a storage service update_aip endpoint
// not_available error.
func NewUpdateAipNotAvailable(body *UpdateAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateAipNotValid builds a storage service update_aip endpoint not_valid
// error.
func NewUpdateAipNotValid(body *UpdateAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateAipForbidden builds a storage service update_aip endpoint forbidden
// error.
func NewUpdateAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewUpdateAipUnauthorized builds a storage service update_aip endpoint
// unauthorized error.
func NewUpdateAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewDownloadAipRequestResultOK builds a "storage" service
// "download_aip_request" endpoint result from a HTTP "OK" response.
func NewDownloadAipRequestResultOK(ticket *string) *storage.DownloadAipRequestResult {
	v := &storage.DownloadAipRequestResult{}
	v.Ticket = ticket

	return v
}

// NewDownloadAipRequestNotValid builds a storage service download_aip_request
// endpoint not_valid error.
func NewDownloadAipRequestNotValid(body *DownloadAipRequestNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDownloadAipRequestInternalError builds a storage service
// download_aip_request endpoint internal_error error.
func NewDownloadAipRequestInternalError(body *DownloadAipRequestInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDownloadAipRequestNotFound builds a storage service download_aip_request
// endpoint not_found error.
func NewDownloadAipRequestNotFound(body *DownloadAipRequestNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewDownloadAipRequestForbidden builds a storage service download_aip_request
// endpoint forbidden error.
func NewDownloadAipRequestForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewDownloadAipRequestUnauthorized builds a storage service
// download_aip_request endpoint unauthorized error.
func NewDownloadAipRequestUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewDownloadAipResultOK builds a "storage" service "download_aip" endpoint
// result from a HTTP "OK" response.
func NewDownloadAipResultOK(contentType string, contentLength int64, contentDisposition string) *storage.DownloadAipResult {
	v := &storage.DownloadAipResult{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.ContentDisposition = contentDisposition

	return v
}

// NewDownloadAipNotValid builds a storage service download_aip endpoint
// not_valid error.
func NewDownloadAipNotValid(body *DownloadAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDownloadAipInternalError builds a storage service download_aip endpoint
// internal_error error.
func NewDownloadAipInternalError(body *DownloadAipInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDownloadAipNotFound builds a storage service download_aip endpoint
// not_found error.
func NewDownloadAipNotFound(body *DownloadAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewDownloadAipForbidden builds a storage service download_aip endpoint
// forbidden error.
func NewDownloadAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewDownloadAipUnauthorized builds a storage service download_aip endpoint
// unauthorized error.
func NewDownloadAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewMoveAipNotAvailable builds a storage service move_aip endpoint
// not_available error.
func NewMoveAipNotAvailable(body *MoveAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveAipNotValid builds a storage service move_aip endpoint not_valid
// error.
func NewMoveAipNotValid(body *MoveAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveAipNotFound builds a storage service move_aip endpoint not_found
// error.
func NewMoveAipNotFound(body *MoveAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewMoveAipForbidden builds a storage service move_aip endpoint forbidden
// error.
func NewMoveAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewMoveAipUnauthorized builds a storage service move_aip endpoint
// unauthorized error.
func NewMoveAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewMoveAipStatusMoveStatusResultOK builds a "storage" service
// "move_aip_status" endpoint result from a HTTP "OK" response.
func NewMoveAipStatusMoveStatusResultOK(body *MoveAipStatusResponseBody) *storage.MoveStatusResult {
	v := &storage.MoveStatusResult{
		Done: *body.Done,
	}

	return v
}

// NewMoveAipStatusFailedDependency builds a storage service move_aip_status
// endpoint failed_dependency error.
func NewMoveAipStatusFailedDependency(body *MoveAipStatusFailedDependencyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveAipStatusNotFound builds a storage service move_aip_status endpoint
// not_found error.
func NewMoveAipStatusNotFound(body *MoveAipStatusNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewMoveAipStatusForbidden builds a storage service move_aip_status endpoint
// forbidden error.
func NewMoveAipStatusForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewMoveAipStatusUnauthorized builds a storage service move_aip_status
// endpoint unauthorized error.
func NewMoveAipStatusUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewRejectAipNotAvailable builds a storage service reject_aip endpoint
// not_available error.
func NewRejectAipNotAvailable(body *RejectAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectAipNotValid builds a storage service reject_aip endpoint not_valid
// error.
func NewRejectAipNotValid(body *RejectAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectAipNotFound builds a storage service reject_aip endpoint not_found
// error.
func NewRejectAipNotFound(body *RejectAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewRejectAipForbidden builds a storage service reject_aip endpoint forbidden
// error.
func NewRejectAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewRejectAipUnauthorized builds a storage service reject_aip endpoint
// unauthorized error.
func NewRejectAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewShowAipAIPOK builds a "storage" service "show_aip" endpoint result from a
// HTTP "OK" response.
func NewShowAipAIPOK(body *ShowAipResponseBody) *storageviews.AIPView {
	v := &storageviews.AIPView{
		Name:         body.Name,
		UUID:         body.UUID,
		Status:       body.Status,
		ObjectKey:    body.ObjectKey,
		LocationUUID: body.LocationUUID,
		CreatedAt:    body.CreatedAt,
	}

	return v
}

// NewShowAipNotFound builds a storage service show_aip endpoint not_found
// error.
func NewShowAipNotFound(body *ShowAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewShowAipForbidden builds a storage service show_aip endpoint forbidden
// error.
func NewShowAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewShowAipUnauthorized builds a storage service show_aip endpoint
// unauthorized error.
func NewShowAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewListAipWorkflowsAIPWorkflowsOK builds a "storage" service
// "list_aip_workflows" endpoint result from a HTTP "OK" response.
func NewListAipWorkflowsAIPWorkflowsOK(body *ListAipWorkflowsResponseBody) *storageviews.AIPWorkflowsView {
	v := &storageviews.AIPWorkflowsView{}
	if body.Workflows != nil {
		v.Workflows = make([]*storageviews.AIPWorkflowView, len(body.Workflows))
		for i, val := range body.Workflows {
			v.Workflows[i] = unmarshalAIPWorkflowResponseBodyToStorageviewsAIPWorkflowView(val)
		}
	}

	return v
}

// NewListAipWorkflowsNotFound builds a storage service list_aip_workflows
// endpoint not_found error.
func NewListAipWorkflowsNotFound(body *ListAipWorkflowsNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewListAipWorkflowsForbidden builds a storage service list_aip_workflows
// endpoint forbidden error.
func NewListAipWorkflowsForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewListAipWorkflowsUnauthorized builds a storage service list_aip_workflows
// endpoint unauthorized error.
func NewListAipWorkflowsUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewRequestAipDeletionNotFound builds a storage service request_aip_deletion
// endpoint not_found error.
func NewRequestAipDeletionNotFound(body *RequestAipDeletionNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewRequestAipDeletionForbidden builds a storage service request_aip_deletion
// endpoint forbidden error.
func NewRequestAipDeletionForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewRequestAipDeletionUnauthorized builds a storage service
// request_aip_deletion endpoint unauthorized error.
func NewRequestAipDeletionUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewReviewAipDeletionNotFound builds a storage service review_aip_deletion
// endpoint not_found error.
func NewReviewAipDeletionNotFound(body *ReviewAipDeletionNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewReviewAipDeletionForbidden builds a storage service review_aip_deletion
// endpoint forbidden error.
func NewReviewAipDeletionForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewReviewAipDeletionUnauthorized builds a storage service
// review_aip_deletion endpoint unauthorized error.
func NewReviewAipDeletionUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewCancelAipDeletionNotFound builds a storage service cancel_aip_deletion
// endpoint not_found error.
func NewCancelAipDeletionNotFound(body *CancelAipDeletionNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewCancelAipDeletionForbidden builds a storage service cancel_aip_deletion
// endpoint forbidden error.
func NewCancelAipDeletionForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewCancelAipDeletionUnauthorized builds a storage service
// cancel_aip_deletion endpoint unauthorized error.
func NewCancelAipDeletionUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewListLocationsLocationCollectionOK builds a "storage" service
// "list_locations" endpoint result from a HTTP "OK" response.
func NewListLocationsLocationCollectionOK(body ListLocationsResponseBody) storageviews.LocationCollectionView {
	v := make([]*storageviews.LocationView, len(body))
	for i, val := range body {
		v[i] = unmarshalLocationResponseToStorageviewsLocationView(val)
	}

	return v
}

// NewListLocationsForbidden builds a storage service list_locations endpoint
// forbidden error.
func NewListLocationsForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewListLocationsUnauthorized builds a storage service list_locations
// endpoint unauthorized error.
func NewListLocationsUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewCreateLocationResultCreated builds a "storage" service "create_location"
// endpoint result from a HTTP "Created" response.
func NewCreateLocationResultCreated(body *CreateLocationResponseBody) *storage.CreateLocationResult {
	v := &storage.CreateLocationResult{
		UUID: *body.UUID,
	}

	return v
}

// NewCreateLocationNotValid builds a storage service create_location endpoint
// not_valid error.
func NewCreateLocationNotValid(body *CreateLocationNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateLocationForbidden builds a storage service create_location endpoint
// forbidden error.
func NewCreateLocationForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewCreateLocationUnauthorized builds a storage service create_location
// endpoint unauthorized error.
func NewCreateLocationUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewShowLocationLocationOK builds a "storage" service "show_location"
// endpoint result from a HTTP "OK" response.
func NewShowLocationLocationOK(body *ShowLocationResponseBody) *storageviews.LocationView {
	v := &storageviews.LocationView{
		Name:        body.Name,
		Description: body.Description,
		Source:      body.Source,
		Purpose:     body.Purpose,
		UUID:        body.UUID,
		CreatedAt:   body.CreatedAt,
	}
	if body.Config != nil {
		switch *body.Config.Type {
		case "amss":
			var val *storageviews.AMSSConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "s3":
			var val *storageviews.S3ConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "sftp":
			var val *storageviews.SFTPConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "url":
			var val *storageviews.URLConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		}
	}

	return v
}

// NewShowLocationNotFound builds a storage service show_location endpoint
// not_found error.
func NewShowLocationNotFound(body *ShowLocationNotFoundResponseBody) *storage.LocationNotFound {
	v := &storage.LocationNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewShowLocationForbidden builds a storage service show_location endpoint
// forbidden error.
func NewShowLocationForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewShowLocationUnauthorized builds a storage service show_location endpoint
// unauthorized error.
func NewShowLocationUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewListLocationAipsAIPCollectionOK builds a "storage" service
// "list_location_aips" endpoint result from a HTTP "OK" response.
func NewListLocationAipsAIPCollectionOK(body ListLocationAipsResponseBody) storageviews.AIPCollectionView {
	v := make([]*storageviews.AIPView, len(body))
	for i, val := range body {
		v[i] = unmarshalAIPResponseToStorageviewsAIPView(val)
	}

	return v
}

// NewListLocationAipsNotValid builds a storage service list_location_aips
// endpoint not_valid error.
func NewListLocationAipsNotValid(body *ListLocationAipsNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLocationAipsNotFound builds a storage service list_location_aips
// endpoint not_found error.
func NewListLocationAipsNotFound(body *ListLocationAipsNotFoundResponseBody) *storage.LocationNotFound {
	v := &storage.LocationNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewListLocationAipsForbidden builds a storage service list_location_aips
// endpoint forbidden error.
func NewListLocationAipsForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewListLocationAipsUnauthorized builds a storage service list_location_aips
// endpoint unauthorized error.
func NewListLocationAipsUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// ValidateMonitorResponseBody runs the validations defined on
// MonitorResponseBody
func ValidateMonitorResponseBody(body *MonitorResponseBody) (err error) {
	if body.StorageValue != nil {
		if body.StorageValue.Type == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Type", "body.storage_value"))
		}
		if body.StorageValue.Value == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Value", "body.storage_value"))
		}
		if body.StorageValue.Type != nil {
			if !(*body.StorageValue.Type == "storage_ping_event" || *body.StorageValue.Type == "location_created_event" || *body.StorageValue.Type == "aip_created_event" || *body.StorageValue.Type == "aip_status_updated_event" || *body.StorageValue.Type == "aip_location_updated_event" || *body.StorageValue.Type == "aip_workflow_created_event" || *body.StorageValue.Type == "aip_workflow_updated_event" || *body.StorageValue.Type == "aip_task_created_event" || *body.StorageValue.Type == "aip_task_updated_event") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.storage_value.Type", *body.StorageValue.Type, []any{"storage_ping_event", "location_created_event", "aip_created_event", "aip_status_updated_event", "aip_location_updated_event", "aip_workflow_created_event", "aip_workflow_updated_event", "aip_task_created_event", "aip_task_updated_event"}))
			}
		}
	}
	return
}

// ValidateSubmitAipResponseBody runs the validations defined on
// submit_aip_response_body
func ValidateSubmitAipResponseBody(body *SubmitAipResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateMoveAipStatusResponseBody runs the validations defined on
// move_aip_status_response_body
func ValidateMoveAipStatusResponseBody(body *MoveAipStatusResponseBody) (err error) {
	if body.Done == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("done", "body"))
	}
	return
}

// ValidateCreateLocationResponseBody runs the validations defined on
// create_location_response_body
func ValidateCreateLocationResponseBody(body *CreateLocationResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateMonitorRequestInternalErrorResponseBody runs the validations defined
// on monitor_request_internal_error_response_body
func ValidateMonitorRequestInternalErrorResponseBody(body *MonitorRequestInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMonitorRequestNotImplementedResponseBody runs the validations
// defined on monitor_request_not_implemented_response_body
func ValidateMonitorRequestNotImplementedResponseBody(body *MonitorRequestNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMonitorInternalErrorResponseBody runs the validations defined on
// monitor_internal_error_response_body
func ValidateMonitorInternalErrorResponseBody(body *MonitorInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMonitorNotImplementedResponseBody runs the validations defined on
// monitor_not_implemented_response_body
func ValidateMonitorNotImplementedResponseBody(body *MonitorNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListAipsNotAvailableResponseBody runs the validations defined on
// list_aips_not_available_response_body
func ValidateListAipsNotAvailableResponseBody(body *ListAipsNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListAipsNotValidResponseBody runs the validations defined on
// list_aips_not_valid_response_body
func ValidateListAipsNotValidResponseBody(body *ListAipsNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateAipNotValidResponseBody runs the validations defined on
// create_aip_not_valid_response_body
func ValidateCreateAipNotValidResponseBody(body *CreateAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSubmitAipNotAvailableResponseBody runs the validations defined on
// submit_aip_not_available_response_body
func ValidateSubmitAipNotAvailableResponseBody(body *SubmitAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSubmitAipNotValidResponseBody runs the validations defined on
// submit_aip_not_valid_response_body
func ValidateSubmitAipNotValidResponseBody(body *SubmitAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateAipNotAvailableResponseBody runs the validations defined on
// update_aip_not_available_response_body
func ValidateUpdateAipNotAvailableResponseBody(body *UpdateAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateAipNotValidResponseBody runs the validations defined on
// update_aip_not_valid_response_body
func ValidateUpdateAipNotValidResponseBody(body *UpdateAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDownloadAipRequestNotValidResponseBody runs the validations defined
// on download_aip_request_not_valid_response_body
func ValidateDownloadAipRequestNotValidResponseBody(body *DownloadAipRequestNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDownloadAipRequestInternalErrorResponseBody runs the validations
// defined on download_aip_request_internal_error_response_body
func ValidateDownloadAipRequestInternalErrorResponseBody(body *DownloadAipRequestInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDownloadAipRequestNotFoundResponseBody runs the validations defined
// on download_aip_request_not_found_response_body
func ValidateDownloadAipRequestNotFoundResponseBody(body *DownloadAipRequestNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateDownloadAipNotValidResponseBody runs the validations defined on
// download_aip_not_valid_response_body
func ValidateDownloadAipNotValidResponseBody(body *DownloadAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDownloadAipInternalErrorResponseBody runs the validations defined on
// download_aip_internal_error_response_body
func ValidateDownloadAipInternalErrorResponseBody(body *DownloadAipInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDownloadAipNotFoundResponseBody runs the validations defined on
// download_aip_not_found_response_body
func ValidateDownloadAipNotFoundResponseBody(body *DownloadAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateMoveAipNotAvailableResponseBody runs the validations defined on
// move_aip_not_available_response_body
func ValidateMoveAipNotAvailableResponseBody(body *MoveAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveAipNotValidResponseBody runs the validations defined on
// move_aip_not_valid_response_body
func ValidateMoveAipNotValidResponseBody(body *MoveAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveAipNotFoundResponseBody runs the validations defined on
// move_aip_not_found_response_body
func ValidateMoveAipNotFoundResponseBody(body *MoveAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateMoveAipStatusFailedDependencyResponseBody runs the validations
// defined on move_aip_status_failed_dependency_response_body
func ValidateMoveAipStatusFailedDependencyResponseBody(body *MoveAipStatusFailedDependencyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveAipStatusNotFoundResponseBody runs the validations defined on
// move_aip_status_not_found_response_body
func ValidateMoveAipStatusNotFoundResponseBody(body *MoveAipStatusNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateRejectAipNotAvailableResponseBody runs the validations defined on
// reject_aip_not_available_response_body
func ValidateRejectAipNotAvailableResponseBody(body *RejectAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectAipNotValidResponseBody runs the validations defined on
// reject_aip_not_valid_response_body
func ValidateRejectAipNotValidResponseBody(body *RejectAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectAipNotFoundResponseBody runs the validations defined on
// reject_aip_not_found_response_body
func ValidateRejectAipNotFoundResponseBody(body *RejectAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateShowAipNotFoundResponseBody runs the validations defined on
// show_aip_not_found_response_body
func ValidateShowAipNotFoundResponseBody(body *ShowAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateListAipWorkflowsNotFoundResponseBody runs the validations defined on
// list_aip_workflows_not_found_response_body
func ValidateListAipWorkflowsNotFoundResponseBody(body *ListAipWorkflowsNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateRequestAipDeletionNotFoundResponseBody runs the validations defined
// on request_aip_deletion_not_found_response_body
func ValidateRequestAipDeletionNotFoundResponseBody(body *RequestAipDeletionNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateReviewAipDeletionNotFoundResponseBody runs the validations defined
// on review_aip_deletion_not_found_response_body
func ValidateReviewAipDeletionNotFoundResponseBody(body *ReviewAipDeletionNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateCancelAipDeletionNotFoundResponseBody runs the validations defined
// on cancel_aip_deletion_not_found_response_body
func ValidateCancelAipDeletionNotFoundResponseBody(body *CancelAipDeletionNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateCreateLocationNotValidResponseBody runs the validations defined on
// create_location_not_valid_response_body
func ValidateCreateLocationNotValidResponseBody(body *CreateLocationNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLocationNotFoundResponseBody runs the validations defined on
// show_location_not_found_response_body
func ValidateShowLocationNotFoundResponseBody(body *ShowLocationNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateListLocationAipsNotValidResponseBody runs the validations defined on
// list_location_aips_not_valid_response_body
func ValidateListLocationAipsNotValidResponseBody(body *ListLocationAipsNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLocationAipsNotFoundResponseBody runs the validations defined on
// list_location_aips_not_found_response_body
func ValidateListLocationAipsNotFoundResponseBody(body *ListLocationAipsNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateAIPCollectionResponseBody runs the validations defined on
// AIPCollectionResponseBody
func ValidateAIPCollectionResponseBody(body AIPCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateAIPResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAIPResponseBody runs the validations defined on AIPResponseBody
func ValidateAIPResponseBody(body *AIPResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ObjectKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("object_key", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "stored" || *body.Status == "pending" || *body.Status == "processing" || *body.Status == "deleted" || *body.Status == "queued") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "stored", "pending", "processing", "deleted", "queued"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnduroPageResponseBody runs the validations defined on
// EnduroPageResponseBody
func ValidateEnduroPageResponseBody(body *EnduroPageResponseBody) (err error) {
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	return
}

// ValidateAIPWorkflowCollectionResponseBody runs the validations defined on
// AIPWorkflowCollectionResponseBody
func ValidateAIPWorkflowCollectionResponseBody(body AIPWorkflowCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateAIPWorkflowResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAIPWorkflowResponseBody runs the validations defined on
// AIPWorkflowResponseBody
func ValidateAIPWorkflowResponseBody(body *AIPWorkflowResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.TemporalID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporal_id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.AipUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("aip_uuid", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "unspecified" || *body.Type == "upload aip" || *body.Type == "move aip" || *body.Type == "delete aip") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"unspecified", "upload aip", "move aip", "delete aip"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "queued" || *body.Status == "pending" || *body.Status == "canceled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending", "canceled"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	if body.Tasks != nil {
		if err2 := ValidateAIPTaskCollectionResponseBody(body.Tasks); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAIPTaskCollectionResponseBody runs the validations defined on
// AIPTaskCollectionResponseBody
func ValidateAIPTaskCollectionResponseBody(body AIPTaskCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateAIPTaskResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAIPTaskResponseBody runs the validations defined on
// AIPTaskResponseBody
func ValidateAIPTaskResponseBody(body *AIPTaskResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.WorkflowUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_uuid", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "in progress" || *body.Status == "done" || *body.Status == "error" || *body.Status == "queued" || *body.Status == "pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "in progress", "done", "error", "queued", "pending"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateLocationResponse runs the validations defined on LocationResponse
func ValidateLocationResponse(body *LocationResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	if body.Purpose == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purpose", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Source != nil {
		if !(*body.Source == "unspecified" || *body.Source == "minio" || *body.Source == "sftp" || *body.Source == "amss") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.source", *body.Source, []any{"unspecified", "minio", "sftp", "amss"}))
		}
	}
	if body.Purpose != nil {
		if !(*body.Purpose == "unspecified" || *body.Purpose == "aip_store") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.purpose", *body.Purpose, []any{"unspecified", "aip_store"}))
		}
	}
	if body.Config != nil {
		if body.Config.Type == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Type", "body.config"))
		}
		if body.Config.Value == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Value", "body.config"))
		}
		if body.Config.Type != nil {
			if !(*body.Config.Type == "amss" || *body.Config.Type == "s3" || *body.Config.Type == "sftp" || *body.Config.Type == "url") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.config.Type", *body.Config.Type, []any{"amss", "s3", "sftp", "url"}))
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateAIPResponse runs the validations defined on AIPResponse
func ValidateAIPResponse(body *AIPResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ObjectKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("object_key", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "stored" || *body.Status == "pending" || *body.Status == "processing" || *body.Status == "deleted" || *body.Status == "queued") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "stored", "pending", "processing", "deleted", "queued"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}
