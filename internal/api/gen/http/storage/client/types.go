// Code generated by goa v3.8.3, DO NOT EDIT.
//
// storage HTTP client types
//
// Command:
// $ goa-v3.8.3 gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"encoding/json"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	storageviews "github.com/artefactual-sdps/enduro/internal/api/gen/storage/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// SubmitRequestBody is the type of the "storage" service "submit" endpoint
// HTTP request body.
type SubmitRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// AddLocationRequestBody is the type of the "storage" service "add_location"
// endpoint HTTP request body.
type AddLocationRequestBody struct {
	Name        string  `form:"name" json:"name" xml:"name"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Source      string  `form:"source" json:"source" xml:"source"`
	Purpose     string  `form:"purpose" json:"purpose" xml:"purpose"`
	Config      *struct {
		// Union type name, one of:
		// - "s3"
		Type string `form:"Type" json:"Type" xml:"Type"`
		// JSON formatted union value
		Value string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
}

// MoveRequestBody is the type of the "storage" service "move" endpoint HTTP
// request body.
type MoveRequestBody struct {
	LocationID uuid.UUID `form:"location_id" json:"location_id" xml:"location_id"`
}

// SubmitResponseBody is the type of the "storage" service "submit" endpoint
// HTTP response body.
type SubmitResponseBody struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// LocationsResponseBody is the type of the "storage" service "locations"
// endpoint HTTP response body.
type LocationsResponseBody []*StoredLocationResponse

// AddLocationResponseBody is the type of the "storage" service "add_location"
// endpoint HTTP response body.
type AddLocationResponseBody struct {
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// MoveStatusResponseBody is the type of the "storage" service "move_status"
// endpoint HTTP response body.
type MoveStatusResponseBody struct {
	Done *bool `form:"done,omitempty" json:"done,omitempty" xml:"done,omitempty"`
}

// ShowResponseBody is the type of the "storage" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	Name  *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
	// Status of the package
	Status     *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey  *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
}

// ShowLocationResponseBody is the type of the "storage" service
// "show-location" endpoint HTTP response body.
type ShowLocationResponseBody struct {
	// Name of location
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Purpose of the location
	Purpose *string    `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Config  *struct {
		// Union type name, one of:
		// - "s3"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON formatted union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
}

// SubmitNotAvailableResponseBody is the type of the "storage" service "submit"
// endpoint HTTP response body for the "not_available" error.
type SubmitNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SubmitNotValidResponseBody is the type of the "storage" service "submit"
// endpoint HTTP response body for the "not_valid" error.
type SubmitNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotAvailableResponseBody is the type of the "storage" service "update"
// endpoint HTTP response body for the "not_available" error.
type UpdateNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotValidResponseBody is the type of the "storage" service "update"
// endpoint HTTP response body for the "not_valid" error.
type UpdateNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DownloadNotFoundResponseBody is the type of the "storage" service "download"
// endpoint HTTP response body for the "not_found" error.
type DownloadNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
}

// AddLocationNotValidResponseBody is the type of the "storage" service
// "add_location" endpoint HTTP response body for the "not_valid" error.
type AddLocationNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveNotAvailableResponseBody is the type of the "storage" service "move"
// endpoint HTTP response body for the "not_available" error.
type MoveNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveNotValidResponseBody is the type of the "storage" service "move"
// endpoint HTTP response body for the "not_valid" error.
type MoveNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveNotFoundResponseBody is the type of the "storage" service "move"
// endpoint HTTP response body for the "not_found" error.
type MoveNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
}

// MoveStatusFailedDependencyResponseBody is the type of the "storage" service
// "move_status" endpoint HTTP response body for the "failed_dependency" error.
type MoveStatusFailedDependencyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveStatusNotFoundResponseBody is the type of the "storage" service
// "move_status" endpoint HTTP response body for the "not_found" error.
type MoveStatusNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
}

// RejectNotAvailableResponseBody is the type of the "storage" service "reject"
// endpoint HTTP response body for the "not_available" error.
type RejectNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectNotValidResponseBody is the type of the "storage" service "reject"
// endpoint HTTP response body for the "not_valid" error.
type RejectNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectNotFoundResponseBody is the type of the "storage" service "reject"
// endpoint HTTP response body for the "not_found" error.
type RejectNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "storage" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing package
	AipID *string `form:"aip_id,omitempty" json:"aip_id,omitempty" xml:"aip_id,omitempty"`
}

// ShowLocationNotFoundResponseBody is the type of the "storage" service
// "show-location" endpoint HTTP response body for the "not_found" error.
type ShowLocationNotFoundResponseBody struct {
	// Message of error
	Message *string    `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// StoredLocationResponse is used to define fields on response body types.
type StoredLocationResponse struct {
	// Name of location
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Purpose of the location
	Purpose *string    `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Config  *struct {
		// Union type name, one of:
		// - "s3"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON formatted union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
}

// NewSubmitRequestBody builds the HTTP request body from the payload of the
// "submit" endpoint of the "storage" service.
func NewSubmitRequestBody(p *storage.SubmitPayload) *SubmitRequestBody {
	body := &SubmitRequestBody{
		Name: p.Name,
	}
	return body
}

// NewAddLocationRequestBody builds the HTTP request body from the payload of
// the "add_location" endpoint of the "storage" service.
func NewAddLocationRequestBody(p *storage.AddLocationPayload) *AddLocationRequestBody {
	body := &AddLocationRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Source:      p.Source,
		Purpose:     p.Purpose,
	}
	if p.Config != nil {
		js, _ := json.Marshal(p.Config)
		var name string
		switch p.Config.(type) {
		case *storage.S3Config:
			name = "s3"
		}
		body.Config = &struct {
			// Union type name, one of:
			// - "s3"
			Type string `form:"Type" json:"Type" xml:"Type"`
			// JSON formatted union value
			Value string `form:"Value" json:"Value" xml:"Value"`
		}{
			Type:  name,
			Value: string(js),
		}
	}
	return body
}

// NewMoveRequestBody builds the HTTP request body from the payload of the
// "move" endpoint of the "storage" service.
func NewMoveRequestBody(p *storage.MovePayload) *MoveRequestBody {
	body := &MoveRequestBody{
		LocationID: p.LocationID,
	}
	return body
}

// NewSubmitResultAccepted builds a "storage" service "submit" endpoint result
// from a HTTP "Accepted" response.
func NewSubmitResultAccepted(body *SubmitResponseBody) *storage.SubmitResult {
	v := &storage.SubmitResult{
		URL: *body.URL,
	}

	return v
}

// NewSubmitNotAvailable builds a storage service submit endpoint not_available
// error.
func NewSubmitNotAvailable(body *SubmitNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubmitNotValid builds a storage service submit endpoint not_valid error.
func NewSubmitNotValid(body *SubmitNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateNotAvailable builds a storage service update endpoint not_available
// error.
func NewUpdateNotAvailable(body *UpdateNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateNotValid builds a storage service update endpoint not_valid error.
func NewUpdateNotValid(body *UpdateNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDownloadNotFound builds a storage service download endpoint not_found
// error.
func NewDownloadNotFound(body *DownloadNotFoundResponseBody) *storage.StoragePackageNotfound {
	v := &storage.StoragePackageNotfound{
		Message: *body.Message,
		AipID:   *body.AipID,
	}

	return v
}

// NewLocationsStoredLocationCollectionOK builds a "storage" service
// "locations" endpoint result from a HTTP "OK" response.
func NewLocationsStoredLocationCollectionOK(body LocationsResponseBody) storageviews.StoredLocationCollectionView {
	v := make([]*storageviews.StoredLocationView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredLocationResponseToStorageviewsStoredLocationView(val)
	}

	return v
}

// NewAddLocationResultCreated builds a "storage" service "add_location"
// endpoint result from a HTTP "Created" response.
func NewAddLocationResultCreated(body *AddLocationResponseBody) *storage.AddLocationResult {
	v := &storage.AddLocationResult{
		UUID: *body.UUID,
	}

	return v
}

// NewAddLocationNotValid builds a storage service add_location endpoint
// not_valid error.
func NewAddLocationNotValid(body *AddLocationNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveNotAvailable builds a storage service move endpoint not_available
// error.
func NewMoveNotAvailable(body *MoveNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveNotValid builds a storage service move endpoint not_valid error.
func NewMoveNotValid(body *MoveNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveNotFound builds a storage service move endpoint not_found error.
func NewMoveNotFound(body *MoveNotFoundResponseBody) *storage.StoragePackageNotfound {
	v := &storage.StoragePackageNotfound{
		Message: *body.Message,
		AipID:   *body.AipID,
	}

	return v
}

// NewMoveStatusResultOK builds a "storage" service "move_status" endpoint
// result from a HTTP "OK" response.
func NewMoveStatusResultOK(body *MoveStatusResponseBody) *storage.MoveStatusResult {
	v := &storage.MoveStatusResult{
		Done: *body.Done,
	}

	return v
}

// NewMoveStatusFailedDependency builds a storage service move_status endpoint
// failed_dependency error.
func NewMoveStatusFailedDependency(body *MoveStatusFailedDependencyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveStatusNotFound builds a storage service move_status endpoint
// not_found error.
func NewMoveStatusNotFound(body *MoveStatusNotFoundResponseBody) *storage.StoragePackageNotfound {
	v := &storage.StoragePackageNotfound{
		Message: *body.Message,
		AipID:   *body.AipID,
	}

	return v
}

// NewRejectNotAvailable builds a storage service reject endpoint not_available
// error.
func NewRejectNotAvailable(body *RejectNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectNotValid builds a storage service reject endpoint not_valid error.
func NewRejectNotValid(body *RejectNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectNotFound builds a storage service reject endpoint not_found error.
func NewRejectNotFound(body *RejectNotFoundResponseBody) *storage.StoragePackageNotfound {
	v := &storage.StoragePackageNotfound{
		Message: *body.Message,
		AipID:   *body.AipID,
	}

	return v
}

// NewShowStoredStoragePackageOK builds a "storage" service "show" endpoint
// result from a HTTP "OK" response.
func NewShowStoredStoragePackageOK(body *ShowResponseBody) *storageviews.StoredStoragePackageView {
	v := &storageviews.StoredStoragePackageView{
		Name:       body.Name,
		AipID:      body.AipID,
		Status:     body.Status,
		ObjectKey:  body.ObjectKey,
		LocationID: body.LocationID,
	}

	return v
}

// NewShowNotFound builds a storage service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *storage.StoragePackageNotfound {
	v := &storage.StoragePackageNotfound{
		Message: *body.Message,
		AipID:   *body.AipID,
	}

	return v
}

// NewShowLocationStoredLocationOK builds a "storage" service "show-location"
// endpoint result from a HTTP "OK" response.
func NewShowLocationStoredLocationOK(body *ShowLocationResponseBody) *storageviews.StoredLocationView {
	v := &storageviews.StoredLocationView{
		Name:        body.Name,
		Description: body.Description,
		Source:      body.Source,
		Purpose:     body.Purpose,
		UUID:        body.UUID,
	}
	if body.Config != nil {
		switch *body.Config.Type {
		case "s3":
			var val *storageviews.S3ConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		}
	}

	return v
}

// NewShowLocationNotFound builds a storage service show-location endpoint
// not_found error.
func NewShowLocationNotFound(body *ShowLocationNotFoundResponseBody) *storage.StorageLocationNotfound {
	v := &storage.StorageLocationNotfound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// ValidateSubmitResponseBody runs the validations defined on SubmitResponseBody
func ValidateSubmitResponseBody(body *SubmitResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateAddLocationResponseBody runs the validations defined on
// add_location_response_body
func ValidateAddLocationResponseBody(body *AddLocationResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateMoveStatusResponseBody runs the validations defined on
// move_status_response_body
func ValidateMoveStatusResponseBody(body *MoveStatusResponseBody) (err error) {
	if body.Done == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("done", "body"))
	}
	return
}

// ValidateSubmitNotAvailableResponseBody runs the validations defined on
// submit_not_available_response_body
func ValidateSubmitNotAvailableResponseBody(body *SubmitNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSubmitNotValidResponseBody runs the validations defined on
// submit_not_valid_response_body
func ValidateSubmitNotValidResponseBody(body *SubmitNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotAvailableResponseBody runs the validations defined on
// update_not_available_response_body
func ValidateUpdateNotAvailableResponseBody(body *UpdateNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotValidResponseBody runs the validations defined on
// update_not_valid_response_body
func ValidateUpdateNotValidResponseBody(body *UpdateNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDownloadNotFoundResponseBody runs the validations defined on
// download_not_found_response_body
func ValidateDownloadNotFoundResponseBody(body *DownloadNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.AipID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("aip_id", "body"))
	}
	return
}

// ValidateAddLocationNotValidResponseBody runs the validations defined on
// add_location_not_valid_response_body
func ValidateAddLocationNotValidResponseBody(body *AddLocationNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveNotAvailableResponseBody runs the validations defined on
// move_not_available_response_body
func ValidateMoveNotAvailableResponseBody(body *MoveNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveNotValidResponseBody runs the validations defined on
// move_not_valid_response_body
func ValidateMoveNotValidResponseBody(body *MoveNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveNotFoundResponseBody runs the validations defined on
// move_not_found_response_body
func ValidateMoveNotFoundResponseBody(body *MoveNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.AipID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("aip_id", "body"))
	}
	return
}

// ValidateMoveStatusFailedDependencyResponseBody runs the validations defined
// on move_status_failed_dependency_response_body
func ValidateMoveStatusFailedDependencyResponseBody(body *MoveStatusFailedDependencyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveStatusNotFoundResponseBody runs the validations defined on
// move_status_not_found_response_body
func ValidateMoveStatusNotFoundResponseBody(body *MoveStatusNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.AipID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("aip_id", "body"))
	}
	return
}

// ValidateRejectNotAvailableResponseBody runs the validations defined on
// reject_not_available_response_body
func ValidateRejectNotAvailableResponseBody(body *RejectNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectNotValidResponseBody runs the validations defined on
// reject_not_valid_response_body
func ValidateRejectNotValidResponseBody(body *RejectNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectNotFoundResponseBody runs the validations defined on
// reject_not_found_response_body
func ValidateRejectNotFoundResponseBody(body *RejectNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.AipID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("aip_id", "body"))
	}
	return
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.AipID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("aip_id", "body"))
	}
	return
}

// ValidateShowLocationNotFoundResponseBody runs the validations defined on
// show-location_not_found_response_body
func ValidateShowLocationNotFoundResponseBody(body *ShowLocationNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateStoredLocationResponse runs the validations defined on
// StoredLocationResponse
func ValidateStoredLocationResponse(body *StoredLocationResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	if body.Purpose == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purpose", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Source != nil {
		if !(*body.Source == "unspecified" || *body.Source == "minio") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.source", *body.Source, []interface{}{"unspecified", "minio"}))
		}
	}
	if body.Purpose != nil {
		if !(*body.Purpose == "unspecified" || *body.Purpose == "aip_store") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.purpose", *body.Purpose, []interface{}{"unspecified", "aip_store"}))
		}
	}
	if body.Config != nil {
		if body.Config.Type == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Type", "body.config"))
		}
		if body.Config.Value == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Value", "body.config"))
		}
		if body.Config.Type != nil {
			if !(*body.Config.Type == "s3") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.config.Type", *body.Config.Type, []interface{}{"s3"}))
			}
		}
	}
	return
}
