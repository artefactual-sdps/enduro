// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage HTTP client types
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"encoding/json"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	storageviews "github.com/artefactual-sdps/enduro/internal/api/gen/storage/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// CreateAipRequestBody is the type of the "storage" service "create_aip"
// endpoint HTTP request body.
type CreateAipRequestBody struct {
	// Identifier of the AIP
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Name of the AIP
	Name string `form:"name" json:"name" xml:"name"`
	// ObjectKey of the AIP
	ObjectKey string `form:"object_key" json:"object_key" xml:"object_key"`
	// Status of the the AIP
	Status string `form:"status" json:"status" xml:"status"`
	// Identifier of the AIP's storage location
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
}

// SubmitAipRequestBody is the type of the "storage" service "submit_aip"
// endpoint HTTP request body.
type SubmitAipRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// MoveAipRequestBody is the type of the "storage" service "move_aip" endpoint
// HTTP request body.
type MoveAipRequestBody struct {
	// Identifier of storage location
	LocationID uuid.UUID `form:"location_id" json:"location_id" xml:"location_id"`
}

// CreateLocationRequestBody is the type of the "storage" service
// "create_location" endpoint HTTP request body.
type CreateLocationRequestBody struct {
	Name        string  `form:"name" json:"name" xml:"name"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Source      string  `form:"source" json:"source" xml:"source"`
	Purpose     string  `form:"purpose" json:"purpose" xml:"purpose"`
	Config      *struct {
		// Union type name, one of:
		// - "amss"
		// - "s3"
		// - "sftp"
		// - "url"
		Type string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
}

// CreateAipResponseBody is the type of the "storage" service "create_aip"
// endpoint HTTP response body.
type CreateAipResponseBody struct {
	Name *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the AIP
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Identifier of storage location
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// SubmitAipResponseBody is the type of the "storage" service "submit_aip"
// endpoint HTTP response body.
type SubmitAipResponseBody struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// MoveAipStatusResponseBody is the type of the "storage" service
// "move_aip_status" endpoint HTTP response body.
type MoveAipStatusResponseBody struct {
	Done *bool `form:"done,omitempty" json:"done,omitempty" xml:"done,omitempty"`
}

// ShowAipResponseBody is the type of the "storage" service "show_aip" endpoint
// HTTP response body.
type ShowAipResponseBody struct {
	Name *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the AIP
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Identifier of storage location
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ListLocationsResponseBody is the type of the "storage" service
// "list_locations" endpoint HTTP response body.
type ListLocationsResponseBody []*LocationResponse

// CreateLocationResponseBody is the type of the "storage" service
// "create_location" endpoint HTTP response body.
type CreateLocationResponseBody struct {
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ShowLocationResponseBody is the type of the "storage" service
// "show_location" endpoint HTTP response body.
type ShowLocationResponseBody struct {
	// Name of location
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Purpose of the location
	Purpose *string    `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Config  *struct {
		// Union type name, one of:
		// - "amss"
		// - "s3"
		// - "sftp"
		// - "url"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ListLocationAipsResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body.
type ListLocationAipsResponseBody []*AIPResponse

// CreateAipNotValidResponseBody is the type of the "storage" service
// "create_aip" endpoint HTTP response body for the "not_valid" error.
type CreateAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SubmitAipNotAvailableResponseBody is the type of the "storage" service
// "submit_aip" endpoint HTTP response body for the "not_available" error.
type SubmitAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SubmitAipNotValidResponseBody is the type of the "storage" service
// "submit_aip" endpoint HTTP response body for the "not_valid" error.
type SubmitAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateAipNotAvailableResponseBody is the type of the "storage" service
// "update_aip" endpoint HTTP response body for the "not_available" error.
type UpdateAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateAipNotValidResponseBody is the type of the "storage" service
// "update_aip" endpoint HTTP response body for the "not_valid" error.
type UpdateAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DownloadAipNotFoundResponseBody is the type of the "storage" service
// "download_aip" endpoint HTTP response body for the "not_found" error.
type DownloadAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// MoveAipNotAvailableResponseBody is the type of the "storage" service
// "move_aip" endpoint HTTP response body for the "not_available" error.
type MoveAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveAipNotValidResponseBody is the type of the "storage" service "move_aip"
// endpoint HTTP response body for the "not_valid" error.
type MoveAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveAipNotFoundResponseBody is the type of the "storage" service "move_aip"
// endpoint HTTP response body for the "not_found" error.
type MoveAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// MoveAipStatusFailedDependencyResponseBody is the type of the "storage"
// service "move_aip_status" endpoint HTTP response body for the
// "failed_dependency" error.
type MoveAipStatusFailedDependencyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MoveAipStatusNotFoundResponseBody is the type of the "storage" service
// "move_aip_status" endpoint HTTP response body for the "not_found" error.
type MoveAipStatusNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// RejectAipNotAvailableResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_available" error.
type RejectAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectAipNotValidResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_valid" error.
type RejectAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RejectAipNotFoundResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_found" error.
type RejectAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ShowAipNotFoundResponseBody is the type of the "storage" service "show_aip"
// endpoint HTTP response body for the "not_found" error.
type ShowAipNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Identifier of missing AIP
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// CreateLocationNotValidResponseBody is the type of the "storage" service
// "create_location" endpoint HTTP response body for the "not_valid" error.
type CreateLocationNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLocationNotFoundResponseBody is the type of the "storage" service
// "show_location" endpoint HTTP response body for the "not_found" error.
type ShowLocationNotFoundResponseBody struct {
	// Message of error
	Message *string    `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// ListLocationAipsNotValidResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body for the "not_valid" error.
type ListLocationAipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLocationAipsNotFoundResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body for the "not_found" error.
type ListLocationAipsNotFoundResponseBody struct {
	// Message of error
	Message *string    `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// LocationResponse is used to define fields on response body types.
type LocationResponse struct {
	// Name of location
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Purpose of the location
	Purpose *string    `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	UUID    *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Config  *struct {
		// Union type name, one of:
		// - "amss"
		// - "s3"
		// - "sftp"
		// - "url"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// AIPResponse is used to define fields on response body types.
type AIPResponse struct {
	Name *string    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UUID *uuid.UUID `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the AIP
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	ObjectKey *uuid.UUID `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Identifier of storage location
	LocationID *uuid.UUID `form:"location_id,omitempty" json:"location_id,omitempty" xml:"location_id,omitempty"`
	// Creation datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// NewCreateAipRequestBody builds the HTTP request body from the payload of the
// "create_aip" endpoint of the "storage" service.
func NewCreateAipRequestBody(p *storage.CreateAipPayload) *CreateAipRequestBody {
	body := &CreateAipRequestBody{
		UUID:       p.UUID,
		Name:       p.Name,
		ObjectKey:  p.ObjectKey,
		Status:     p.Status,
		LocationID: p.LocationID,
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "unspecified"
		}
	}
	return body
}

// NewSubmitAipRequestBody builds the HTTP request body from the payload of the
// "submit_aip" endpoint of the "storage" service.
func NewSubmitAipRequestBody(p *storage.SubmitAipPayload) *SubmitAipRequestBody {
	body := &SubmitAipRequestBody{
		Name: p.Name,
	}
	return body
}

// NewMoveAipRequestBody builds the HTTP request body from the payload of the
// "move_aip" endpoint of the "storage" service.
func NewMoveAipRequestBody(p *storage.MoveAipPayload) *MoveAipRequestBody {
	body := &MoveAipRequestBody{
		LocationID: p.LocationID,
	}
	return body
}

// NewCreateLocationRequestBody builds the HTTP request body from the payload
// of the "create_location" endpoint of the "storage" service.
func NewCreateLocationRequestBody(p *storage.CreateLocationPayload) *CreateLocationRequestBody {
	body := &CreateLocationRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Source:      p.Source,
		Purpose:     p.Purpose,
	}
	if p.Config != nil {
		js, _ := json.Marshal(p.Config)
		var name string
		switch p.Config.(type) {
		case *storage.AMSSConfig:
			name = "amss"
		case *storage.S3Config:
			name = "s3"
		case *storage.SFTPConfig:
			name = "sftp"
		case *storage.URLConfig:
			name = "url"
		}
		body.Config = &struct {
			// Union type name, one of:
			// - "amss"
			// - "s3"
			// - "sftp"
			// - "url"
			Type string `form:"Type" json:"Type" xml:"Type"`
			// JSON encoded union value
			Value string `form:"Value" json:"Value" xml:"Value"`
		}{
			Type:  name,
			Value: string(js),
		}
	}
	return body
}

// NewCreateAipAIPOK builds a "storage" service "create_aip" endpoint result
// from a HTTP "OK" response.
func NewCreateAipAIPOK(body *CreateAipResponseBody) *storageviews.AIPView {
	v := &storageviews.AIPView{
		Name:       body.Name,
		UUID:       body.UUID,
		Status:     body.Status,
		ObjectKey:  body.ObjectKey,
		LocationID: body.LocationID,
		CreatedAt:  body.CreatedAt,
	}

	return v
}

// NewCreateAipNotValid builds a storage service create_aip endpoint not_valid
// error.
func NewCreateAipNotValid(body *CreateAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateAipForbidden builds a storage service create_aip endpoint forbidden
// error.
func NewCreateAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewCreateAipUnauthorized builds a storage service create_aip endpoint
// unauthorized error.
func NewCreateAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewSubmitAipSubmitAIPResultAccepted builds a "storage" service "submit_aip"
// endpoint result from a HTTP "Accepted" response.
func NewSubmitAipSubmitAIPResultAccepted(body *SubmitAipResponseBody) *storage.SubmitAIPResult {
	v := &storage.SubmitAIPResult{
		URL: *body.URL,
	}

	return v
}

// NewSubmitAipNotAvailable builds a storage service submit_aip endpoint
// not_available error.
func NewSubmitAipNotAvailable(body *SubmitAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubmitAipNotValid builds a storage service submit_aip endpoint not_valid
// error.
func NewSubmitAipNotValid(body *SubmitAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubmitAipForbidden builds a storage service submit_aip endpoint forbidden
// error.
func NewSubmitAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewSubmitAipUnauthorized builds a storage service submit_aip endpoint
// unauthorized error.
func NewSubmitAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewUpdateAipNotAvailable builds a storage service update_aip endpoint
// not_available error.
func NewUpdateAipNotAvailable(body *UpdateAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateAipNotValid builds a storage service update_aip endpoint not_valid
// error.
func NewUpdateAipNotValid(body *UpdateAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateAipForbidden builds a storage service update_aip endpoint forbidden
// error.
func NewUpdateAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewUpdateAipUnauthorized builds a storage service update_aip endpoint
// unauthorized error.
func NewUpdateAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewDownloadAipNotFound builds a storage service download_aip endpoint
// not_found error.
func NewDownloadAipNotFound(body *DownloadAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewDownloadAipForbidden builds a storage service download_aip endpoint
// forbidden error.
func NewDownloadAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewDownloadAipUnauthorized builds a storage service download_aip endpoint
// unauthorized error.
func NewDownloadAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewMoveAipNotAvailable builds a storage service move_aip endpoint
// not_available error.
func NewMoveAipNotAvailable(body *MoveAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveAipNotValid builds a storage service move_aip endpoint not_valid
// error.
func NewMoveAipNotValid(body *MoveAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveAipNotFound builds a storage service move_aip endpoint not_found
// error.
func NewMoveAipNotFound(body *MoveAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewMoveAipForbidden builds a storage service move_aip endpoint forbidden
// error.
func NewMoveAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewMoveAipUnauthorized builds a storage service move_aip endpoint
// unauthorized error.
func NewMoveAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewMoveAipStatusMoveStatusResultOK builds a "storage" service
// "move_aip_status" endpoint result from a HTTP "OK" response.
func NewMoveAipStatusMoveStatusResultOK(body *MoveAipStatusResponseBody) *storage.MoveStatusResult {
	v := &storage.MoveStatusResult{
		Done: *body.Done,
	}

	return v
}

// NewMoveAipStatusFailedDependency builds a storage service move_aip_status
// endpoint failed_dependency error.
func NewMoveAipStatusFailedDependency(body *MoveAipStatusFailedDependencyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMoveAipStatusNotFound builds a storage service move_aip_status endpoint
// not_found error.
func NewMoveAipStatusNotFound(body *MoveAipStatusNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewMoveAipStatusForbidden builds a storage service move_aip_status endpoint
// forbidden error.
func NewMoveAipStatusForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewMoveAipStatusUnauthorized builds a storage service move_aip_status
// endpoint unauthorized error.
func NewMoveAipStatusUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewRejectAipNotAvailable builds a storage service reject_aip endpoint
// not_available error.
func NewRejectAipNotAvailable(body *RejectAipNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectAipNotValid builds a storage service reject_aip endpoint not_valid
// error.
func NewRejectAipNotValid(body *RejectAipNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRejectAipNotFound builds a storage service reject_aip endpoint not_found
// error.
func NewRejectAipNotFound(body *RejectAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewRejectAipForbidden builds a storage service reject_aip endpoint forbidden
// error.
func NewRejectAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewRejectAipUnauthorized builds a storage service reject_aip endpoint
// unauthorized error.
func NewRejectAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewShowAipAIPOK builds a "storage" service "show_aip" endpoint result from a
// HTTP "OK" response.
func NewShowAipAIPOK(body *ShowAipResponseBody) *storageviews.AIPView {
	v := &storageviews.AIPView{
		Name:       body.Name,
		UUID:       body.UUID,
		Status:     body.Status,
		ObjectKey:  body.ObjectKey,
		LocationID: body.LocationID,
		CreatedAt:  body.CreatedAt,
	}

	return v
}

// NewShowAipNotFound builds a storage service show_aip endpoint not_found
// error.
func NewShowAipNotFound(body *ShowAipNotFoundResponseBody) *storage.AIPNotFound {
	v := &storage.AIPNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewShowAipForbidden builds a storage service show_aip endpoint forbidden
// error.
func NewShowAipForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewShowAipUnauthorized builds a storage service show_aip endpoint
// unauthorized error.
func NewShowAipUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewListLocationsLocationCollectionOK builds a "storage" service
// "list_locations" endpoint result from a HTTP "OK" response.
func NewListLocationsLocationCollectionOK(body ListLocationsResponseBody) storageviews.LocationCollectionView {
	v := make([]*storageviews.LocationView, len(body))
	for i, val := range body {
		v[i] = unmarshalLocationResponseToStorageviewsLocationView(val)
	}

	return v
}

// NewListLocationsForbidden builds a storage service list_locations endpoint
// forbidden error.
func NewListLocationsForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewListLocationsUnauthorized builds a storage service list_locations
// endpoint unauthorized error.
func NewListLocationsUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewCreateLocationResultCreated builds a "storage" service "create_location"
// endpoint result from a HTTP "Created" response.
func NewCreateLocationResultCreated(body *CreateLocationResponseBody) *storage.CreateLocationResult {
	v := &storage.CreateLocationResult{
		UUID: *body.UUID,
	}

	return v
}

// NewCreateLocationNotValid builds a storage service create_location endpoint
// not_valid error.
func NewCreateLocationNotValid(body *CreateLocationNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateLocationForbidden builds a storage service create_location endpoint
// forbidden error.
func NewCreateLocationForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewCreateLocationUnauthorized builds a storage service create_location
// endpoint unauthorized error.
func NewCreateLocationUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewShowLocationLocationOK builds a "storage" service "show_location"
// endpoint result from a HTTP "OK" response.
func NewShowLocationLocationOK(body *ShowLocationResponseBody) *storageviews.LocationView {
	v := &storageviews.LocationView{
		Name:        body.Name,
		Description: body.Description,
		Source:      body.Source,
		Purpose:     body.Purpose,
		UUID:        body.UUID,
		CreatedAt:   body.CreatedAt,
	}
	if body.Config != nil {
		switch *body.Config.Type {
		case "amss":
			var val *storageviews.AMSSConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "s3":
			var val *storageviews.S3ConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "sftp":
			var val *storageviews.SFTPConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "url":
			var val *storageviews.URLConfigView
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		}
	}

	return v
}

// NewShowLocationNotFound builds a storage service show_location endpoint
// not_found error.
func NewShowLocationNotFound(body *ShowLocationNotFoundResponseBody) *storage.LocationNotFound {
	v := &storage.LocationNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewShowLocationForbidden builds a storage service show_location endpoint
// forbidden error.
func NewShowLocationForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewShowLocationUnauthorized builds a storage service show_location endpoint
// unauthorized error.
func NewShowLocationUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// NewListLocationAipsAIPCollectionOK builds a "storage" service
// "list_location_aips" endpoint result from a HTTP "OK" response.
func NewListLocationAipsAIPCollectionOK(body ListLocationAipsResponseBody) storageviews.AIPCollectionView {
	v := make([]*storageviews.AIPView, len(body))
	for i, val := range body {
		v[i] = unmarshalAIPResponseToStorageviewsAIPView(val)
	}

	return v
}

// NewListLocationAipsNotValid builds a storage service list_location_aips
// endpoint not_valid error.
func NewListLocationAipsNotValid(body *ListLocationAipsNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLocationAipsNotFound builds a storage service list_location_aips
// endpoint not_found error.
func NewListLocationAipsNotFound(body *ListLocationAipsNotFoundResponseBody) *storage.LocationNotFound {
	v := &storage.LocationNotFound{
		Message: *body.Message,
		UUID:    *body.UUID,
	}

	return v
}

// NewListLocationAipsForbidden builds a storage service list_location_aips
// endpoint forbidden error.
func NewListLocationAipsForbidden(body string) storage.Forbidden {
	v := storage.Forbidden(body)

	return v
}

// NewListLocationAipsUnauthorized builds a storage service list_location_aips
// endpoint unauthorized error.
func NewListLocationAipsUnauthorized(body string) storage.Unauthorized {
	v := storage.Unauthorized(body)

	return v
}

// ValidateSubmitAipResponseBody runs the validations defined on
// submit_aip_response_body
func ValidateSubmitAipResponseBody(body *SubmitAipResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateMoveAipStatusResponseBody runs the validations defined on
// move_aip_status_response_body
func ValidateMoveAipStatusResponseBody(body *MoveAipStatusResponseBody) (err error) {
	if body.Done == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("done", "body"))
	}
	return
}

// ValidateCreateLocationResponseBody runs the validations defined on
// create_location_response_body
func ValidateCreateLocationResponseBody(body *CreateLocationResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateCreateAipNotValidResponseBody runs the validations defined on
// create_aip_not_valid_response_body
func ValidateCreateAipNotValidResponseBody(body *CreateAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSubmitAipNotAvailableResponseBody runs the validations defined on
// submit_aip_not_available_response_body
func ValidateSubmitAipNotAvailableResponseBody(body *SubmitAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSubmitAipNotValidResponseBody runs the validations defined on
// submit_aip_not_valid_response_body
func ValidateSubmitAipNotValidResponseBody(body *SubmitAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateAipNotAvailableResponseBody runs the validations defined on
// update_aip_not_available_response_body
func ValidateUpdateAipNotAvailableResponseBody(body *UpdateAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateAipNotValidResponseBody runs the validations defined on
// update_aip_not_valid_response_body
func ValidateUpdateAipNotValidResponseBody(body *UpdateAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDownloadAipNotFoundResponseBody runs the validations defined on
// download_aip_not_found_response_body
func ValidateDownloadAipNotFoundResponseBody(body *DownloadAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateMoveAipNotAvailableResponseBody runs the validations defined on
// move_aip_not_available_response_body
func ValidateMoveAipNotAvailableResponseBody(body *MoveAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveAipNotValidResponseBody runs the validations defined on
// move_aip_not_valid_response_body
func ValidateMoveAipNotValidResponseBody(body *MoveAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveAipNotFoundResponseBody runs the validations defined on
// move_aip_not_found_response_body
func ValidateMoveAipNotFoundResponseBody(body *MoveAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateMoveAipStatusFailedDependencyResponseBody runs the validations
// defined on move_aip_status_failed_dependency_response_body
func ValidateMoveAipStatusFailedDependencyResponseBody(body *MoveAipStatusFailedDependencyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMoveAipStatusNotFoundResponseBody runs the validations defined on
// move_aip_status_not_found_response_body
func ValidateMoveAipStatusNotFoundResponseBody(body *MoveAipStatusNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateRejectAipNotAvailableResponseBody runs the validations defined on
// reject_aip_not_available_response_body
func ValidateRejectAipNotAvailableResponseBody(body *RejectAipNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectAipNotValidResponseBody runs the validations defined on
// reject_aip_not_valid_response_body
func ValidateRejectAipNotValidResponseBody(body *RejectAipNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRejectAipNotFoundResponseBody runs the validations defined on
// reject_aip_not_found_response_body
func ValidateRejectAipNotFoundResponseBody(body *RejectAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateShowAipNotFoundResponseBody runs the validations defined on
// show_aip_not_found_response_body
func ValidateShowAipNotFoundResponseBody(body *ShowAipNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateCreateLocationNotValidResponseBody runs the validations defined on
// create_location_not_valid_response_body
func ValidateCreateLocationNotValidResponseBody(body *CreateLocationNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLocationNotFoundResponseBody runs the validations defined on
// show_location_not_found_response_body
func ValidateShowLocationNotFoundResponseBody(body *ShowLocationNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateListLocationAipsNotValidResponseBody runs the validations defined on
// list_location_aips_not_valid_response_body
func ValidateListLocationAipsNotValidResponseBody(body *ListLocationAipsNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLocationAipsNotFoundResponseBody runs the validations defined on
// list_location_aips_not_found_response_body
func ValidateListLocationAipsNotFoundResponseBody(body *ListLocationAipsNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	return
}

// ValidateLocationResponse runs the validations defined on LocationResponse
func ValidateLocationResponse(body *LocationResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	if body.Purpose == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purpose", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Source != nil {
		if !(*body.Source == "unspecified" || *body.Source == "minio" || *body.Source == "sftp" || *body.Source == "amss") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.source", *body.Source, []any{"unspecified", "minio", "sftp", "amss"}))
		}
	}
	if body.Purpose != nil {
		if !(*body.Purpose == "unspecified" || *body.Purpose == "aip_store") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.purpose", *body.Purpose, []any{"unspecified", "aip_store"}))
		}
	}
	if body.Config != nil {
		if body.Config.Type == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Type", "body.config"))
		}
		if body.Config.Value == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Value", "body.config"))
		}
		if body.Config.Type != nil {
			if !(*body.Config.Type == "amss" || *body.Config.Type == "s3" || *body.Config.Type == "sftp" || *body.Config.Type == "url") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.config.Type", *body.Config.Type, []any{"amss", "s3", "sftp", "url"}))
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateAIPResponse runs the validations defined on AIPResponse
func ValidateAIPResponse(body *AIPResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ObjectKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("object_key", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "in_review" || *body.Status == "rejected" || *body.Status == "stored" || *body.Status == "moving") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "in_review", "rejected", "stored", "moving"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}
