// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage client HTTP transport
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"context"
	"net/http"
	"time"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the storage service endpoint HTTP clients.
type Client struct {
	// MonitorRequest Doer is the HTTP client used to make requests to the
	// monitor_request endpoint.
	MonitorRequestDoer goahttp.Doer

	// Monitor Doer is the HTTP client used to make requests to the monitor
	// endpoint.
	MonitorDoer goahttp.Doer

	// ListAips Doer is the HTTP client used to make requests to the list_aips
	// endpoint.
	ListAipsDoer goahttp.Doer

	// CreateAip Doer is the HTTP client used to make requests to the create_aip
	// endpoint.
	CreateAipDoer goahttp.Doer

	// SubmitAip Doer is the HTTP client used to make requests to the submit_aip
	// endpoint.
	SubmitAipDoer goahttp.Doer

	// UpdateAip Doer is the HTTP client used to make requests to the update_aip
	// endpoint.
	UpdateAipDoer goahttp.Doer

	// DownloadAipRequest Doer is the HTTP client used to make requests to the
	// download_aip_request endpoint.
	DownloadAipRequestDoer goahttp.Doer

	// DownloadAip Doer is the HTTP client used to make requests to the
	// download_aip endpoint.
	DownloadAipDoer goahttp.Doer

	// MoveAip Doer is the HTTP client used to make requests to the move_aip
	// endpoint.
	MoveAipDoer goahttp.Doer

	// MoveAipStatus Doer is the HTTP client used to make requests to the
	// move_aip_status endpoint.
	MoveAipStatusDoer goahttp.Doer

	// RejectAip Doer is the HTTP client used to make requests to the reject_aip
	// endpoint.
	RejectAipDoer goahttp.Doer

	// ShowAip Doer is the HTTP client used to make requests to the show_aip
	// endpoint.
	ShowAipDoer goahttp.Doer

	// ListAipWorkflows Doer is the HTTP client used to make requests to the
	// list_aip_workflows endpoint.
	ListAipWorkflowsDoer goahttp.Doer

	// RequestAipDeletion Doer is the HTTP client used to make requests to the
	// request_aip_deletion endpoint.
	RequestAipDeletionDoer goahttp.Doer

	// ReviewAipDeletion Doer is the HTTP client used to make requests to the
	// review_aip_deletion endpoint.
	ReviewAipDeletionDoer goahttp.Doer

	// CancelAipDeletion Doer is the HTTP client used to make requests to the
	// cancel_aip_deletion endpoint.
	CancelAipDeletionDoer goahttp.Doer

	// ListLocations Doer is the HTTP client used to make requests to the
	// list_locations endpoint.
	ListLocationsDoer goahttp.Doer

	// CreateLocation Doer is the HTTP client used to make requests to the
	// create_location endpoint.
	CreateLocationDoer goahttp.Doer

	// ShowLocation Doer is the HTTP client used to make requests to the
	// show_location endpoint.
	ShowLocationDoer goahttp.Doer

	// ListLocationAips Doer is the HTTP client used to make requests to the
	// list_location_aips endpoint.
	ListLocationAipsDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the storage service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		MonitorRequestDoer:     doer,
		MonitorDoer:            doer,
		ListAipsDoer:           doer,
		CreateAipDoer:          doer,
		SubmitAipDoer:          doer,
		UpdateAipDoer:          doer,
		DownloadAipRequestDoer: doer,
		DownloadAipDoer:        doer,
		MoveAipDoer:            doer,
		MoveAipStatusDoer:      doer,
		RejectAipDoer:          doer,
		ShowAipDoer:            doer,
		ListAipWorkflowsDoer:   doer,
		RequestAipDeletionDoer: doer,
		ReviewAipDeletionDoer:  doer,
		CancelAipDeletionDoer:  doer,
		ListLocationsDoer:      doer,
		CreateLocationDoer:     doer,
		ShowLocationDoer:       doer,
		ListLocationAipsDoer:   doer,
		CORSDoer:               doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
		dialer:                 dialer,
		configurer:             cfn,
	}
}

// MonitorRequest returns an endpoint that makes HTTP requests to the storage
// service monitor_request server.
func (c *Client) MonitorRequest() goa.Endpoint {
	var (
		encodeRequest  = EncodeMonitorRequestRequest(c.encoder)
		decodeResponse = DecodeMonitorRequestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorRequestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MonitorRequestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "monitor_request", err)
		}
		return decodeResponse(resp)
	}
}

// Monitor returns an endpoint that makes HTTP requests to the storage service
// monitor server.
func (c *Client) Monitor() goa.Endpoint {
	var (
		encodeRequest  = EncodeMonitorRequest(c.encoder)
		decodeResponse = DecodeMonitorResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("storage", "monitor", err)
		}
		if c.configurer.MonitorFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.MonitorFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &MonitorClientStream{conn: conn}
		return stream, nil
	}
}

// ListAips returns an endpoint that makes HTTP requests to the storage service
// list_aips server.
func (c *Client) ListAips() goa.Endpoint {
	var (
		encodeRequest  = EncodeListAipsRequest(c.encoder)
		decodeResponse = DecodeListAipsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListAipsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListAipsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "list_aips", err)
		}
		return decodeResponse(resp)
	}
}

// CreateAip returns an endpoint that makes HTTP requests to the storage
// service create_aip server.
func (c *Client) CreateAip() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateAipRequest(c.encoder)
		decodeResponse = DecodeCreateAipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateAipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateAipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "create_aip", err)
		}
		return decodeResponse(resp)
	}
}

// SubmitAip returns an endpoint that makes HTTP requests to the storage
// service submit_aip server.
func (c *Client) SubmitAip() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubmitAipRequest(c.encoder)
		decodeResponse = DecodeSubmitAipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubmitAipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubmitAipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "submit_aip", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateAip returns an endpoint that makes HTTP requests to the storage
// service update_aip server.
func (c *Client) UpdateAip() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateAipRequest(c.encoder)
		decodeResponse = DecodeUpdateAipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateAipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateAipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "update_aip", err)
		}
		return decodeResponse(resp)
	}
}

// DownloadAipRequest returns an endpoint that makes HTTP requests to the
// storage service download_aip_request server.
func (c *Client) DownloadAipRequest() goa.Endpoint {
	var (
		encodeRequest  = EncodeDownloadAipRequestRequest(c.encoder)
		decodeResponse = DecodeDownloadAipRequestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDownloadAipRequestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DownloadAipRequestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "download_aip_request", err)
		}
		return decodeResponse(resp)
	}
}

// DownloadAip returns an endpoint that makes HTTP requests to the storage
// service download_aip server.
func (c *Client) DownloadAip() goa.Endpoint {
	var (
		encodeRequest  = EncodeDownloadAipRequest(c.encoder)
		decodeResponse = DecodeDownloadAipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDownloadAipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DownloadAipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "download_aip", err)
		}
		res, err := decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &storage.DownloadAipResponseData{Result: res.(*storage.DownloadAipResult), Body: resp.Body}, nil
	}
}

// MoveAip returns an endpoint that makes HTTP requests to the storage service
// move_aip server.
func (c *Client) MoveAip() goa.Endpoint {
	var (
		encodeRequest  = EncodeMoveAipRequest(c.encoder)
		decodeResponse = DecodeMoveAipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMoveAipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MoveAipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "move_aip", err)
		}
		return decodeResponse(resp)
	}
}

// MoveAipStatus returns an endpoint that makes HTTP requests to the storage
// service move_aip_status server.
func (c *Client) MoveAipStatus() goa.Endpoint {
	var (
		encodeRequest  = EncodeMoveAipStatusRequest(c.encoder)
		decodeResponse = DecodeMoveAipStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMoveAipStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MoveAipStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "move_aip_status", err)
		}
		return decodeResponse(resp)
	}
}

// RejectAip returns an endpoint that makes HTTP requests to the storage
// service reject_aip server.
func (c *Client) RejectAip() goa.Endpoint {
	var (
		encodeRequest  = EncodeRejectAipRequest(c.encoder)
		decodeResponse = DecodeRejectAipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRejectAipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RejectAipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "reject_aip", err)
		}
		return decodeResponse(resp)
	}
}

// ShowAip returns an endpoint that makes HTTP requests to the storage service
// show_aip server.
func (c *Client) ShowAip() goa.Endpoint {
	var (
		encodeRequest  = EncodeShowAipRequest(c.encoder)
		decodeResponse = DecodeShowAipResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildShowAipRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowAipDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "show_aip", err)
		}
		return decodeResponse(resp)
	}
}

// ListAipWorkflows returns an endpoint that makes HTTP requests to the storage
// service list_aip_workflows server.
func (c *Client) ListAipWorkflows() goa.Endpoint {
	var (
		encodeRequest  = EncodeListAipWorkflowsRequest(c.encoder)
		decodeResponse = DecodeListAipWorkflowsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListAipWorkflowsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListAipWorkflowsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "list_aip_workflows", err)
		}
		return decodeResponse(resp)
	}
}

// RequestAipDeletion returns an endpoint that makes HTTP requests to the
// storage service request_aip_deletion server.
func (c *Client) RequestAipDeletion() goa.Endpoint {
	var (
		encodeRequest  = EncodeRequestAipDeletionRequest(c.encoder)
		decodeResponse = DecodeRequestAipDeletionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRequestAipDeletionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RequestAipDeletionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "request_aip_deletion", err)
		}
		return decodeResponse(resp)
	}
}

// ReviewAipDeletion returns an endpoint that makes HTTP requests to the
// storage service review_aip_deletion server.
func (c *Client) ReviewAipDeletion() goa.Endpoint {
	var (
		encodeRequest  = EncodeReviewAipDeletionRequest(c.encoder)
		decodeResponse = DecodeReviewAipDeletionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReviewAipDeletionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReviewAipDeletionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "review_aip_deletion", err)
		}
		return decodeResponse(resp)
	}
}

// CancelAipDeletion returns an endpoint that makes HTTP requests to the
// storage service cancel_aip_deletion server.
func (c *Client) CancelAipDeletion() goa.Endpoint {
	var (
		encodeRequest  = EncodeCancelAipDeletionRequest(c.encoder)
		decodeResponse = DecodeCancelAipDeletionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCancelAipDeletionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CancelAipDeletionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "cancel_aip_deletion", err)
		}
		return decodeResponse(resp)
	}
}

// ListLocations returns an endpoint that makes HTTP requests to the storage
// service list_locations server.
func (c *Client) ListLocations() goa.Endpoint {
	var (
		encodeRequest  = EncodeListLocationsRequest(c.encoder)
		decodeResponse = DecodeListLocationsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListLocationsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListLocationsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "list_locations", err)
		}
		return decodeResponse(resp)
	}
}

// CreateLocation returns an endpoint that makes HTTP requests to the storage
// service create_location server.
func (c *Client) CreateLocation() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateLocationRequest(c.encoder)
		decodeResponse = DecodeCreateLocationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateLocationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateLocationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "create_location", err)
		}
		return decodeResponse(resp)
	}
}

// ShowLocation returns an endpoint that makes HTTP requests to the storage
// service show_location server.
func (c *Client) ShowLocation() goa.Endpoint {
	var (
		encodeRequest  = EncodeShowLocationRequest(c.encoder)
		decodeResponse = DecodeShowLocationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildShowLocationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowLocationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "show_location", err)
		}
		return decodeResponse(resp)
	}
}

// ListLocationAips returns an endpoint that makes HTTP requests to the storage
// service list_location_aips server.
func (c *Client) ListLocationAips() goa.Endpoint {
	var (
		encodeRequest  = EncodeListLocationAipsRequest(c.encoder)
		decodeResponse = DecodeListLocationAipsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListLocationAipsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListLocationAipsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "list_location_aips", err)
		}
		return decodeResponse(resp)
	}
}
