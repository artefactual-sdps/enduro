// Code generated by goa v3.7.12, DO NOT EDIT.
//
// storage client HTTP transport
//
// Command:
// $ goa-v3.7.10 gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the storage service endpoint HTTP clients.
type Client struct {
	// Submit Doer is the HTTP client used to make requests to the submit endpoint.
	SubmitDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// Download Doer is the HTTP client used to make requests to the download
	// endpoint.
	DownloadDoer goahttp.Doer

	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// Move Doer is the HTTP client used to make requests to the move endpoint.
	MoveDoer goahttp.Doer

	// MoveStatus Doer is the HTTP client used to make requests to the move_status
	// endpoint.
	MoveStatusDoer goahttp.Doer

	// Reject Doer is the HTTP client used to make requests to the reject endpoint.
	RejectDoer goahttp.Doer

	// Show Doer is the HTTP client used to make requests to the show endpoint.
	ShowDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the storage service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		SubmitDoer:          doer,
		UpdateDoer:          doer,
		DownloadDoer:        doer,
		ListDoer:            doer,
		MoveDoer:            doer,
		MoveStatusDoer:      doer,
		RejectDoer:          doer,
		ShowDoer:            doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Submit returns an endpoint that makes HTTP requests to the storage service
// submit server.
func (c *Client) Submit() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubmitRequest(c.encoder)
		decodeResponse = DecodeSubmitResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSubmitRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubmitDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "submit", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the storage service
// update server.
func (c *Client) Update() goa.Endpoint {
	var (
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "update", err)
		}
		return decodeResponse(resp)
	}
}

// Download returns an endpoint that makes HTTP requests to the storage service
// download server.
func (c *Client) Download() goa.Endpoint {
	var (
		decodeResponse = DecodeDownloadResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDownloadRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DownloadDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "download", err)
		}
		return decodeResponse(resp)
	}
}

// List returns an endpoint that makes HTTP requests to the storage service
// list server.
func (c *Client) List() goa.Endpoint {
	var (
		decodeResponse = DecodeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "list", err)
		}
		return decodeResponse(resp)
	}
}

// Move returns an endpoint that makes HTTP requests to the storage service
// move server.
func (c *Client) Move() goa.Endpoint {
	var (
		encodeRequest  = EncodeMoveRequest(c.encoder)
		decodeResponse = DecodeMoveResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMoveRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MoveDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "move", err)
		}
		return decodeResponse(resp)
	}
}

// MoveStatus returns an endpoint that makes HTTP requests to the storage
// service move_status server.
func (c *Client) MoveStatus() goa.Endpoint {
	var (
		decodeResponse = DecodeMoveStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMoveStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MoveStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "move_status", err)
		}
		return decodeResponse(resp)
	}
}

// Reject returns an endpoint that makes HTTP requests to the storage service
// reject server.
func (c *Client) Reject() goa.Endpoint {
	var (
		decodeResponse = DecodeRejectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRejectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RejectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "reject", err)
		}
		return decodeResponse(resp)
	}
}

// Show returns an endpoint that makes HTTP requests to the storage service
// show server.
func (c *Client) Show() goa.Endpoint {
	var (
		decodeResponse = DecodeShowResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("storage", "show", err)
		}
		return decodeResponse(resp)
	}
}
