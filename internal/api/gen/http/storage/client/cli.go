// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage HTTP client CLI support package
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	goa "goa.design/goa/v3/pkg"
)

// BuildMonitorRequestPayload builds the payload for the storage
// monitor_request endpoint from CLI flags.
func BuildMonitorRequestPayload(storageMonitorRequestToken string) (*storage.MonitorRequestPayload, error) {
	var token *string
	{
		if storageMonitorRequestToken != "" {
			token = &storageMonitorRequestToken
		}
	}
	v := &storage.MonitorRequestPayload{}
	v.Token = token

	return v, nil
}

// BuildMonitorPayload builds the payload for the storage monitor endpoint from
// CLI flags.
func BuildMonitorPayload(storageMonitorTicket string) (*storage.MonitorPayload, error) {
	var ticket *string
	{
		if storageMonitorTicket != "" {
			ticket = &storageMonitorTicket
		}
	}
	v := &storage.MonitorPayload{}
	v.Ticket = ticket

	return v, nil
}

// BuildListAipsPayload builds the payload for the storage list_aips endpoint
// from CLI flags.
func BuildListAipsPayload(storageListAipsName string, storageListAipsEarliestCreatedTime string, storageListAipsLatestCreatedTime string, storageListAipsStatus string, storageListAipsLimit string, storageListAipsOffset string, storageListAipsToken string) (*storage.ListAipsPayload, error) {
	var err error
	var name *string
	{
		if storageListAipsName != "" {
			name = &storageListAipsName
		}
	}
	var earliestCreatedTime *string
	{
		if storageListAipsEarliestCreatedTime != "" {
			earliestCreatedTime = &storageListAipsEarliestCreatedTime
			err = goa.MergeErrors(err, goa.ValidateFormat("earliest_created_time", *earliestCreatedTime, goa.FormatDateTime))
			if err != nil {
				return nil, err
			}
		}
	}
	var latestCreatedTime *string
	{
		if storageListAipsLatestCreatedTime != "" {
			latestCreatedTime = &storageListAipsLatestCreatedTime
			err = goa.MergeErrors(err, goa.ValidateFormat("latest_created_time", *latestCreatedTime, goa.FormatDateTime))
			if err != nil {
				return nil, err
			}
		}
	}
	var status *string
	{
		if storageListAipsStatus != "" {
			status = &storageListAipsStatus
			if !(*status == "unspecified" || *status == "stored" || *status == "pending" || *status == "processing" || *status == "deleted" || *status == "queued") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("status", *status, []any{"unspecified", "stored", "pending", "processing", "deleted", "queued"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var limit *int
	{
		if storageListAipsLimit != "" {
			var v int64
			v, err = strconv.ParseInt(storageListAipsLimit, 10, strconv.IntSize)
			val := int(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
		}
	}
	var offset *int
	{
		if storageListAipsOffset != "" {
			var v int64
			v, err = strconv.ParseInt(storageListAipsOffset, 10, strconv.IntSize)
			val := int(v)
			offset = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
		}
	}
	var token *string
	{
		if storageListAipsToken != "" {
			token = &storageListAipsToken
		}
	}
	v := &storage.ListAipsPayload{}
	v.Name = name
	v.EarliestCreatedTime = earliestCreatedTime
	v.LatestCreatedTime = latestCreatedTime
	v.Status = status
	v.Limit = limit
	v.Offset = offset
	v.Token = token

	return v, nil
}

// BuildCreateAipPayload builds the payload for the storage create_aip endpoint
// from CLI flags.
func BuildCreateAipPayload(storageCreateAipBody string, storageCreateAipToken string) (*storage.CreateAipPayload, error) {
	var err error
	var body CreateAipRequestBody
	{
		err = json.Unmarshal([]byte(storageCreateAipBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"location_uuid\": \"d1845cb6-a5ea-474a-9ab8-26f9bcd919f5\",\n      \"name\": \"abc123\",\n      \"object_key\": \"d1845cb6-a5ea-474a-9ab8-26f9bcd919f5\",\n      \"status\": \"stored\",\n      \"uuid\": \"d1845cb6-a5ea-474a-9ab8-26f9bcd919f5\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uuid", body.UUID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.object_key", body.ObjectKey, goa.FormatUUID))
		if !(body.Status == "unspecified" || body.Status == "stored" || body.Status == "pending" || body.Status == "processing" || body.Status == "deleted" || body.Status == "queued") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []any{"unspecified", "stored", "pending", "processing", "deleted", "queued"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageCreateAipToken != "" {
			token = &storageCreateAipToken
		}
	}
	v := &storage.CreateAipPayload{
		UUID:         body.UUID,
		Name:         body.Name,
		ObjectKey:    body.ObjectKey,
		Status:       body.Status,
		LocationUUID: body.LocationUUID,
	}
	{
		var zero string
		if v.Status == zero {
			v.Status = "unspecified"
		}
	}
	v.Token = token

	return v, nil
}

// BuildSubmitAipPayload builds the payload for the storage submit_aip endpoint
// from CLI flags.
func BuildSubmitAipPayload(storageSubmitAipBody string, storageSubmitAipUUID string, storageSubmitAipToken string) (*storage.SubmitAipPayload, error) {
	var err error
	var body SubmitAipRequestBody
	{
		err = json.Unmarshal([]byte(storageSubmitAipBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"abc123\"\n   }'")
		}
	}
	var uuid string
	{
		uuid = storageSubmitAipUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageSubmitAipToken != "" {
			token = &storageSubmitAipToken
		}
	}
	v := &storage.SubmitAipPayload{
		Name: body.Name,
	}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildUpdateAipPayload builds the payload for the storage update_aip endpoint
// from CLI flags.
func BuildUpdateAipPayload(storageUpdateAipUUID string, storageUpdateAipToken string) (*storage.UpdateAipPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageUpdateAipUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageUpdateAipToken != "" {
			token = &storageUpdateAipToken
		}
	}
	v := &storage.UpdateAipPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildDownloadAipRequestPayload builds the payload for the storage
// download_aip_request endpoint from CLI flags.
func BuildDownloadAipRequestPayload(storageDownloadAipRequestUUID string, storageDownloadAipRequestToken string) (*storage.DownloadAipRequestPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageDownloadAipRequestUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageDownloadAipRequestToken != "" {
			token = &storageDownloadAipRequestToken
		}
	}
	v := &storage.DownloadAipRequestPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildDownloadAipPayload builds the payload for the storage download_aip
// endpoint from CLI flags.
func BuildDownloadAipPayload(storageDownloadAipUUID string, storageDownloadAipTicket string) (*storage.DownloadAipPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageDownloadAipUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var ticket *string
	{
		if storageDownloadAipTicket != "" {
			ticket = &storageDownloadAipTicket
		}
	}
	v := &storage.DownloadAipPayload{}
	v.UUID = uuid
	v.Ticket = ticket

	return v, nil
}

// BuildMoveAipPayload builds the payload for the storage move_aip endpoint
// from CLI flags.
func BuildMoveAipPayload(storageMoveAipBody string, storageMoveAipUUID string, storageMoveAipToken string) (*storage.MoveAipPayload, error) {
	var err error
	var body MoveAipRequestBody
	{
		err = json.Unmarshal([]byte(storageMoveAipBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"location_uuid\": \"d1845cb6-a5ea-474a-9ab8-26f9bcd919f5\"\n   }'")
		}
	}
	var uuid string
	{
		uuid = storageMoveAipUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageMoveAipToken != "" {
			token = &storageMoveAipToken
		}
	}
	v := &storage.MoveAipPayload{
		LocationUUID: body.LocationUUID,
	}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildMoveAipStatusPayload builds the payload for the storage move_aip_status
// endpoint from CLI flags.
func BuildMoveAipStatusPayload(storageMoveAipStatusUUID string, storageMoveAipStatusToken string) (*storage.MoveAipStatusPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageMoveAipStatusUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageMoveAipStatusToken != "" {
			token = &storageMoveAipStatusToken
		}
	}
	v := &storage.MoveAipStatusPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildRejectAipPayload builds the payload for the storage reject_aip endpoint
// from CLI flags.
func BuildRejectAipPayload(storageRejectAipUUID string, storageRejectAipToken string) (*storage.RejectAipPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageRejectAipUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageRejectAipToken != "" {
			token = &storageRejectAipToken
		}
	}
	v := &storage.RejectAipPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildShowAipPayload builds the payload for the storage show_aip endpoint
// from CLI flags.
func BuildShowAipPayload(storageShowAipUUID string, storageShowAipToken string) (*storage.ShowAipPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageShowAipUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageShowAipToken != "" {
			token = &storageShowAipToken
		}
	}
	v := &storage.ShowAipPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildListAipWorkflowsPayload builds the payload for the storage
// list_aip_workflows endpoint from CLI flags.
func BuildListAipWorkflowsPayload(storageListAipWorkflowsUUID string, storageListAipWorkflowsStatus string, storageListAipWorkflowsType string, storageListAipWorkflowsToken string) (*storage.ListAipWorkflowsPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageListAipWorkflowsUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var status *string
	{
		if storageListAipWorkflowsStatus != "" {
			status = &storageListAipWorkflowsStatus
			if !(*status == "unspecified" || *status == "in progress" || *status == "done" || *status == "error" || *status == "queued" || *status == "pending" || *status == "canceled") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("status", *status, []any{"unspecified", "in progress", "done", "error", "queued", "pending", "canceled"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var type_ *string
	{
		if storageListAipWorkflowsType != "" {
			type_ = &storageListAipWorkflowsType
			if !(*type_ == "unspecified" || *type_ == "upload aip" || *type_ == "move aip" || *type_ == "delete aip") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("type", *type_, []any{"unspecified", "upload aip", "move aip", "delete aip"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var token *string
	{
		if storageListAipWorkflowsToken != "" {
			token = &storageListAipWorkflowsToken
		}
	}
	v := &storage.ListAipWorkflowsPayload{}
	v.UUID = uuid
	v.Status = status
	v.Type = type_
	v.Token = token

	return v, nil
}

// BuildRequestAipDeletionPayload builds the payload for the storage
// request_aip_deletion endpoint from CLI flags.
func BuildRequestAipDeletionPayload(storageRequestAipDeletionBody string, storageRequestAipDeletionUUID string, storageRequestAipDeletionToken string) (*storage.RequestAipDeletionPayload, error) {
	var err error
	var body RequestAipDeletionRequestBody
	{
		err = json.Unmarshal([]byte(storageRequestAipDeletionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"reason\": \"abc123\"\n   }'")
		}
	}
	var uuid string
	{
		uuid = storageRequestAipDeletionUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageRequestAipDeletionToken != "" {
			token = &storageRequestAipDeletionToken
		}
	}
	v := &storage.RequestAipDeletionPayload{
		Reason: body.Reason,
	}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildReviewAipDeletionPayload builds the payload for the storage
// review_aip_deletion endpoint from CLI flags.
func BuildReviewAipDeletionPayload(storageReviewAipDeletionBody string, storageReviewAipDeletionUUID string, storageReviewAipDeletionToken string) (*storage.ReviewAipDeletionPayload, error) {
	var err error
	var body ReviewAipDeletionRequestBody
	{
		err = json.Unmarshal([]byte(storageReviewAipDeletionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"approved\": false\n   }'")
		}
	}
	var uuid string
	{
		uuid = storageReviewAipDeletionUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageReviewAipDeletionToken != "" {
			token = &storageReviewAipDeletionToken
		}
	}
	v := &storage.ReviewAipDeletionPayload{
		Approved: body.Approved,
	}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildCancelAipDeletionPayload builds the payload for the storage
// cancel_aip_deletion endpoint from CLI flags.
func BuildCancelAipDeletionPayload(storageCancelAipDeletionBody string, storageCancelAipDeletionUUID string, storageCancelAipDeletionToken string) (*storage.CancelAipDeletionPayload, error) {
	var err error
	var body CancelAipDeletionRequestBody
	{
		err = json.Unmarshal([]byte(storageCancelAipDeletionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"check\": false\n   }'")
		}
	}
	var uuid string
	{
		uuid = storageCancelAipDeletionUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageCancelAipDeletionToken != "" {
			token = &storageCancelAipDeletionToken
		}
	}
	v := &storage.CancelAipDeletionPayload{
		Check: body.Check,
	}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildListLocationsPayload builds the payload for the storage list_locations
// endpoint from CLI flags.
func BuildListLocationsPayload(storageListLocationsToken string) (*storage.ListLocationsPayload, error) {
	var token *string
	{
		if storageListLocationsToken != "" {
			token = &storageListLocationsToken
		}
	}
	v := &storage.ListLocationsPayload{}
	v.Token = token

	return v, nil
}

// BuildCreateLocationPayload builds the payload for the storage
// create_location endpoint from CLI flags.
func BuildCreateLocationPayload(storageCreateLocationBody string, storageCreateLocationToken string) (*storage.CreateLocationPayload, error) {
	var err error
	var body CreateLocationRequestBody
	{
		err = json.Unmarshal([]byte(storageCreateLocationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"config\": {\n         \"Type\": \"s3\",\n         \"Value\": \"{\\\"bucket\\\":\\\"abc123\\\",\\\"endpoint\\\":\\\"abc123\\\",\\\"key\\\":\\\"abc123\\\",\\\"path_style\\\":false,\\\"profile\\\":\\\"abc123\\\",\\\"region\\\":\\\"abc123\\\",\\\"secret\\\":\\\"abc123\\\",\\\"token\\\":\\\"abc123\\\"}\"\n      },\n      \"description\": \"abc123\",\n      \"name\": \"abc123\",\n      \"purpose\": \"aip_store\",\n      \"source\": \"minio\"\n   }'")
		}
		if !(body.Source == "unspecified" || body.Source == "minio" || body.Source == "sftp" || body.Source == "amss") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.source", body.Source, []any{"unspecified", "minio", "sftp", "amss"}))
		}
		if !(body.Purpose == "unspecified" || body.Purpose == "aip_store") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.purpose", body.Purpose, []any{"unspecified", "aip_store"}))
		}
		if body.Config != nil {
			if !(body.Config.Type == "amss" || body.Config.Type == "s3" || body.Config.Type == "sftp" || body.Config.Type == "url") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.config.Type", body.Config.Type, []any{"amss", "s3", "sftp", "url"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageCreateLocationToken != "" {
			token = &storageCreateLocationToken
		}
	}
	v := &storage.CreateLocationPayload{
		Name:        body.Name,
		Description: body.Description,
		Source:      body.Source,
		Purpose:     body.Purpose,
	}
	if body.Config != nil {
		switch body.Config.Type {
		case "amss":
			var val *storage.AMSSConfig
			json.Unmarshal([]byte(body.Config.Value), &val)
			v.Config = val
		case "s3":
			var val *storage.S3Config
			json.Unmarshal([]byte(body.Config.Value), &val)
			v.Config = val
		case "sftp":
			var val *storage.SFTPConfig
			json.Unmarshal([]byte(body.Config.Value), &val)
			v.Config = val
		case "url":
			var val *storage.URLConfig
			json.Unmarshal([]byte(body.Config.Value), &val)
			v.Config = val
		}
	}
	v.Token = token

	return v, nil
}

// BuildShowLocationPayload builds the payload for the storage show_location
// endpoint from CLI flags.
func BuildShowLocationPayload(storageShowLocationUUID string, storageShowLocationToken string) (*storage.ShowLocationPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageShowLocationUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageShowLocationToken != "" {
			token = &storageShowLocationToken
		}
	}
	v := &storage.ShowLocationPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildListLocationAipsPayload builds the payload for the storage
// list_location_aips endpoint from CLI flags.
func BuildListLocationAipsPayload(storageListLocationAipsUUID string, storageListLocationAipsToken string) (*storage.ListLocationAipsPayload, error) {
	var err error
	var uuid string
	{
		uuid = storageListLocationAipsUUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uuid", uuid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if storageListLocationAipsToken != "" {
			token = &storageListLocationAipsToken
		}
	}
	v := &storage.ListLocationAipsPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}
