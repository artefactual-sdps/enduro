// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package client

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	storageviews "github.com/artefactual-sdps/enduro/internal/api/gen/storage/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildSubmitRequest instantiates a HTTP request object with method and path
// set to call the "storage" service "submit" endpoint
func (c *Client) BuildSubmitRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		aipID string
	)
	{
		p, ok := v.(*storage.SubmitPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "submit", "*storage.SubmitPayload", v)
		}
		aipID = p.AipID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubmitStoragePath(aipID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "submit", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubmitRequest returns an encoder for requests sent to the storage
// submit server.
func EncodeSubmitRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.SubmitPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "submit", "*storage.SubmitPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewSubmitRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("storage", "submit", err)
		}
		return nil
	}
}

// DecodeSubmitResponse returns a decoder for responses returned by the storage
// submit endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeSubmitResponse may return the following errors:
//   - "not_available" (type *goa.ServiceError): http.StatusConflict
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeSubmitResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body SubmitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "submit", err)
			}
			err = ValidateSubmitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "submit", err)
			}
			res := NewSubmitResultAccepted(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body SubmitNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "submit", err)
			}
			err = ValidateSubmitNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "submit", err)
			}
			return nil, NewSubmitNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body SubmitNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "submit", err)
			}
			err = ValidateSubmitNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "submit", err)
			}
			return nil, NewSubmitNotValid(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "submit", err)
			}
			return nil, NewSubmitUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "submit", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "storage" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		aipID string
	)
	{
		p, ok := v.(*storage.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "update", "*storage.UpdatePayload", v)
		}
		aipID = p.AipID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateStoragePath(aipID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the storage
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "update", "*storage.UpdatePayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the storage
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "not_available" (type *goa.ServiceError): http.StatusConflict
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusConflict:
			var (
				body UpdateNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "update", err)
			}
			err = ValidateUpdateNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "update", err)
			}
			return nil, NewUpdateNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body UpdateNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "update", err)
			}
			err = ValidateUpdateNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "update", err)
			}
			return nil, NewUpdateNotValid(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "update", err)
			}
			return nil, NewUpdateUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDownloadRequest instantiates a HTTP request object with method and path
// set to call the "storage" service "download" endpoint
func (c *Client) BuildDownloadRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		aipID string
	)
	{
		p, ok := v.(*storage.DownloadPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "download", "*storage.DownloadPayload", v)
		}
		aipID = p.AipID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DownloadStoragePath(aipID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "download", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDownloadRequest returns an encoder for requests sent to the storage
// download server.
func EncodeDownloadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.DownloadPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "download", "*storage.DownloadPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDownloadResponse returns a decoder for responses returned by the
// storage download endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDownloadResponse may return the following errors:
//   - "not_found" (type *storage.PackageNotFound): http.StatusNotFound
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDownloadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "download", err)
			}
			return body, nil
		case http.StatusNotFound:
			var (
				body DownloadNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "download", err)
			}
			err = ValidateDownloadNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "download", err)
			}
			return nil, NewDownloadNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "download", err)
			}
			return nil, NewDownloadUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "download", resp.StatusCode, string(body))
		}
	}
}

// BuildLocationsRequest instantiates a HTTP request object with method and
// path set to call the "storage" service "locations" endpoint
func (c *Client) BuildLocationsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LocationsStoragePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "locations", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLocationsRequest returns an encoder for requests sent to the storage
// locations server.
func EncodeLocationsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.LocationsPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "locations", "*storage.LocationsPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeLocationsResponse returns a decoder for responses returned by the
// storage locations endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeLocationsResponse may return the following errors:
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeLocationsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LocationsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "locations", err)
			}
			p := NewLocationsLocationCollectionOK(body)
			view := "default"
			vres := storageviews.LocationCollection{Projected: p, View: view}
			if err = storageviews.ValidateLocationCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("storage", "locations", err)
			}
			res := storage.NewLocationCollection(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "locations", err)
			}
			return nil, NewLocationsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "locations", resp.StatusCode, string(body))
		}
	}
}

// BuildAddLocationRequest instantiates a HTTP request object with method and
// path set to call the "storage" service "add_location" endpoint
func (c *Client) BuildAddLocationRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddLocationStoragePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "add_location", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddLocationRequest returns an encoder for requests sent to the storage
// add_location server.
func EncodeAddLocationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.AddLocationPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "add_location", "*storage.AddLocationPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddLocationRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("storage", "add_location", err)
		}
		return nil
	}
}

// DecodeAddLocationResponse returns a decoder for responses returned by the
// storage add_location endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAddLocationResponse may return the following errors:
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeAddLocationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body AddLocationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "add_location", err)
			}
			err = ValidateAddLocationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "add_location", err)
			}
			res := NewAddLocationResultCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body AddLocationNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "add_location", err)
			}
			err = ValidateAddLocationNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "add_location", err)
			}
			return nil, NewAddLocationNotValid(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "add_location", err)
			}
			return nil, NewAddLocationUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "add_location", resp.StatusCode, string(body))
		}
	}
}

// BuildMoveRequest instantiates a HTTP request object with method and path set
// to call the "storage" service "move" endpoint
func (c *Client) BuildMoveRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		aipID string
	)
	{
		p, ok := v.(*storage.MovePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "move", "*storage.MovePayload", v)
		}
		aipID = p.AipID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MoveStoragePath(aipID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "move", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMoveRequest returns an encoder for requests sent to the storage move
// server.
func EncodeMoveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.MovePayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "move", "*storage.MovePayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewMoveRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("storage", "move", err)
		}
		return nil
	}
}

// DecodeMoveResponse returns a decoder for responses returned by the storage
// move endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeMoveResponse may return the following errors:
//   - "not_available" (type *goa.ServiceError): http.StatusConflict
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *storage.PackageNotFound): http.StatusNotFound
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeMoveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusConflict:
			var (
				body MoveNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move", err)
			}
			err = ValidateMoveNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "move", err)
			}
			return nil, NewMoveNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body MoveNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move", err)
			}
			err = ValidateMoveNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "move", err)
			}
			return nil, NewMoveNotValid(&body)
		case http.StatusNotFound:
			var (
				body MoveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move", err)
			}
			err = ValidateMoveNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "move", err)
			}
			return nil, NewMoveNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move", err)
			}
			return nil, NewMoveUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "move", resp.StatusCode, string(body))
		}
	}
}

// BuildMoveStatusRequest instantiates a HTTP request object with method and
// path set to call the "storage" service "move_status" endpoint
func (c *Client) BuildMoveStatusRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		aipID string
	)
	{
		p, ok := v.(*storage.MoveStatusPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "move_status", "*storage.MoveStatusPayload", v)
		}
		aipID = p.AipID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MoveStatusStoragePath(aipID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "move_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMoveStatusRequest returns an encoder for requests sent to the storage
// move_status server.
func EncodeMoveStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.MoveStatusPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "move_status", "*storage.MoveStatusPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeMoveStatusResponse returns a decoder for responses returned by the
// storage move_status endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeMoveStatusResponse may return the following errors:
//   - "failed_dependency" (type *goa.ServiceError): http.StatusFailedDependency
//   - "not_found" (type *storage.PackageNotFound): http.StatusNotFound
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeMoveStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MoveStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move_status", err)
			}
			err = ValidateMoveStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "move_status", err)
			}
			res := NewMoveStatusResultOK(&body)
			return res, nil
		case http.StatusFailedDependency:
			var (
				body MoveStatusFailedDependencyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move_status", err)
			}
			err = ValidateMoveStatusFailedDependencyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "move_status", err)
			}
			return nil, NewMoveStatusFailedDependency(&body)
		case http.StatusNotFound:
			var (
				body MoveStatusNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move_status", err)
			}
			err = ValidateMoveStatusNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "move_status", err)
			}
			return nil, NewMoveStatusNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "move_status", err)
			}
			return nil, NewMoveStatusUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "move_status", resp.StatusCode, string(body))
		}
	}
}

// BuildRejectRequest instantiates a HTTP request object with method and path
// set to call the "storage" service "reject" endpoint
func (c *Client) BuildRejectRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		aipID string
	)
	{
		p, ok := v.(*storage.RejectPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "reject", "*storage.RejectPayload", v)
		}
		aipID = p.AipID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RejectStoragePath(aipID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "reject", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRejectRequest returns an encoder for requests sent to the storage
// reject server.
func EncodeRejectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.RejectPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "reject", "*storage.RejectPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeRejectResponse returns a decoder for responses returned by the storage
// reject endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRejectResponse may return the following errors:
//   - "not_available" (type *goa.ServiceError): http.StatusConflict
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *storage.PackageNotFound): http.StatusNotFound
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeRejectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusConflict:
			var (
				body RejectNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "reject", err)
			}
			err = ValidateRejectNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "reject", err)
			}
			return nil, NewRejectNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body RejectNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "reject", err)
			}
			err = ValidateRejectNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "reject", err)
			}
			return nil, NewRejectNotValid(&body)
		case http.StatusNotFound:
			var (
				body RejectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "reject", err)
			}
			err = ValidateRejectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "reject", err)
			}
			return nil, NewRejectNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "reject", err)
			}
			return nil, NewRejectUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "reject", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "storage" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		aipID string
	)
	{
		p, ok := v.(*storage.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "show", "*storage.ShowPayload", v)
		}
		aipID = p.AipID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowStoragePath(aipID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the storage show
// server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "show", "*storage.ShowPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the storage
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//   - "not_found" (type *storage.PackageNotFound): http.StatusNotFound
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "show", err)
			}
			p := NewShowPackageOK(&body)
			view := "default"
			vres := &storageviews.Package{Projected: p, View: view}
			if err = storageviews.ValidatePackage(vres); err != nil {
				return nil, goahttp.ErrValidationError("storage", "show", err)
			}
			res := storage.NewPackage(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "show", err)
			}
			return nil, NewShowUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildShowLocationRequest instantiates a HTTP request object with method and
// path set to call the "storage" service "show_location" endpoint
func (c *Client) BuildShowLocationRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uuid string
	)
	{
		p, ok := v.(*storage.ShowLocationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "show_location", "*storage.ShowLocationPayload", v)
		}
		uuid = p.UUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowLocationStoragePath(uuid)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "show_location", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowLocationRequest returns an encoder for requests sent to the
// storage show_location server.
func EncodeShowLocationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.ShowLocationPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "show_location", "*storage.ShowLocationPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeShowLocationResponse returns a decoder for responses returned by the
// storage show_location endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeShowLocationResponse may return the following errors:
//   - "not_found" (type *storage.LocationNotFound): http.StatusNotFound
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeShowLocationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowLocationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "show_location", err)
			}
			p := NewShowLocationLocationOK(&body)
			view := "default"
			vres := &storageviews.Location{Projected: p, View: view}
			if err = storageviews.ValidateLocation(vres); err != nil {
				return nil, goahttp.ErrValidationError("storage", "show_location", err)
			}
			res := storage.NewLocation(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowLocationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "show_location", err)
			}
			err = ValidateShowLocationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "show_location", err)
			}
			return nil, NewShowLocationNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "show_location", err)
			}
			return nil, NewShowLocationUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "show_location", resp.StatusCode, string(body))
		}
	}
}

// BuildLocationPackagesRequest instantiates a HTTP request object with method
// and path set to call the "storage" service "location_packages" endpoint
func (c *Client) BuildLocationPackagesRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uuid string
	)
	{
		p, ok := v.(*storage.LocationPackagesPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("storage", "location_packages", "*storage.LocationPackagesPayload", v)
		}
		uuid = p.UUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LocationPackagesStoragePath(uuid)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("storage", "location_packages", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLocationPackagesRequest returns an encoder for requests sent to the
// storage location_packages server.
func EncodeLocationPackagesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storage.LocationPackagesPayload)
		if !ok {
			return goahttp.ErrInvalidType("storage", "location_packages", "*storage.LocationPackagesPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeLocationPackagesResponse returns a decoder for responses returned by
// the storage location_packages endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeLocationPackagesResponse may return the following errors:
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *storage.LocationNotFound): http.StatusNotFound
//   - "unauthorized" (type storage.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeLocationPackagesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LocationPackagesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "location_packages", err)
			}
			p := NewLocationPackagesPackageCollectionOK(body)
			view := "default"
			vres := storageviews.PackageCollection{Projected: p, View: view}
			if err = storageviews.ValidatePackageCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("storage", "location_packages", err)
			}
			res := storage.NewPackageCollection(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body LocationPackagesNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "location_packages", err)
			}
			err = ValidateLocationPackagesNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "location_packages", err)
			}
			return nil, NewLocationPackagesNotValid(&body)
		case http.StatusNotFound:
			var (
				body LocationPackagesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "location_packages", err)
			}
			err = ValidateLocationPackagesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("storage", "location_packages", err)
			}
			return nil, NewLocationPackagesNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("storage", "location_packages", err)
			}
			return nil, NewLocationPackagesUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("storage", "location_packages", resp.StatusCode, string(body))
		}
	}
}

// unmarshalLocationResponseToStorageviewsLocationView builds a value of type
// *storageviews.LocationView from a value of type *LocationResponse.
func unmarshalLocationResponseToStorageviewsLocationView(v *LocationResponse) *storageviews.LocationView {
	res := &storageviews.LocationView{
		Name:        v.Name,
		Description: v.Description,
		Source:      v.Source,
		Purpose:     v.Purpose,
		UUID:        v.UUID,
		CreatedAt:   v.CreatedAt,
	}
	if v.Config != nil {
		switch *v.Config.Type {
		case "s3":
			var val *storageviews.S3ConfigView
			json.Unmarshal([]byte(*v.Config.Value), &val)
			res.Config = val
		case "sftp":
			var val *storageviews.SFTPConfigView
			json.Unmarshal([]byte(*v.Config.Value), &val)
			res.Config = val
		case "url":
			var val *storageviews.URLConfigView
			json.Unmarshal([]byte(*v.Config.Value), &val)
			res.Config = val
		}
	}

	return res
}

// unmarshalPackageResponseToStorageviewsPackageView builds a value of type
// *storageviews.PackageView from a value of type *PackageResponse.
func unmarshalPackageResponseToStorageviewsPackageView(v *PackageResponse) *storageviews.PackageView {
	res := &storageviews.PackageView{
		Name:       v.Name,
		AipID:      v.AipID,
		Status:     v.Status,
		ObjectKey:  v.ObjectKey,
		LocationID: v.LocationID,
		CreatedAt:  v.CreatedAt,
	}

	return res
}
