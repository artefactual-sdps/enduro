// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage HTTP server
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package server

import (
	"context"
	"net/http"
	"os"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the storage service endpoint HTTP handlers.
type Server struct {
	Mounts           []*MountPoint
	CreateAip        http.Handler
	SubmitAip        http.Handler
	UpdateAip        http.Handler
	DownloadAip      http.Handler
	MoveAip          http.Handler
	MoveAipStatus    http.Handler
	RejectAip        http.Handler
	ShowAip          http.Handler
	ListLocations    http.Handler
	CreateLocation   http.Handler
	ShowLocation     http.Handler
	ListLocationAips http.Handler
	CORS             http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the storage service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *storage.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateAip", "POST", "/storage/aips"},
			{"SubmitAip", "POST", "/storage/aips/{uuid}/submit"},
			{"UpdateAip", "POST", "/storage/aips/{uuid}/update"},
			{"DownloadAip", "GET", "/storage/aips/{uuid}/download"},
			{"MoveAip", "POST", "/storage/aips/{uuid}/store"},
			{"MoveAipStatus", "GET", "/storage/aips/{uuid}/store"},
			{"RejectAip", "POST", "/storage/aips/{uuid}/reject"},
			{"ShowAip", "GET", "/storage/aips/{uuid}"},
			{"ListLocations", "GET", "/storage/locations"},
			{"CreateLocation", "POST", "/storage/locations"},
			{"ShowLocation", "GET", "/storage/locations/{uuid}"},
			{"ListLocationAips", "GET", "/storage/locations/{uuid}/aips"},
			{"CORS", "OPTIONS", "/storage/aips"},
			{"CORS", "OPTIONS", "/storage/aips/{uuid}/submit"},
			{"CORS", "OPTIONS", "/storage/aips/{uuid}/update"},
			{"CORS", "OPTIONS", "/storage/aips/{uuid}/download"},
			{"CORS", "OPTIONS", "/storage/aips/{uuid}/store"},
			{"CORS", "OPTIONS", "/storage/aips/{uuid}/reject"},
			{"CORS", "OPTIONS", "/storage/aips/{uuid}"},
			{"CORS", "OPTIONS", "/storage/locations"},
			{"CORS", "OPTIONS", "/storage/locations/{uuid}"},
			{"CORS", "OPTIONS", "/storage/locations/{uuid}/aips"},
		},
		CreateAip:        NewCreateAipHandler(e.CreateAip, mux, decoder, encoder, errhandler, formatter),
		SubmitAip:        NewSubmitAipHandler(e.SubmitAip, mux, decoder, encoder, errhandler, formatter),
		UpdateAip:        NewUpdateAipHandler(e.UpdateAip, mux, decoder, encoder, errhandler, formatter),
		DownloadAip:      NewDownloadAipHandler(e.DownloadAip, mux, decoder, encoder, errhandler, formatter),
		MoveAip:          NewMoveAipHandler(e.MoveAip, mux, decoder, encoder, errhandler, formatter),
		MoveAipStatus:    NewMoveAipStatusHandler(e.MoveAipStatus, mux, decoder, encoder, errhandler, formatter),
		RejectAip:        NewRejectAipHandler(e.RejectAip, mux, decoder, encoder, errhandler, formatter),
		ShowAip:          NewShowAipHandler(e.ShowAip, mux, decoder, encoder, errhandler, formatter),
		ListLocations:    NewListLocationsHandler(e.ListLocations, mux, decoder, encoder, errhandler, formatter),
		CreateLocation:   NewCreateLocationHandler(e.CreateLocation, mux, decoder, encoder, errhandler, formatter),
		ShowLocation:     NewShowLocationHandler(e.ShowLocation, mux, decoder, encoder, errhandler, formatter),
		ListLocationAips: NewListLocationAipsHandler(e.ListLocationAips, mux, decoder, encoder, errhandler, formatter),
		CORS:             NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "storage" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateAip = m(s.CreateAip)
	s.SubmitAip = m(s.SubmitAip)
	s.UpdateAip = m(s.UpdateAip)
	s.DownloadAip = m(s.DownloadAip)
	s.MoveAip = m(s.MoveAip)
	s.MoveAipStatus = m(s.MoveAipStatus)
	s.RejectAip = m(s.RejectAip)
	s.ShowAip = m(s.ShowAip)
	s.ListLocations = m(s.ListLocations)
	s.CreateLocation = m(s.CreateLocation)
	s.ShowLocation = m(s.ShowLocation)
	s.ListLocationAips = m(s.ListLocationAips)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return storage.MethodNames[:] }

// Mount configures the mux to serve the storage endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateAipHandler(mux, h.CreateAip)
	MountSubmitAipHandler(mux, h.SubmitAip)
	MountUpdateAipHandler(mux, h.UpdateAip)
	MountDownloadAipHandler(mux, h.DownloadAip)
	MountMoveAipHandler(mux, h.MoveAip)
	MountMoveAipStatusHandler(mux, h.MoveAipStatus)
	MountRejectAipHandler(mux, h.RejectAip)
	MountShowAipHandler(mux, h.ShowAip)
	MountListLocationsHandler(mux, h.ListLocations)
	MountCreateLocationHandler(mux, h.CreateLocation)
	MountShowLocationHandler(mux, h.ShowLocation)
	MountListLocationAipsHandler(mux, h.ListLocationAips)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the storage endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateAipHandler configures the mux to serve the "storage" service
// "create_aip" endpoint.
func MountCreateAipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/aips", otelhttp.WithRouteTag("/storage/aips", f).ServeHTTP)
}

// NewCreateAipHandler creates a HTTP handler which loads the HTTP request and
// calls the "storage" service "create_aip" endpoint.
func NewCreateAipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateAipRequest(mux, decoder)
		encodeResponse = EncodeCreateAipResponse(encoder)
		encodeError    = EncodeCreateAipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_aip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSubmitAipHandler configures the mux to serve the "storage" service
// "submit_aip" endpoint.
func MountSubmitAipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/aips/{uuid}/submit", otelhttp.WithRouteTag("/storage/aips/{uuid}/submit", f).ServeHTTP)
}

// NewSubmitAipHandler creates a HTTP handler which loads the HTTP request and
// calls the "storage" service "submit_aip" endpoint.
func NewSubmitAipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSubmitAipRequest(mux, decoder)
		encodeResponse = EncodeSubmitAipResponse(encoder)
		encodeError    = EncodeSubmitAipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "submit_aip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateAipHandler configures the mux to serve the "storage" service
// "update_aip" endpoint.
func MountUpdateAipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/aips/{uuid}/update", otelhttp.WithRouteTag("/storage/aips/{uuid}/update", f).ServeHTTP)
}

// NewUpdateAipHandler creates a HTTP handler which loads the HTTP request and
// calls the "storage" service "update_aip" endpoint.
func NewUpdateAipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateAipRequest(mux, decoder)
		encodeResponse = EncodeUpdateAipResponse(encoder)
		encodeError    = EncodeUpdateAipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_aip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDownloadAipHandler configures the mux to serve the "storage" service
// "download_aip" endpoint.
func MountDownloadAipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/aips/{uuid}/download", otelhttp.WithRouteTag("/storage/aips/{uuid}/download", f).ServeHTTP)
}

// NewDownloadAipHandler creates a HTTP handler which loads the HTTP request
// and calls the "storage" service "download_aip" endpoint.
func NewDownloadAipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDownloadAipRequest(mux, decoder)
		encodeResponse = EncodeDownloadAipResponse(encoder)
		encodeError    = EncodeDownloadAipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "download_aip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMoveAipHandler configures the mux to serve the "storage" service
// "move_aip" endpoint.
func MountMoveAipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/aips/{uuid}/store", otelhttp.WithRouteTag("/storage/aips/{uuid}/store", f).ServeHTTP)
}

// NewMoveAipHandler creates a HTTP handler which loads the HTTP request and
// calls the "storage" service "move_aip" endpoint.
func NewMoveAipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMoveAipRequest(mux, decoder)
		encodeResponse = EncodeMoveAipResponse(encoder)
		encodeError    = EncodeMoveAipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "move_aip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMoveAipStatusHandler configures the mux to serve the "storage" service
// "move_aip_status" endpoint.
func MountMoveAipStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/aips/{uuid}/store", otelhttp.WithRouteTag("/storage/aips/{uuid}/store", f).ServeHTTP)
}

// NewMoveAipStatusHandler creates a HTTP handler which loads the HTTP request
// and calls the "storage" service "move_aip_status" endpoint.
func NewMoveAipStatusHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMoveAipStatusRequest(mux, decoder)
		encodeResponse = EncodeMoveAipStatusResponse(encoder)
		encodeError    = EncodeMoveAipStatusError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "move_aip_status")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRejectAipHandler configures the mux to serve the "storage" service
// "reject_aip" endpoint.
func MountRejectAipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/aips/{uuid}/reject", otelhttp.WithRouteTag("/storage/aips/{uuid}/reject", f).ServeHTTP)
}

// NewRejectAipHandler creates a HTTP handler which loads the HTTP request and
// calls the "storage" service "reject_aip" endpoint.
func NewRejectAipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRejectAipRequest(mux, decoder)
		encodeResponse = EncodeRejectAipResponse(encoder)
		encodeError    = EncodeRejectAipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "reject_aip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountShowAipHandler configures the mux to serve the "storage" service
// "show_aip" endpoint.
func MountShowAipHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/aips/{uuid}", otelhttp.WithRouteTag("/storage/aips/{uuid}", f).ServeHTTP)
}

// NewShowAipHandler creates a HTTP handler which loads the HTTP request and
// calls the "storage" service "show_aip" endpoint.
func NewShowAipHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeShowAipRequest(mux, decoder)
		encodeResponse = EncodeShowAipResponse(encoder)
		encodeError    = EncodeShowAipError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "show_aip")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListLocationsHandler configures the mux to serve the "storage" service
// "list_locations" endpoint.
func MountListLocationsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/locations", otelhttp.WithRouteTag("/storage/locations", f).ServeHTTP)
}

// NewListLocationsHandler creates a HTTP handler which loads the HTTP request
// and calls the "storage" service "list_locations" endpoint.
func NewListLocationsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListLocationsRequest(mux, decoder)
		encodeResponse = EncodeListLocationsResponse(encoder)
		encodeError    = EncodeListLocationsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_locations")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateLocationHandler configures the mux to serve the "storage" service
// "create_location" endpoint.
func MountCreateLocationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/locations", otelhttp.WithRouteTag("/storage/locations", f).ServeHTTP)
}

// NewCreateLocationHandler creates a HTTP handler which loads the HTTP request
// and calls the "storage" service "create_location" endpoint.
func NewCreateLocationHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateLocationRequest(mux, decoder)
		encodeResponse = EncodeCreateLocationResponse(encoder)
		encodeError    = EncodeCreateLocationError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_location")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountShowLocationHandler configures the mux to serve the "storage" service
// "show_location" endpoint.
func MountShowLocationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/locations/{uuid}", otelhttp.WithRouteTag("/storage/locations/{uuid}", f).ServeHTTP)
}

// NewShowLocationHandler creates a HTTP handler which loads the HTTP request
// and calls the "storage" service "show_location" endpoint.
func NewShowLocationHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeShowLocationRequest(mux, decoder)
		encodeResponse = EncodeShowLocationResponse(encoder)
		encodeError    = EncodeShowLocationError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "show_location")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListLocationAipsHandler configures the mux to serve the "storage"
// service "list_location_aips" endpoint.
func MountListLocationAipsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleStorageOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/locations/{uuid}/aips", otelhttp.WithRouteTag("/storage/locations/{uuid}/aips", f).ServeHTTP)
}

// NewListLocationAipsHandler creates a HTTP handler which loads the HTTP
// request and calls the "storage" service "list_location_aips" endpoint.
func NewListLocationAipsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListLocationAipsRequest(mux, decoder)
		encodeResponse = EncodeListLocationAipsResponse(encoder)
		encodeError    = EncodeListLocationAipsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_location_aips")
		ctx = context.WithValue(ctx, goa.ServiceKey, "storage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service storage.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleStorageOrigin(h)
	mux.Handle("OPTIONS", "/storage/aips", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/aips/{uuid}/submit", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/aips/{uuid}/update", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/aips/{uuid}/download", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/aips/{uuid}/store", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/aips/{uuid}/reject", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/aips/{uuid}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/locations", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/locations/{uuid}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/storage/locations/{uuid}/aips", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleStorageOrigin applies the CORS response headers corresponding to the
// origin for the service storage.
func HandleStorageOrigin(h http.Handler) http.Handler {
	originStr0, present := os.LookupEnv("ENDURO_API_CORS_ORIGIN")
	if !present {
		panic("CORS origin environment variable \"ENDURO_API_CORS_ORIGIN\" not set!")
	}
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, originStr0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
