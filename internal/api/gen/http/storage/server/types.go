// Code generated by goa v3.15.2, DO NOT EDIT.
//
// storage HTTP server types
//
// Command:
// $ goa gen github.com/artefactual-sdps/enduro/internal/api/design -o
// internal/api

package server

import (
	"encoding/json"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	storageviews "github.com/artefactual-sdps/enduro/internal/api/gen/storage/views"
	"github.com/google/uuid"
	goa "goa.design/goa/v3/pkg"
)

// CreateAipRequestBody is the type of the "storage" service "create_aip"
// endpoint HTTP request body.
type CreateAipRequestBody struct {
	// Identifier of the AIP
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Name of the AIP
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ObjectKey of the AIP
	ObjectKey *string `form:"object_key,omitempty" json:"object_key,omitempty" xml:"object_key,omitempty"`
	// Status of the the AIP
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Identifier of the AIP's storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
}

// SubmitAipRequestBody is the type of the "storage" service "submit_aip"
// endpoint HTTP request body.
type SubmitAipRequestBody struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// MoveAipRequestBody is the type of the "storage" service "move_aip" endpoint
// HTTP request body.
type MoveAipRequestBody struct {
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
}

// RequestAipDeletionRequestBody is the type of the "storage" service
// "request_aip_deletion" endpoint HTTP request body.
type RequestAipDeletionRequestBody struct {
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
}

// ReviewAipDeletionRequestBody is the type of the "storage" service
// "review_aip_deletion" endpoint HTTP request body.
type ReviewAipDeletionRequestBody struct {
	Approved *bool `form:"approved,omitempty" json:"approved,omitempty" xml:"approved,omitempty"`
}

// CancelAipDeletionRequestBody is the type of the "storage" service
// "cancel_aip_deletion" endpoint HTTP request body.
type CancelAipDeletionRequestBody struct {
	// If check is true, check user authorization to cancel deletion but don't
	// execute the cancellation.
	Check *bool `form:"check,omitempty" json:"check,omitempty" xml:"check,omitempty"`
}

// CreateLocationRequestBody is the type of the "storage" service
// "create_location" endpoint HTTP request body.
type CreateLocationRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Source      *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	Purpose     *string `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	Config      *struct {
		// Union type name, one of:
		// - "amss"
		// - "s3"
		// - "sftp"
		// - "url"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"config,omitempty" json:"config,omitempty" xml:"config,omitempty"`
}

// MonitorResponseBody is the type of the "storage" service "monitor" endpoint
// HTTP response body.
type MonitorResponseBody struct {
	StorageValue *struct {
		// Union type name, one of:
		// - "storage_ping_event"
		// - "location_created_event"
		// - "aip_created_event"
		// - "aip_status_updated_event"
		// - "aip_location_updated_event"
		// - "aip_workflow_created_event"
		// - "aip_workflow_updated_event"
		// - "aip_task_created_event"
		// - "aip_task_updated_event"
		Type string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value string `form:"Value" json:"Value" xml:"Value"`
	} `form:"storage_value,omitempty" json:"storage_value,omitempty" xml:"storage_value,omitempty"`
}

// ListAipsResponseBody is the type of the "storage" service "list_aips"
// endpoint HTTP response body.
type ListAipsResponseBody struct {
	Items AIPResponseBodyCollection `form:"items" json:"items" xml:"items"`
	Page  *EnduroPageResponseBody   `form:"page" json:"page" xml:"page"`
}

// CreateAipResponseBody is the type of the "storage" service "create_aip"
// endpoint HTTP response body.
type CreateAipResponseBody struct {
	Name string    `form:"name" json:"name" xml:"name"`
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Status of the AIP
	Status    string    `form:"status" json:"status" xml:"status"`
	ObjectKey uuid.UUID `form:"object_key" json:"object_key" xml:"object_key"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// SubmitAipResponseBody is the type of the "storage" service "submit_aip"
// endpoint HTTP response body.
type SubmitAipResponseBody struct {
	URL string `form:"url" json:"url" xml:"url"`
}

// MoveAipStatusResponseBody is the type of the "storage" service
// "move_aip_status" endpoint HTTP response body.
type MoveAipStatusResponseBody struct {
	Done bool `form:"done" json:"done" xml:"done"`
}

// ShowAipResponseBody is the type of the "storage" service "show_aip" endpoint
// HTTP response body.
type ShowAipResponseBody struct {
	Name string    `form:"name" json:"name" xml:"name"`
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Status of the AIP
	Status    string    `form:"status" json:"status" xml:"status"`
	ObjectKey uuid.UUID `form:"object_key" json:"object_key" xml:"object_key"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// ListAipWorkflowsResponseBody is the type of the "storage" service
// "list_aip_workflows" endpoint HTTP response body.
type ListAipWorkflowsResponseBody struct {
	Workflows AIPWorkflowResponseBodyCollection `form:"workflows,omitempty" json:"workflows,omitempty" xml:"workflows,omitempty"`
}

// LocationResponseCollection is the type of the "storage" service
// "list_locations" endpoint HTTP response body.
type LocationResponseCollection []*LocationResponse

// CreateLocationResponseBody is the type of the "storage" service
// "create_location" endpoint HTTP response body.
type CreateLocationResponseBody struct {
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
}

// ShowLocationResponseBody is the type of the "storage" service
// "show_location" endpoint HTTP response body.
type ShowLocationResponseBody struct {
	// Name of location
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source string `form:"source" json:"source" xml:"source"`
	// Purpose of the location
	Purpose string    `form:"purpose" json:"purpose" xml:"purpose"`
	UUID    uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// AIPResponseCollection is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body.
type AIPResponseCollection []*AIPResponse

// MonitorRequestInternalErrorResponseBody is the type of the "storage" service
// "monitor_request" endpoint HTTP response body for the "internal_error" error.
type MonitorRequestInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MonitorInternalErrorResponseBody is the type of the "storage" service
// "monitor" endpoint HTTP response body for the "internal_error" error.
type MonitorInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAipsNotAvailableResponseBody is the type of the "storage" service
// "list_aips" endpoint HTTP response body for the "not_available" error.
type ListAipsNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAipsNotValidResponseBody is the type of the "storage" service
// "list_aips" endpoint HTTP response body for the "not_valid" error.
type ListAipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAipNotValidResponseBody is the type of the "storage" service
// "create_aip" endpoint HTTP response body for the "not_valid" error.
type CreateAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SubmitAipNotAvailableResponseBody is the type of the "storage" service
// "submit_aip" endpoint HTTP response body for the "not_available" error.
type SubmitAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SubmitAipNotValidResponseBody is the type of the "storage" service
// "submit_aip" endpoint HTTP response body for the "not_valid" error.
type SubmitAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateAipNotAvailableResponseBody is the type of the "storage" service
// "update_aip" endpoint HTTP response body for the "not_available" error.
type UpdateAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateAipNotValidResponseBody is the type of the "storage" service
// "update_aip" endpoint HTTP response body for the "not_valid" error.
type UpdateAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadAipRequestNotValidResponseBody is the type of the "storage" service
// "download_aip_request" endpoint HTTP response body for the "not_valid" error.
type DownloadAipRequestNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadAipRequestInternalErrorResponseBody is the type of the "storage"
// service "download_aip_request" endpoint HTTP response body for the
// "internal_error" error.
type DownloadAipRequestInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadAipRequestNotFoundResponseBody is the type of the "storage" service
// "download_aip_request" endpoint HTTP response body for the "not_found" error.
type DownloadAipRequestNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// DownloadAipNotValidResponseBody is the type of the "storage" service
// "download_aip" endpoint HTTP response body for the "not_valid" error.
type DownloadAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadAipInternalErrorResponseBody is the type of the "storage" service
// "download_aip" endpoint HTTP response body for the "internal_error" error.
type DownloadAipInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadAipNotFoundResponseBody is the type of the "storage" service
// "download_aip" endpoint HTTP response body for the "not_found" error.
type DownloadAipNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// MoveAipNotAvailableResponseBody is the type of the "storage" service
// "move_aip" endpoint HTTP response body for the "not_available" error.
type MoveAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MoveAipNotValidResponseBody is the type of the "storage" service "move_aip"
// endpoint HTTP response body for the "not_valid" error.
type MoveAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MoveAipNotFoundResponseBody is the type of the "storage" service "move_aip"
// endpoint HTTP response body for the "not_found" error.
type MoveAipNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// MoveAipStatusFailedDependencyResponseBody is the type of the "storage"
// service "move_aip_status" endpoint HTTP response body for the
// "failed_dependency" error.
type MoveAipStatusFailedDependencyResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MoveAipStatusNotFoundResponseBody is the type of the "storage" service
// "move_aip_status" endpoint HTTP response body for the "not_found" error.
type MoveAipStatusNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// RejectAipNotAvailableResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_available" error.
type RejectAipNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RejectAipNotValidResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_valid" error.
type RejectAipNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RejectAipNotFoundResponseBody is the type of the "storage" service
// "reject_aip" endpoint HTTP response body for the "not_found" error.
type RejectAipNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// ShowAipNotFoundResponseBody is the type of the "storage" service "show_aip"
// endpoint HTTP response body for the "not_found" error.
type ShowAipNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// ListAipWorkflowsNotFoundResponseBody is the type of the "storage" service
// "list_aip_workflows" endpoint HTTP response body for the "not_found" error.
type ListAipWorkflowsNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// RequestAipDeletionNotFoundResponseBody is the type of the "storage" service
// "request_aip_deletion" endpoint HTTP response body for the "not_found" error.
type RequestAipDeletionNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// ReviewAipDeletionNotFoundResponseBody is the type of the "storage" service
// "review_aip_deletion" endpoint HTTP response body for the "not_found" error.
type ReviewAipDeletionNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// CancelAipDeletionNotFoundResponseBody is the type of the "storage" service
// "cancel_aip_deletion" endpoint HTTP response body for the "not_found" error.
type CancelAipDeletionNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing AIP
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// CreateLocationNotValidResponseBody is the type of the "storage" service
// "create_location" endpoint HTTP response body for the "not_valid" error.
type CreateLocationNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowLocationNotFoundResponseBody is the type of the "storage" service
// "show_location" endpoint HTTP response body for the "not_found" error.
type ShowLocationNotFoundResponseBody struct {
	// Message of error
	Message string    `form:"message" json:"message" xml:"message"`
	UUID    uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// ListLocationAipsNotValidResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body for the "not_valid" error.
type ListLocationAipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLocationAipsNotFoundResponseBody is the type of the "storage" service
// "list_location_aips" endpoint HTTP response body for the "not_found" error.
type ListLocationAipsNotFoundResponseBody struct {
	// Message of error
	Message string    `form:"message" json:"message" xml:"message"`
	UUID    uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
}

// AIPResponseBodyCollection is used to define fields on response body types.
type AIPResponseBodyCollection []*AIPResponseBody

// AIPResponseBody is used to define fields on response body types.
type AIPResponseBody struct {
	Name string    `form:"name" json:"name" xml:"name"`
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Status of the AIP
	Status    string    `form:"status" json:"status" xml:"status"`
	ObjectKey uuid.UUID `form:"object_key" json:"object_key" xml:"object_key"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// EnduroPageResponseBody is used to define fields on response body types.
type EnduroPageResponseBody struct {
	// Maximum items per page
	Limit int `form:"limit" json:"limit" xml:"limit"`
	// Offset from first result to start of page
	Offset int `form:"offset" json:"offset" xml:"offset"`
	// Total result count before paging
	Total int `form:"total" json:"total" xml:"total"`
}

// AIPWorkflowResponseBodyCollection is used to define fields on response body
// types.
type AIPWorkflowResponseBodyCollection []*AIPWorkflowResponseBody

// AIPWorkflowResponseBody is used to define fields on response body types.
type AIPWorkflowResponseBody struct {
	UUID        uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	TemporalID  string    `form:"temporal_id" json:"temporal_id" xml:"temporal_id"`
	Type        string    `form:"type" json:"type" xml:"type"`
	Status      string    `form:"status" json:"status" xml:"status"`
	StartedAt   *string   `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt *string   `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	// Identifier of related AIP
	AipUUID uuid.UUID                     `form:"aip_uuid" json:"aip_uuid" xml:"aip_uuid"`
	Tasks   AIPTaskResponseBodyCollection `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
}

// AIPTaskResponseBodyCollection is used to define fields on response body
// types.
type AIPTaskResponseBodyCollection []*AIPTaskResponseBody

// AIPTaskResponseBody is used to define fields on response body types.
type AIPTaskResponseBody struct {
	UUID        uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	Name        string    `form:"name" json:"name" xml:"name"`
	Status      string    `form:"status" json:"status" xml:"status"`
	StartedAt   *string   `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	CompletedAt *string   `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	Note        *string   `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// Identifier of related workflow
	WorkflowUUID uuid.UUID `form:"workflow_uuid" json:"workflow_uuid" xml:"workflow_uuid"`
}

// LocationResponse is used to define fields on response body types.
type LocationResponse struct {
	// Name of location
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the location
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Data source of the location
	Source string `form:"source" json:"source" xml:"source"`
	// Purpose of the location
	Purpose string    `form:"purpose" json:"purpose" xml:"purpose"`
	UUID    uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// AIPResponse is used to define fields on response body types.
type AIPResponse struct {
	Name string    `form:"name" json:"name" xml:"name"`
	UUID uuid.UUID `form:"uuid" json:"uuid" xml:"uuid"`
	// Status of the AIP
	Status    string    `form:"status" json:"status" xml:"status"`
	ObjectKey uuid.UUID `form:"object_key" json:"object_key" xml:"object_key"`
	// Identifier of storage location
	LocationUUID *uuid.UUID `form:"location_uuid,omitempty" json:"location_uuid,omitempty" xml:"location_uuid,omitempty"`
	// Creation datetime
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// NewMonitorResponseBody builds the HTTP response body from the result of the
// "monitor" endpoint of the "storage" service.
func NewMonitorResponseBody(res *storage.StorageEvent) *MonitorResponseBody {
	body := &MonitorResponseBody{}
	if res.StorageValue != nil {
		js, _ := json.Marshal(res.StorageValue)
		var name string
		switch res.StorageValue.(type) {
		case *storage.StoragePingEvent:
			name = "storage_ping_event"
		case *storage.LocationCreatedEvent:
			name = "location_created_event"
		case *storage.AIPCreatedEvent:
			name = "aip_created_event"
		case *storage.AIPStatusUpdatedEvent:
			name = "aip_status_updated_event"
		case *storage.AIPLocationUpdatedEvent:
			name = "aip_location_updated_event"
		case *storage.AIPWorkflowCreatedEvent:
			name = "aip_workflow_created_event"
		case *storage.AIPWorkflowUpdatedEvent:
			name = "aip_workflow_updated_event"
		case *storage.AIPTaskCreatedEvent:
			name = "aip_task_created_event"
		case *storage.AIPTaskUpdatedEvent:
			name = "aip_task_updated_event"
		}
		body.StorageValue = &struct {
			// Union type name, one of:
			// - "storage_ping_event"
			// - "location_created_event"
			// - "aip_created_event"
			// - "aip_status_updated_event"
			// - "aip_location_updated_event"
			// - "aip_workflow_created_event"
			// - "aip_workflow_updated_event"
			// - "aip_task_created_event"
			// - "aip_task_updated_event"
			Type string `form:"Type" json:"Type" xml:"Type"`
			// JSON encoded union value
			Value string `form:"Value" json:"Value" xml:"Value"`
		}{
			Type:  name,
			Value: string(js),
		}
	}
	return body
}

// NewListAipsResponseBody builds the HTTP response body from the result of the
// "list_aips" endpoint of the "storage" service.
func NewListAipsResponseBody(res *storageviews.AIPsView) *ListAipsResponseBody {
	body := &ListAipsResponseBody{}
	if res.Items != nil {
		body.Items = make([]*AIPResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalStorageviewsAIPViewToAIPResponseBody(val)
		}
	} else {
		body.Items = []*AIPResponseBody{}
	}
	if res.Page != nil {
		body.Page = marshalStorageviewsEnduroPageViewToEnduroPageResponseBody(res.Page)
	}
	return body
}

// NewCreateAipResponseBody builds the HTTP response body from the result of
// the "create_aip" endpoint of the "storage" service.
func NewCreateAipResponseBody(res *storageviews.AIPView) *CreateAipResponseBody {
	body := &CreateAipResponseBody{
		Name:         *res.Name,
		UUID:         *res.UUID,
		Status:       *res.Status,
		ObjectKey:    *res.ObjectKey,
		LocationUUID: res.LocationUUID,
		CreatedAt:    *res.CreatedAt,
	}
	return body
}

// NewSubmitAipResponseBody builds the HTTP response body from the result of
// the "submit_aip" endpoint of the "storage" service.
func NewSubmitAipResponseBody(res *storage.SubmitAIPResult) *SubmitAipResponseBody {
	body := &SubmitAipResponseBody{
		URL: res.URL,
	}
	return body
}

// NewMoveAipStatusResponseBody builds the HTTP response body from the result
// of the "move_aip_status" endpoint of the "storage" service.
func NewMoveAipStatusResponseBody(res *storage.MoveStatusResult) *MoveAipStatusResponseBody {
	body := &MoveAipStatusResponseBody{
		Done: res.Done,
	}
	return body
}

// NewShowAipResponseBody builds the HTTP response body from the result of the
// "show_aip" endpoint of the "storage" service.
func NewShowAipResponseBody(res *storageviews.AIPView) *ShowAipResponseBody {
	body := &ShowAipResponseBody{
		Name:         *res.Name,
		UUID:         *res.UUID,
		Status:       *res.Status,
		ObjectKey:    *res.ObjectKey,
		LocationUUID: res.LocationUUID,
		CreatedAt:    *res.CreatedAt,
	}
	return body
}

// NewListAipWorkflowsResponseBody builds the HTTP response body from the
// result of the "list_aip_workflows" endpoint of the "storage" service.
func NewListAipWorkflowsResponseBody(res *storageviews.AIPWorkflowsView) *ListAipWorkflowsResponseBody {
	body := &ListAipWorkflowsResponseBody{}
	if res.Workflows != nil {
		body.Workflows = make([]*AIPWorkflowResponseBody, len(res.Workflows))
		for i, val := range res.Workflows {
			body.Workflows[i] = marshalStorageviewsAIPWorkflowViewToAIPWorkflowResponseBody(val)
		}
	}
	return body
}

// NewLocationResponseCollection builds the HTTP response body from the result
// of the "list_locations" endpoint of the "storage" service.
func NewLocationResponseCollection(res storageviews.LocationCollectionView) LocationResponseCollection {
	body := make([]*LocationResponse, len(res))
	for i, val := range res {
		body[i] = marshalStorageviewsLocationViewToLocationResponse(val)
	}
	return body
}

// NewCreateLocationResponseBody builds the HTTP response body from the result
// of the "create_location" endpoint of the "storage" service.
func NewCreateLocationResponseBody(res *storage.CreateLocationResult) *CreateLocationResponseBody {
	body := &CreateLocationResponseBody{
		UUID: res.UUID,
	}
	return body
}

// NewShowLocationResponseBody builds the HTTP response body from the result of
// the "show_location" endpoint of the "storage" service.
func NewShowLocationResponseBody(res *storageviews.LocationView) *ShowLocationResponseBody {
	body := &ShowLocationResponseBody{
		Name:        *res.Name,
		Description: res.Description,
		Source:      *res.Source,
		Purpose:     *res.Purpose,
		UUID:        *res.UUID,
		CreatedAt:   *res.CreatedAt,
	}
	return body
}

// NewAIPResponseCollection builds the HTTP response body from the result of
// the "list_location_aips" endpoint of the "storage" service.
func NewAIPResponseCollection(res storageviews.AIPCollectionView) AIPResponseCollection {
	body := make([]*AIPResponse, len(res))
	for i, val := range res {
		body[i] = marshalStorageviewsAIPViewToAIPResponse(val)
	}
	return body
}

// NewMonitorRequestInternalErrorResponseBody builds the HTTP response body
// from the result of the "monitor_request" endpoint of the "storage" service.
func NewMonitorRequestInternalErrorResponseBody(res *goa.ServiceError) *MonitorRequestInternalErrorResponseBody {
	body := &MonitorRequestInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMonitorInternalErrorResponseBody builds the HTTP response body from the
// result of the "monitor" endpoint of the "storage" service.
func NewMonitorInternalErrorResponseBody(res *goa.ServiceError) *MonitorInternalErrorResponseBody {
	body := &MonitorInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAipsNotAvailableResponseBody builds the HTTP response body from the
// result of the "list_aips" endpoint of the "storage" service.
func NewListAipsNotAvailableResponseBody(res *goa.ServiceError) *ListAipsNotAvailableResponseBody {
	body := &ListAipsNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAipsNotValidResponseBody builds the HTTP response body from the
// result of the "list_aips" endpoint of the "storage" service.
func NewListAipsNotValidResponseBody(res *goa.ServiceError) *ListAipsNotValidResponseBody {
	body := &ListAipsNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAipNotValidResponseBody builds the HTTP response body from the
// result of the "create_aip" endpoint of the "storage" service.
func NewCreateAipNotValidResponseBody(res *goa.ServiceError) *CreateAipNotValidResponseBody {
	body := &CreateAipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubmitAipNotAvailableResponseBody builds the HTTP response body from the
// result of the "submit_aip" endpoint of the "storage" service.
func NewSubmitAipNotAvailableResponseBody(res *goa.ServiceError) *SubmitAipNotAvailableResponseBody {
	body := &SubmitAipNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubmitAipNotValidResponseBody builds the HTTP response body from the
// result of the "submit_aip" endpoint of the "storage" service.
func NewSubmitAipNotValidResponseBody(res *goa.ServiceError) *SubmitAipNotValidResponseBody {
	body := &SubmitAipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateAipNotAvailableResponseBody builds the HTTP response body from the
// result of the "update_aip" endpoint of the "storage" service.
func NewUpdateAipNotAvailableResponseBody(res *goa.ServiceError) *UpdateAipNotAvailableResponseBody {
	body := &UpdateAipNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateAipNotValidResponseBody builds the HTTP response body from the
// result of the "update_aip" endpoint of the "storage" service.
func NewUpdateAipNotValidResponseBody(res *goa.ServiceError) *UpdateAipNotValidResponseBody {
	body := &UpdateAipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadAipRequestNotValidResponseBody builds the HTTP response body from
// the result of the "download_aip_request" endpoint of the "storage" service.
func NewDownloadAipRequestNotValidResponseBody(res *goa.ServiceError) *DownloadAipRequestNotValidResponseBody {
	body := &DownloadAipRequestNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadAipRequestInternalErrorResponseBody builds the HTTP response body
// from the result of the "download_aip_request" endpoint of the "storage"
// service.
func NewDownloadAipRequestInternalErrorResponseBody(res *goa.ServiceError) *DownloadAipRequestInternalErrorResponseBody {
	body := &DownloadAipRequestInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadAipRequestNotFoundResponseBody builds the HTTP response body from
// the result of the "download_aip_request" endpoint of the "storage" service.
func NewDownloadAipRequestNotFoundResponseBody(res *storage.AIPNotFound) *DownloadAipRequestNotFoundResponseBody {
	body := &DownloadAipRequestNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewDownloadAipNotValidResponseBody builds the HTTP response body from the
// result of the "download_aip" endpoint of the "storage" service.
func NewDownloadAipNotValidResponseBody(res *goa.ServiceError) *DownloadAipNotValidResponseBody {
	body := &DownloadAipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadAipInternalErrorResponseBody builds the HTTP response body from
// the result of the "download_aip" endpoint of the "storage" service.
func NewDownloadAipInternalErrorResponseBody(res *goa.ServiceError) *DownloadAipInternalErrorResponseBody {
	body := &DownloadAipInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadAipNotFoundResponseBody builds the HTTP response body from the
// result of the "download_aip" endpoint of the "storage" service.
func NewDownloadAipNotFoundResponseBody(res *storage.AIPNotFound) *DownloadAipNotFoundResponseBody {
	body := &DownloadAipNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewMoveAipNotAvailableResponseBody builds the HTTP response body from the
// result of the "move_aip" endpoint of the "storage" service.
func NewMoveAipNotAvailableResponseBody(res *goa.ServiceError) *MoveAipNotAvailableResponseBody {
	body := &MoveAipNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMoveAipNotValidResponseBody builds the HTTP response body from the result
// of the "move_aip" endpoint of the "storage" service.
func NewMoveAipNotValidResponseBody(res *goa.ServiceError) *MoveAipNotValidResponseBody {
	body := &MoveAipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMoveAipNotFoundResponseBody builds the HTTP response body from the result
// of the "move_aip" endpoint of the "storage" service.
func NewMoveAipNotFoundResponseBody(res *storage.AIPNotFound) *MoveAipNotFoundResponseBody {
	body := &MoveAipNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewMoveAipStatusFailedDependencyResponseBody builds the HTTP response body
// from the result of the "move_aip_status" endpoint of the "storage" service.
func NewMoveAipStatusFailedDependencyResponseBody(res *goa.ServiceError) *MoveAipStatusFailedDependencyResponseBody {
	body := &MoveAipStatusFailedDependencyResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMoveAipStatusNotFoundResponseBody builds the HTTP response body from the
// result of the "move_aip_status" endpoint of the "storage" service.
func NewMoveAipStatusNotFoundResponseBody(res *storage.AIPNotFound) *MoveAipStatusNotFoundResponseBody {
	body := &MoveAipStatusNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewRejectAipNotAvailableResponseBody builds the HTTP response body from the
// result of the "reject_aip" endpoint of the "storage" service.
func NewRejectAipNotAvailableResponseBody(res *goa.ServiceError) *RejectAipNotAvailableResponseBody {
	body := &RejectAipNotAvailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRejectAipNotValidResponseBody builds the HTTP response body from the
// result of the "reject_aip" endpoint of the "storage" service.
func NewRejectAipNotValidResponseBody(res *goa.ServiceError) *RejectAipNotValidResponseBody {
	body := &RejectAipNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRejectAipNotFoundResponseBody builds the HTTP response body from the
// result of the "reject_aip" endpoint of the "storage" service.
func NewRejectAipNotFoundResponseBody(res *storage.AIPNotFound) *RejectAipNotFoundResponseBody {
	body := &RejectAipNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewShowAipNotFoundResponseBody builds the HTTP response body from the result
// of the "show_aip" endpoint of the "storage" service.
func NewShowAipNotFoundResponseBody(res *storage.AIPNotFound) *ShowAipNotFoundResponseBody {
	body := &ShowAipNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewListAipWorkflowsNotFoundResponseBody builds the HTTP response body from
// the result of the "list_aip_workflows" endpoint of the "storage" service.
func NewListAipWorkflowsNotFoundResponseBody(res *storage.AIPNotFound) *ListAipWorkflowsNotFoundResponseBody {
	body := &ListAipWorkflowsNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewRequestAipDeletionNotFoundResponseBody builds the HTTP response body from
// the result of the "request_aip_deletion" endpoint of the "storage" service.
func NewRequestAipDeletionNotFoundResponseBody(res *storage.AIPNotFound) *RequestAipDeletionNotFoundResponseBody {
	body := &RequestAipDeletionNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewReviewAipDeletionNotFoundResponseBody builds the HTTP response body from
// the result of the "review_aip_deletion" endpoint of the "storage" service.
func NewReviewAipDeletionNotFoundResponseBody(res *storage.AIPNotFound) *ReviewAipDeletionNotFoundResponseBody {
	body := &ReviewAipDeletionNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewCancelAipDeletionNotFoundResponseBody builds the HTTP response body from
// the result of the "cancel_aip_deletion" endpoint of the "storage" service.
func NewCancelAipDeletionNotFoundResponseBody(res *storage.AIPNotFound) *CancelAipDeletionNotFoundResponseBody {
	body := &CancelAipDeletionNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewCreateLocationNotValidResponseBody builds the HTTP response body from the
// result of the "create_location" endpoint of the "storage" service.
func NewCreateLocationNotValidResponseBody(res *goa.ServiceError) *CreateLocationNotValidResponseBody {
	body := &CreateLocationNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowLocationNotFoundResponseBody builds the HTTP response body from the
// result of the "show_location" endpoint of the "storage" service.
func NewShowLocationNotFoundResponseBody(res *storage.LocationNotFound) *ShowLocationNotFoundResponseBody {
	body := &ShowLocationNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewListLocationAipsNotValidResponseBody builds the HTTP response body from
// the result of the "list_location_aips" endpoint of the "storage" service.
func NewListLocationAipsNotValidResponseBody(res *goa.ServiceError) *ListLocationAipsNotValidResponseBody {
	body := &ListLocationAipsNotValidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLocationAipsNotFoundResponseBody builds the HTTP response body from
// the result of the "list_location_aips" endpoint of the "storage" service.
func NewListLocationAipsNotFoundResponseBody(res *storage.LocationNotFound) *ListLocationAipsNotFoundResponseBody {
	body := &ListLocationAipsNotFoundResponseBody{
		Message: res.Message,
		UUID:    res.UUID,
	}
	return body
}

// NewMonitorRequestPayload builds a storage service monitor_request endpoint
// payload.
func NewMonitorRequestPayload(token *string) *storage.MonitorRequestPayload {
	v := &storage.MonitorRequestPayload{}
	v.Token = token

	return v
}

// NewMonitorPayload builds a storage service monitor endpoint payload.
func NewMonitorPayload(ticket *string) *storage.MonitorPayload {
	v := &storage.MonitorPayload{}
	v.Ticket = ticket

	return v
}

// NewListAipsPayload builds a storage service list_aips endpoint payload.
func NewListAipsPayload(name *string, earliestCreatedTime *string, latestCreatedTime *string, status *string, limit *int, offset *int, token *string) *storage.ListAipsPayload {
	v := &storage.ListAipsPayload{}
	v.Name = name
	v.EarliestCreatedTime = earliestCreatedTime
	v.LatestCreatedTime = latestCreatedTime
	v.Status = status
	v.Limit = limit
	v.Offset = offset
	v.Token = token

	return v
}

// NewCreateAipPayload builds a storage service create_aip endpoint payload.
func NewCreateAipPayload(body *CreateAipRequestBody, token *string) *storage.CreateAipPayload {
	v := &storage.CreateAipPayload{
		UUID:         *body.UUID,
		Name:         *body.Name,
		ObjectKey:    *body.ObjectKey,
		LocationUUID: body.LocationUUID,
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Status == nil {
		v.Status = "unspecified"
	}
	v.Token = token

	return v
}

// NewSubmitAipPayload builds a storage service submit_aip endpoint payload.
func NewSubmitAipPayload(body *SubmitAipRequestBody, uuid string, token *string) *storage.SubmitAipPayload {
	v := &storage.SubmitAipPayload{
		Name: *body.Name,
	}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewUpdateAipPayload builds a storage service update_aip endpoint payload.
func NewUpdateAipPayload(uuid string, token *string) *storage.UpdateAipPayload {
	v := &storage.UpdateAipPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewDownloadAipRequestPayload builds a storage service download_aip_request
// endpoint payload.
func NewDownloadAipRequestPayload(uuid string, token *string) *storage.DownloadAipRequestPayload {
	v := &storage.DownloadAipRequestPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewDownloadAipPayload builds a storage service download_aip endpoint payload.
func NewDownloadAipPayload(uuid string, ticket *string) *storage.DownloadAipPayload {
	v := &storage.DownloadAipPayload{}
	v.UUID = uuid
	v.Ticket = ticket

	return v
}

// NewMoveAipPayload builds a storage service move_aip endpoint payload.
func NewMoveAipPayload(body *MoveAipRequestBody, uuid string, token *string) *storage.MoveAipPayload {
	v := &storage.MoveAipPayload{
		LocationUUID: *body.LocationUUID,
	}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewMoveAipStatusPayload builds a storage service move_aip_status endpoint
// payload.
func NewMoveAipStatusPayload(uuid string, token *string) *storage.MoveAipStatusPayload {
	v := &storage.MoveAipStatusPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewRejectAipPayload builds a storage service reject_aip endpoint payload.
func NewRejectAipPayload(uuid string, token *string) *storage.RejectAipPayload {
	v := &storage.RejectAipPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewShowAipPayload builds a storage service show_aip endpoint payload.
func NewShowAipPayload(uuid string, token *string) *storage.ShowAipPayload {
	v := &storage.ShowAipPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewListAipWorkflowsPayload builds a storage service list_aip_workflows
// endpoint payload.
func NewListAipWorkflowsPayload(uuid string, status *string, type_ *string, token *string) *storage.ListAipWorkflowsPayload {
	v := &storage.ListAipWorkflowsPayload{}
	v.UUID = uuid
	v.Status = status
	v.Type = type_
	v.Token = token

	return v
}

// NewRequestAipDeletionPayload builds a storage service request_aip_deletion
// endpoint payload.
func NewRequestAipDeletionPayload(body *RequestAipDeletionRequestBody, uuid string, token *string) *storage.RequestAipDeletionPayload {
	v := &storage.RequestAipDeletionPayload{
		Reason: *body.Reason,
	}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewReviewAipDeletionPayload builds a storage service review_aip_deletion
// endpoint payload.
func NewReviewAipDeletionPayload(body *ReviewAipDeletionRequestBody, uuid string, token *string) *storage.ReviewAipDeletionPayload {
	v := &storage.ReviewAipDeletionPayload{
		Approved: *body.Approved,
	}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewCancelAipDeletionPayload builds a storage service cancel_aip_deletion
// endpoint payload.
func NewCancelAipDeletionPayload(body *CancelAipDeletionRequestBody, uuid string, token *string) *storage.CancelAipDeletionPayload {
	v := &storage.CancelAipDeletionPayload{
		Check: body.Check,
	}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewListLocationsPayload builds a storage service list_locations endpoint
// payload.
func NewListLocationsPayload(token *string) *storage.ListLocationsPayload {
	v := &storage.ListLocationsPayload{}
	v.Token = token

	return v
}

// NewCreateLocationPayload builds a storage service create_location endpoint
// payload.
func NewCreateLocationPayload(body *CreateLocationRequestBody, token *string) *storage.CreateLocationPayload {
	v := &storage.CreateLocationPayload{
		Name:        *body.Name,
		Description: body.Description,
		Source:      *body.Source,
		Purpose:     *body.Purpose,
	}
	if body.Config != nil {
		switch *body.Config.Type {
		case "amss":
			var val *storage.AMSSConfig
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "s3":
			var val *storage.S3Config
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "sftp":
			var val *storage.SFTPConfig
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		case "url":
			var val *storage.URLConfig
			json.Unmarshal([]byte(*body.Config.Value), &val)
			v.Config = val
		}
	}
	v.Token = token

	return v
}

// NewShowLocationPayload builds a storage service show_location endpoint
// payload.
func NewShowLocationPayload(uuid string, token *string) *storage.ShowLocationPayload {
	v := &storage.ShowLocationPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewListLocationAipsPayload builds a storage service list_location_aips
// endpoint payload.
func NewListLocationAipsPayload(uuid string, token *string) *storage.ListLocationAipsPayload {
	v := &storage.ListLocationAipsPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// ValidateCreateAipRequestBody runs the validations defined on
// create_aip_request_body
func ValidateCreateAipRequestBody(body *CreateAipRequestBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ObjectKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("object_key", "body"))
	}
	if body.UUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uuid", *body.UUID, goa.FormatUUID))
	}
	if body.ObjectKey != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.object_key", *body.ObjectKey, goa.FormatUUID))
	}
	if body.Status != nil {
		if !(*body.Status == "unspecified" || *body.Status == "stored" || *body.Status == "pending" || *body.Status == "processing" || *body.Status == "deleted" || *body.Status == "queued") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"unspecified", "stored", "pending", "processing", "deleted", "queued"}))
		}
	}
	return
}

// ValidateSubmitAipRequestBody runs the validations defined on
// submit_aip_request_body
func ValidateSubmitAipRequestBody(body *SubmitAipRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateMoveAipRequestBody runs the validations defined on
// move_aip_request_body
func ValidateMoveAipRequestBody(body *MoveAipRequestBody) (err error) {
	if body.LocationUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location_uuid", "body"))
	}
	return
}

// ValidateRequestAipDeletionRequestBody runs the validations defined on
// request_aip_deletion_request_body
func ValidateRequestAipDeletionRequestBody(body *RequestAipDeletionRequestBody) (err error) {
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	return
}

// ValidateReviewAipDeletionRequestBody runs the validations defined on
// review_aip_deletion_request_body
func ValidateReviewAipDeletionRequestBody(body *ReviewAipDeletionRequestBody) (err error) {
	if body.Approved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("approved", "body"))
	}
	return
}

// ValidateCreateLocationRequestBody runs the validations defined on
// create_location_request_body
func ValidateCreateLocationRequestBody(body *CreateLocationRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	if body.Purpose == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purpose", "body"))
	}
	if body.Source != nil {
		if !(*body.Source == "unspecified" || *body.Source == "minio" || *body.Source == "sftp" || *body.Source == "amss") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.source", *body.Source, []any{"unspecified", "minio", "sftp", "amss"}))
		}
	}
	if body.Purpose != nil {
		if !(*body.Purpose == "unspecified" || *body.Purpose == "aip_store") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.purpose", *body.Purpose, []any{"unspecified", "aip_store"}))
		}
	}
	if body.Config != nil {
		if body.Config.Type == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Type", "body.config"))
		}
		if body.Config.Value == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("Value", "body.config"))
		}
		if body.Config.Type != nil {
			if !(*body.Config.Type == "amss" || *body.Config.Type == "s3" || *body.Config.Type == "sftp" || *body.Config.Type == "url") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.config.Type", *body.Config.Type, []any{"amss", "s3", "sftp", "url"}))
			}
		}
	}
	return
}
