// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// DeletionRequestStatusPending is a DeletionRequestStatus of type pending.
	DeletionRequestStatusPending DeletionRequestStatus = "pending"
	// DeletionRequestStatusApproved is a DeletionRequestStatus of type approved.
	DeletionRequestStatusApproved DeletionRequestStatus = "approved"
	// DeletionRequestStatusRejected is a DeletionRequestStatus of type rejected.
	DeletionRequestStatusRejected DeletionRequestStatus = "rejected"
)

var ErrInvalidDeletionRequestStatus = fmt.Errorf("not a valid DeletionRequestStatus, try [%s]", strings.Join(_DeletionRequestStatusNames, ", "))

var _DeletionRequestStatusNames = []string{
	string(DeletionRequestStatusPending),
	string(DeletionRequestStatusApproved),
	string(DeletionRequestStatusRejected),
}

// DeletionRequestStatusNames returns a list of possible string values of DeletionRequestStatus.
func DeletionRequestStatusNames() []string {
	tmp := make([]string, len(_DeletionRequestStatusNames))
	copy(tmp, _DeletionRequestStatusNames)
	return tmp
}

// String implements the Stringer interface.
func (x DeletionRequestStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DeletionRequestStatus) IsValid() bool {
	_, err := ParseDeletionRequestStatus(string(x))
	return err == nil
}

var _DeletionRequestStatusValue = map[string]DeletionRequestStatus{
	"pending":  DeletionRequestStatusPending,
	"approved": DeletionRequestStatusApproved,
	"rejected": DeletionRequestStatusRejected,
}

// ParseDeletionRequestStatus attempts to convert a string to a DeletionRequestStatus.
func ParseDeletionRequestStatus(name string) (DeletionRequestStatus, error) {
	if x, ok := _DeletionRequestStatusValue[name]; ok {
		return x, nil
	}
	return DeletionRequestStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidDeletionRequestStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x DeletionRequestStatus) Values() []string {
	return DeletionRequestStatusNames()
}

// DeletionRequestStatusInterfaces returns an interface list of possible values of DeletionRequestStatus.
func DeletionRequestStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _DeletionRequestStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseDeletionRequestStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseDeletionRequestStatusWithDefault(name string) (DeletionRequestStatus, error) {
	if name == "" {
		return _DeletionRequestStatusValue[_DeletionRequestStatusNames[0]], nil
	}
	if x, ok := _DeletionRequestStatusValue[name]; ok {
		return x, nil
	}
	var e DeletionRequestStatus
	return e, fmt.Errorf("%s is not a valid DeletionRequestStatus, try [%s]", name, strings.Join(_DeletionRequestStatusNames, ", "))
}

// NormalizeDeletionRequestStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeDeletionRequestStatus(name string) string {
	res, err := ParseDeletionRequestStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
