// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// WorkflowStatusUnspecified is a WorkflowStatus of type unspecified.
	WorkflowStatusUnspecified WorkflowStatus = "unspecified"
	// WorkflowStatusInProgress is a WorkflowStatus of type in progress.
	WorkflowStatusInProgress WorkflowStatus = "in progress"
	// WorkflowStatusDone is a WorkflowStatus of type done.
	WorkflowStatusDone WorkflowStatus = "done"
	// WorkflowStatusError is a WorkflowStatus of type error.
	WorkflowStatusError WorkflowStatus = "error"
	// WorkflowStatusQueued is a WorkflowStatus of type queued.
	WorkflowStatusQueued WorkflowStatus = "queued"
	// WorkflowStatusPending is a WorkflowStatus of type pending.
	WorkflowStatusPending WorkflowStatus = "pending"
)

var ErrInvalidWorkflowStatus = fmt.Errorf("not a valid WorkflowStatus, try [%s]", strings.Join(_WorkflowStatusNames, ", "))

var _WorkflowStatusNames = []string{
	string(WorkflowStatusUnspecified),
	string(WorkflowStatusInProgress),
	string(WorkflowStatusDone),
	string(WorkflowStatusError),
	string(WorkflowStatusQueued),
	string(WorkflowStatusPending),
}

// WorkflowStatusNames returns a list of possible string values of WorkflowStatus.
func WorkflowStatusNames() []string {
	tmp := make([]string, len(_WorkflowStatusNames))
	copy(tmp, _WorkflowStatusNames)
	return tmp
}

// String implements the Stringer interface.
func (x WorkflowStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x WorkflowStatus) IsValid() bool {
	_, err := ParseWorkflowStatus(string(x))
	return err == nil
}

var _WorkflowStatusValue = map[string]WorkflowStatus{
	"unspecified": WorkflowStatusUnspecified,
	"in progress": WorkflowStatusInProgress,
	"done":        WorkflowStatusDone,
	"error":       WorkflowStatusError,
	"queued":      WorkflowStatusQueued,
	"pending":     WorkflowStatusPending,
}

// ParseWorkflowStatus attempts to convert a string to a WorkflowStatus.
func ParseWorkflowStatus(name string) (WorkflowStatus, error) {
	if x, ok := _WorkflowStatusValue[name]; ok {
		return x, nil
	}
	return WorkflowStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidWorkflowStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x WorkflowStatus) Values() []string {
	return WorkflowStatusNames()
}

// WorkflowStatusInterfaces returns an interface list of possible values of WorkflowStatus.
func WorkflowStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _WorkflowStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseWorkflowStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseWorkflowStatusWithDefault(name string) (WorkflowStatus, error) {
	if name == "" {
		return _WorkflowStatusValue[_WorkflowStatusNames[0]], nil
	}
	if x, ok := _WorkflowStatusValue[name]; ok {
		return x, nil
	}
	var e WorkflowStatus
	return e, fmt.Errorf("%s is not a valid WorkflowStatus, try [%s]", name, strings.Join(_WorkflowStatusNames, ", "))
}

// NormalizeWorkflowStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeWorkflowStatus(name string) string {
	res, err := ParseWorkflowStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
