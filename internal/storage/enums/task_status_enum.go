// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// TaskStatusUnspecified is a TaskStatus of type unspecified.
	TaskStatusUnspecified TaskStatus = "unspecified"
	// TaskStatusInProgress is a TaskStatus of type in progress.
	TaskStatusInProgress TaskStatus = "in progress"
	// TaskStatusDone is a TaskStatus of type done.
	TaskStatusDone TaskStatus = "done"
	// TaskStatusError is a TaskStatus of type error.
	TaskStatusError TaskStatus = "error"
	// TaskStatusQueued is a TaskStatus of type queued.
	TaskStatusQueued TaskStatus = "queued"
	// TaskStatusPending is a TaskStatus of type pending.
	TaskStatusPending TaskStatus = "pending"
)

var ErrInvalidTaskStatus = fmt.Errorf("not a valid TaskStatus, try [%s]", strings.Join(_TaskStatusNames, ", "))

var _TaskStatusNames = []string{
	string(TaskStatusUnspecified),
	string(TaskStatusInProgress),
	string(TaskStatusDone),
	string(TaskStatusError),
	string(TaskStatusQueued),
	string(TaskStatusPending),
}

// TaskStatusNames returns a list of possible string values of TaskStatus.
func TaskStatusNames() []string {
	tmp := make([]string, len(_TaskStatusNames))
	copy(tmp, _TaskStatusNames)
	return tmp
}

// String implements the Stringer interface.
func (x TaskStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TaskStatus) IsValid() bool {
	_, err := ParseTaskStatus(string(x))
	return err == nil
}

var _TaskStatusValue = map[string]TaskStatus{
	"unspecified": TaskStatusUnspecified,
	"in progress": TaskStatusInProgress,
	"done":        TaskStatusDone,
	"error":       TaskStatusError,
	"queued":      TaskStatusQueued,
	"pending":     TaskStatusPending,
}

// ParseTaskStatus attempts to convert a string to a TaskStatus.
func ParseTaskStatus(name string) (TaskStatus, error) {
	if x, ok := _TaskStatusValue[name]; ok {
		return x, nil
	}
	return TaskStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidTaskStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x TaskStatus) Values() []string {
	return TaskStatusNames()
}

// TaskStatusInterfaces returns an interface list of possible values of TaskStatus.
func TaskStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _TaskStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseTaskStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseTaskStatusWithDefault(name string) (TaskStatus, error) {
	if name == "" {
		return _TaskStatusValue[_TaskStatusNames[0]], nil
	}
	if x, ok := _TaskStatusValue[name]; ok {
		return x, nil
	}
	var e TaskStatus
	return e, fmt.Errorf("%s is not a valid TaskStatus, try [%s]", name, strings.Join(_TaskStatusNames, ", "))
}

// NormalizeTaskStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeTaskStatus(name string) string {
	res, err := ParseTaskStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
