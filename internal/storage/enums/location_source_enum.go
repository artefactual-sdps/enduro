// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// LocationSourceUnspecified is a LocationSource of type unspecified.
	LocationSourceUnspecified LocationSource = "unspecified"
	// LocationSourceMinio is a LocationSource of type minio.
	LocationSourceMinio LocationSource = "minio"
	// LocationSourceSftp is a LocationSource of type sftp.
	LocationSourceSftp LocationSource = "sftp"
	// LocationSourceAmss is a LocationSource of type amss.
	LocationSourceAmss LocationSource = "amss"
)

var ErrInvalidLocationSource = fmt.Errorf("not a valid LocationSource, try [%s]", strings.Join(_LocationSourceNames, ", "))

var _LocationSourceNames = []string{
	string(LocationSourceUnspecified),
	string(LocationSourceMinio),
	string(LocationSourceSftp),
	string(LocationSourceAmss),
}

// LocationSourceNames returns a list of possible string values of LocationSource.
func LocationSourceNames() []string {
	tmp := make([]string, len(_LocationSourceNames))
	copy(tmp, _LocationSourceNames)
	return tmp
}

// String implements the Stringer interface.
func (x LocationSource) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LocationSource) IsValid() bool {
	_, err := ParseLocationSource(string(x))
	return err == nil
}

var _LocationSourceValue = map[string]LocationSource{
	"unspecified": LocationSourceUnspecified,
	"minio":       LocationSourceMinio,
	"sftp":        LocationSourceSftp,
	"amss":        LocationSourceAmss,
}

// ParseLocationSource attempts to convert a string to a LocationSource.
func ParseLocationSource(name string) (LocationSource, error) {
	if x, ok := _LocationSourceValue[name]; ok {
		return x, nil
	}
	return LocationSource(""), fmt.Errorf("%s is %w", name, ErrInvalidLocationSource)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x LocationSource) Values() []string {
	return LocationSourceNames()
}

// LocationSourceInterfaces returns an interface list of possible values of LocationSource.
func LocationSourceInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _LocationSourceNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseLocationSourceWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseLocationSourceWithDefault(name string) (LocationSource, error) {
	if name == "" {
		return _LocationSourceValue[_LocationSourceNames[0]], nil
	}
	if x, ok := _LocationSourceValue[name]; ok {
		return x, nil
	}
	var e LocationSource
	return e, fmt.Errorf("%s is not a valid LocationSource, try [%s]", name, strings.Join(_LocationSourceNames, ", "))
}

// NormalizeLocationSource attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeLocationSource(name string) string {
	res, err := ParseLocationSource(name)
	if err != nil {
		return name
	}
	return res.String()
}
