// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// Indeterminate status.
	AIPStatusUnspecified AIPStatus = "unspecified"
	// Stored in preservation storage.
	AIPStatusStored AIPStatus = "stored"
	// Awaiting a user decision.
	AIPStatusPending AIPStatus = "pending"
	// Undergoing processing.
	AIPStatusProcessing AIPStatus = "processing"
	// Deleted from preservation storage.
	AIPStatusDeleted AIPStatus = "deleted"
	// Queued for processing.
	AIPStatusQueued AIPStatus = "queued"
)

var ErrInvalidAIPStatus = fmt.Errorf("not a valid AIPStatus, try [%s]", strings.Join(_AIPStatusNames, ", "))

var _AIPStatusNames = []string{
	string(AIPStatusUnspecified),
	string(AIPStatusStored),
	string(AIPStatusPending),
	string(AIPStatusProcessing),
	string(AIPStatusDeleted),
	string(AIPStatusQueued),
}

// AIPStatusNames returns a list of possible string values of AIPStatus.
func AIPStatusNames() []string {
	tmp := make([]string, len(_AIPStatusNames))
	copy(tmp, _AIPStatusNames)
	return tmp
}

// String implements the Stringer interface.
func (x AIPStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AIPStatus) IsValid() bool {
	_, err := ParseAIPStatus(string(x))
	return err == nil
}

var _AIPStatusValue = map[string]AIPStatus{
	"unspecified": AIPStatusUnspecified,
	"stored":      AIPStatusStored,
	"pending":     AIPStatusPending,
	"processing":  AIPStatusProcessing,
	"deleted":     AIPStatusDeleted,
	"queued":      AIPStatusQueued,
}

// ParseAIPStatus attempts to convert a string to a AIPStatus.
func ParseAIPStatus(name string) (AIPStatus, error) {
	if x, ok := _AIPStatusValue[name]; ok {
		return x, nil
	}
	return AIPStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidAIPStatus)
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x AIPStatus) Values() []string {
	return AIPStatusNames()
}

// AIPStatusInterfaces returns an interface list of possible values of AIPStatus.
func AIPStatusInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _AIPStatusNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseAIPStatusWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseAIPStatusWithDefault(name string) (AIPStatus, error) {
	if name == "" {
		return _AIPStatusValue[_AIPStatusNames[0]], nil
	}
	if x, ok := _AIPStatusValue[name]; ok {
		return x, nil
	}
	var e AIPStatus
	return e, fmt.Errorf("%s is not a valid AIPStatus, try [%s]", name, strings.Join(_AIPStatusNames, ", "))
}

// NormalizeAIPStatus attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeAIPStatus(name string) string {
	res, err := ParseAIPStatus(name)
	if err != nil {
		return name
	}
	return res.String()
}
