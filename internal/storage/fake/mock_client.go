// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/storage (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/storage/fake/mock_client.go -package=fake github.com/artefactual-sdps/enduro/internal/storage Client
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddLocation mocks base method.
func (m *MockClient) AddLocation(arg0 context.Context, arg1 *storage.AddLocationPayload) (*storage.AddLocationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocation", arg0, arg1)
	ret0, _ := ret[0].(*storage.AddLocationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocation indicates an expected call of AddLocation.
func (mr *MockClientMockRecorder) AddLocation(arg0, arg1 any) *MockClientAddLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocation", reflect.TypeOf((*MockClient)(nil).AddLocation), arg0, arg1)
	return &MockClientAddLocationCall{Call: call}
}

// MockClientAddLocationCall wrap *gomock.Call
type MockClientAddLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientAddLocationCall) Return(arg0 *storage.AddLocationResult, arg1 error) *MockClientAddLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientAddLocationCall) Do(f func(context.Context, *storage.AddLocationPayload) (*storage.AddLocationResult, error)) *MockClientAddLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientAddLocationCall) DoAndReturn(f func(context.Context, *storage.AddLocationPayload) (*storage.AddLocationResult, error)) *MockClientAddLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockClient) Create(arg0 context.Context, arg1 *storage.CreatePayload) (*storage.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*storage.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(arg0, arg1 any) *MockClientCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), arg0, arg1)
	return &MockClientCreateCall{Call: call}
}

// MockClientCreateCall wrap *gomock.Call
type MockClientCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCreateCall) Return(arg0 *storage.Package, arg1 error) *MockClientCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCreateCall) Do(f func(context.Context, *storage.CreatePayload) (*storage.Package, error)) *MockClientCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCreateCall) DoAndReturn(f func(context.Context, *storage.CreatePayload) (*storage.Package, error)) *MockClientCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Download mocks base method.
func (m *MockClient) Download(arg0 context.Context, arg1 *storage.DownloadPayload) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockClientMockRecorder) Download(arg0, arg1 any) *MockClientDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockClient)(nil).Download), arg0, arg1)
	return &MockClientDownloadCall{Call: call}
}

// MockClientDownloadCall wrap *gomock.Call
type MockClientDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDownloadCall) Return(arg0 []byte, arg1 error) *MockClientDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDownloadCall) Do(f func(context.Context, *storage.DownloadPayload) ([]byte, error)) *MockClientDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDownloadCall) DoAndReturn(f func(context.Context, *storage.DownloadPayload) ([]byte, error)) *MockClientDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocationPackages mocks base method.
func (m *MockClient) LocationPackages(arg0 context.Context, arg1 *storage.LocationPackagesPayload) (storage.PackageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationPackages", arg0, arg1)
	ret0, _ := ret[0].(storage.PackageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationPackages indicates an expected call of LocationPackages.
func (mr *MockClientMockRecorder) LocationPackages(arg0, arg1 any) *MockClientLocationPackagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationPackages", reflect.TypeOf((*MockClient)(nil).LocationPackages), arg0, arg1)
	return &MockClientLocationPackagesCall{Call: call}
}

// MockClientLocationPackagesCall wrap *gomock.Call
type MockClientLocationPackagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientLocationPackagesCall) Return(arg0 storage.PackageCollection, arg1 error) *MockClientLocationPackagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientLocationPackagesCall) Do(f func(context.Context, *storage.LocationPackagesPayload) (storage.PackageCollection, error)) *MockClientLocationPackagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientLocationPackagesCall) DoAndReturn(f func(context.Context, *storage.LocationPackagesPayload) (storage.PackageCollection, error)) *MockClientLocationPackagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Locations mocks base method.
func (m *MockClient) Locations(arg0 context.Context, arg1 *storage.LocationsPayload) (storage.LocationCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locations", arg0, arg1)
	ret0, _ := ret[0].(storage.LocationCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Locations indicates an expected call of Locations.
func (mr *MockClientMockRecorder) Locations(arg0, arg1 any) *MockClientLocationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locations", reflect.TypeOf((*MockClient)(nil).Locations), arg0, arg1)
	return &MockClientLocationsCall{Call: call}
}

// MockClientLocationsCall wrap *gomock.Call
type MockClientLocationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientLocationsCall) Return(arg0 storage.LocationCollection, arg1 error) *MockClientLocationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientLocationsCall) Do(f func(context.Context, *storage.LocationsPayload) (storage.LocationCollection, error)) *MockClientLocationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientLocationsCall) DoAndReturn(f func(context.Context, *storage.LocationsPayload) (storage.LocationCollection, error)) *MockClientLocationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Move mocks base method.
func (m *MockClient) Move(arg0 context.Context, arg1 *storage.MovePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockClientMockRecorder) Move(arg0, arg1 any) *MockClientMoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockClient)(nil).Move), arg0, arg1)
	return &MockClientMoveCall{Call: call}
}

// MockClientMoveCall wrap *gomock.Call
type MockClientMoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientMoveCall) Return(arg0 error) *MockClientMoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientMoveCall) Do(f func(context.Context, *storage.MovePayload) error) *MockClientMoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientMoveCall) DoAndReturn(f func(context.Context, *storage.MovePayload) error) *MockClientMoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveStatus mocks base method.
func (m *MockClient) MoveStatus(arg0 context.Context, arg1 *storage.MoveStatusPayload) (*storage.MoveStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStatus", arg0, arg1)
	ret0, _ := ret[0].(*storage.MoveStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveStatus indicates an expected call of MoveStatus.
func (mr *MockClientMockRecorder) MoveStatus(arg0, arg1 any) *MockClientMoveStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStatus", reflect.TypeOf((*MockClient)(nil).MoveStatus), arg0, arg1)
	return &MockClientMoveStatusCall{Call: call}
}

// MockClientMoveStatusCall wrap *gomock.Call
type MockClientMoveStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientMoveStatusCall) Return(arg0 *storage.MoveStatusResult, arg1 error) *MockClientMoveStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientMoveStatusCall) Do(f func(context.Context, *storage.MoveStatusPayload) (*storage.MoveStatusResult, error)) *MockClientMoveStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientMoveStatusCall) DoAndReturn(f func(context.Context, *storage.MoveStatusPayload) (*storage.MoveStatusResult, error)) *MockClientMoveStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reject mocks base method.
func (m *MockClient) Reject(arg0 context.Context, arg1 *storage.RejectPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *MockClientMockRecorder) Reject(arg0, arg1 any) *MockClientRejectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockClient)(nil).Reject), arg0, arg1)
	return &MockClientRejectCall{Call: call}
}

// MockClientRejectCall wrap *gomock.Call
type MockClientRejectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRejectCall) Return(arg0 error) *MockClientRejectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRejectCall) Do(f func(context.Context, *storage.RejectPayload) error) *MockClientRejectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRejectCall) DoAndReturn(f func(context.Context, *storage.RejectPayload) error) *MockClientRejectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Show mocks base method.
func (m *MockClient) Show(arg0 context.Context, arg1 *storage.ShowPayload) (*storage.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*storage.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockClientMockRecorder) Show(arg0, arg1 any) *MockClientShowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockClient)(nil).Show), arg0, arg1)
	return &MockClientShowCall{Call: call}
}

// MockClientShowCall wrap *gomock.Call
type MockClientShowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientShowCall) Return(arg0 *storage.Package, arg1 error) *MockClientShowCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientShowCall) Do(f func(context.Context, *storage.ShowPayload) (*storage.Package, error)) *MockClientShowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientShowCall) DoAndReturn(f func(context.Context, *storage.ShowPayload) (*storage.Package, error)) *MockClientShowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowLocation mocks base method.
func (m *MockClient) ShowLocation(arg0 context.Context, arg1 *storage.ShowLocationPayload) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowLocation", arg0, arg1)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowLocation indicates an expected call of ShowLocation.
func (mr *MockClientMockRecorder) ShowLocation(arg0, arg1 any) *MockClientShowLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowLocation", reflect.TypeOf((*MockClient)(nil).ShowLocation), arg0, arg1)
	return &MockClientShowLocationCall{Call: call}
}

// MockClientShowLocationCall wrap *gomock.Call
type MockClientShowLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientShowLocationCall) Return(arg0 *storage.Location, arg1 error) *MockClientShowLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientShowLocationCall) Do(f func(context.Context, *storage.ShowLocationPayload) (*storage.Location, error)) *MockClientShowLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientShowLocationCall) DoAndReturn(f func(context.Context, *storage.ShowLocationPayload) (*storage.Location, error)) *MockClientShowLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Submit mocks base method.
func (m *MockClient) Submit(arg0 context.Context, arg1 *storage.SubmitPayload) (*storage.SubmitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", arg0, arg1)
	ret0, _ := ret[0].(*storage.SubmitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockClientMockRecorder) Submit(arg0, arg1 any) *MockClientSubmitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockClient)(nil).Submit), arg0, arg1)
	return &MockClientSubmitCall{Call: call}
}

// MockClientSubmitCall wrap *gomock.Call
type MockClientSubmitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSubmitCall) Return(arg0 *storage.SubmitResult, arg1 error) *MockClientSubmitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSubmitCall) Do(f func(context.Context, *storage.SubmitPayload) (*storage.SubmitResult, error)) *MockClientSubmitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSubmitCall) DoAndReturn(f func(context.Context, *storage.SubmitPayload) (*storage.SubmitResult, error)) *MockClientSubmitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockClient) Update(arg0 context.Context, arg1 *storage.UpdatePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(arg0, arg1 any) *MockClientUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), arg0, arg1)
	return &MockClientUpdateCall{Call: call}
}

// MockClientUpdateCall wrap *gomock.Call
type MockClientUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUpdateCall) Return(arg0 error) *MockClientUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUpdateCall) Do(f func(context.Context, *storage.UpdatePayload) error) *MockClientUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUpdateCall) DoAndReturn(f func(context.Context, *storage.UpdatePayload) error) *MockClientUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
