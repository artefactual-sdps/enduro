// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/storage (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/storage/fake/mock_storage.go -package=fake github.com/artefactual-sdps/enduro/internal/storage Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	storage0 "github.com/artefactual-sdps/enduro/internal/storage"
	enums "github.com/artefactual-sdps/enduro/internal/storage/enums"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	blob "gocloud.dev/blob"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AipReader mocks base method.
func (m *MockService) AipReader(arg0 context.Context, arg1 *storage.AIP) (*blob.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AipReader", arg0, arg1)
	ret0, _ := ret[0].(*blob.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AipReader indicates an expected call of AipReader.
func (mr *MockServiceMockRecorder) AipReader(arg0, arg1 any) *MockServiceAipReaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AipReader", reflect.TypeOf((*MockService)(nil).AipReader), arg0, arg1)
	return &MockServiceAipReaderCall{Call: call}
}

// MockServiceAipReaderCall wrap *gomock.Call
type MockServiceAipReaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAipReaderCall) Return(arg0 *blob.Reader, arg1 error) *MockServiceAipReaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAipReaderCall) Do(f func(context.Context, *storage.AIP) (*blob.Reader, error)) *MockServiceAipReaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAipReaderCall) DoAndReturn(f func(context.Context, *storage.AIP) (*blob.Reader, error)) *MockServiceAipReaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateAip mocks base method.
func (m *MockService) CreateAip(arg0 context.Context, arg1 *storage.CreateAipPayload) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAip indicates an expected call of CreateAip.
func (mr *MockServiceMockRecorder) CreateAip(arg0, arg1 any) *MockServiceCreateAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAip", reflect.TypeOf((*MockService)(nil).CreateAip), arg0, arg1)
	return &MockServiceCreateAipCall{Call: call}
}

// MockServiceCreateAipCall wrap *gomock.Call
type MockServiceCreateAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateAipCall) Return(arg0 *storage.AIP, arg1 error) *MockServiceCreateAipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateAipCall) Do(f func(context.Context, *storage.CreateAipPayload) (*storage.AIP, error)) *MockServiceCreateAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateAipCall) DoAndReturn(f func(context.Context, *storage.CreateAipPayload) (*storage.AIP, error)) *MockServiceCreateAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLocation mocks base method.
func (m *MockService) CreateLocation(arg0 context.Context, arg1 *storage.CreateLocationPayload) (*storage.CreateLocationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1)
	ret0, _ := ret[0].(*storage.CreateLocationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockServiceMockRecorder) CreateLocation(arg0, arg1 any) *MockServiceCreateLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockService)(nil).CreateLocation), arg0, arg1)
	return &MockServiceCreateLocationCall{Call: call}
}

// MockServiceCreateLocationCall wrap *gomock.Call
type MockServiceCreateLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateLocationCall) Return(arg0 *storage.CreateLocationResult, arg1 error) *MockServiceCreateLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateLocationCall) Do(f func(context.Context, *storage.CreateLocationPayload) (*storage.CreateLocationResult, error)) *MockServiceCreateLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateLocationCall) DoAndReturn(f func(context.Context, *storage.CreateLocationPayload) (*storage.CreateLocationResult, error)) *MockServiceCreateLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAip mocks base method.
func (m *MockService) DeleteAip(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAip indicates an expected call of DeleteAip.
func (mr *MockServiceMockRecorder) DeleteAip(arg0, arg1 any) *MockServiceDeleteAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAip", reflect.TypeOf((*MockService)(nil).DeleteAip), arg0, arg1)
	return &MockServiceDeleteAipCall{Call: call}
}

// MockServiceDeleteAipCall wrap *gomock.Call
type MockServiceDeleteAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteAipCall) Return(arg0 error) *MockServiceDeleteAipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteAipCall) Do(f func(context.Context, uuid.UUID) error) *MockServiceDeleteAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteAipCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockServiceDeleteAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DownloadAip mocks base method.
func (m *MockService) DownloadAip(arg0 context.Context, arg1 *storage.DownloadAipPayload) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAip", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAip indicates an expected call of DownloadAip.
func (mr *MockServiceMockRecorder) DownloadAip(arg0, arg1 any) *MockServiceDownloadAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAip", reflect.TypeOf((*MockService)(nil).DownloadAip), arg0, arg1)
	return &MockServiceDownloadAipCall{Call: call}
}

// MockServiceDownloadAipCall wrap *gomock.Call
type MockServiceDownloadAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDownloadAipCall) Return(arg0 []byte, arg1 error) *MockServiceDownloadAipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDownloadAipCall) Do(f func(context.Context, *storage.DownloadAipPayload) ([]byte, error)) *MockServiceDownloadAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDownloadAipCall) DoAndReturn(f func(context.Context, *storage.DownloadAipPayload) ([]byte, error)) *MockServiceDownloadAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAips mocks base method.
func (m *MockService) ListAips(arg0 context.Context, arg1 *storage.ListAipsPayload) (*storage.AIPs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAips", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIPs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAips indicates an expected call of ListAips.
func (mr *MockServiceMockRecorder) ListAips(arg0, arg1 any) *MockServiceListAipsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAips", reflect.TypeOf((*MockService)(nil).ListAips), arg0, arg1)
	return &MockServiceListAipsCall{Call: call}
}

// MockServiceListAipsCall wrap *gomock.Call
type MockServiceListAipsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListAipsCall) Return(arg0 *storage.AIPs, arg1 error) *MockServiceListAipsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListAipsCall) Do(f func(context.Context, *storage.ListAipsPayload) (*storage.AIPs, error)) *MockServiceListAipsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListAipsCall) DoAndReturn(f func(context.Context, *storage.ListAipsPayload) (*storage.AIPs, error)) *MockServiceListAipsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLocationAips mocks base method.
func (m *MockService) ListLocationAips(arg0 context.Context, arg1 *storage.ListLocationAipsPayload) (storage.AIPCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocationAips", arg0, arg1)
	ret0, _ := ret[0].(storage.AIPCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocationAips indicates an expected call of ListLocationAips.
func (mr *MockServiceMockRecorder) ListLocationAips(arg0, arg1 any) *MockServiceListLocationAipsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocationAips", reflect.TypeOf((*MockService)(nil).ListLocationAips), arg0, arg1)
	return &MockServiceListLocationAipsCall{Call: call}
}

// MockServiceListLocationAipsCall wrap *gomock.Call
type MockServiceListLocationAipsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListLocationAipsCall) Return(arg0 storage.AIPCollection, arg1 error) *MockServiceListLocationAipsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListLocationAipsCall) Do(f func(context.Context, *storage.ListLocationAipsPayload) (storage.AIPCollection, error)) *MockServiceListLocationAipsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListLocationAipsCall) DoAndReturn(f func(context.Context, *storage.ListLocationAipsPayload) (storage.AIPCollection, error)) *MockServiceListLocationAipsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLocations mocks base method.
func (m *MockService) ListLocations(arg0 context.Context, arg1 *storage.ListLocationsPayload) (storage.LocationCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", arg0, arg1)
	ret0, _ := ret[0].(storage.LocationCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockServiceMockRecorder) ListLocations(arg0, arg1 any) *MockServiceListLocationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockService)(nil).ListLocations), arg0, arg1)
	return &MockServiceListLocationsCall{Call: call}
}

// MockServiceListLocationsCall wrap *gomock.Call
type MockServiceListLocationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListLocationsCall) Return(arg0 storage.LocationCollection, arg1 error) *MockServiceListLocationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListLocationsCall) Do(f func(context.Context, *storage.ListLocationsPayload) (storage.LocationCollection, error)) *MockServiceListLocationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListLocationsCall) DoAndReturn(f func(context.Context, *storage.ListLocationsPayload) (storage.LocationCollection, error)) *MockServiceListLocationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Location mocks base method.
func (m *MockService) Location(arg0 context.Context, arg1 uuid.UUID) (storage0.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location", arg0, arg1)
	ret0, _ := ret[0].(storage0.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Location indicates an expected call of Location.
func (mr *MockServiceMockRecorder) Location(arg0, arg1 any) *MockServiceLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockService)(nil).Location), arg0, arg1)
	return &MockServiceLocationCall{Call: call}
}

// MockServiceLocationCall wrap *gomock.Call
type MockServiceLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceLocationCall) Return(arg0 storage0.Location, arg1 error) *MockServiceLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceLocationCall) Do(f func(context.Context, uuid.UUID) (storage0.Location, error)) *MockServiceLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceLocationCall) DoAndReturn(f func(context.Context, uuid.UUID) (storage0.Location, error)) *MockServiceLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveAip mocks base method.
func (m *MockService) MoveAip(arg0 context.Context, arg1 *storage.MoveAipPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveAip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveAip indicates an expected call of MoveAip.
func (mr *MockServiceMockRecorder) MoveAip(arg0, arg1 any) *MockServiceMoveAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveAip", reflect.TypeOf((*MockService)(nil).MoveAip), arg0, arg1)
	return &MockServiceMoveAipCall{Call: call}
}

// MockServiceMoveAipCall wrap *gomock.Call
type MockServiceMoveAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceMoveAipCall) Return(arg0 error) *MockServiceMoveAipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceMoveAipCall) Do(f func(context.Context, *storage.MoveAipPayload) error) *MockServiceMoveAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceMoveAipCall) DoAndReturn(f func(context.Context, *storage.MoveAipPayload) error) *MockServiceMoveAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveAipStatus mocks base method.
func (m *MockService) MoveAipStatus(arg0 context.Context, arg1 *storage.MoveAipStatusPayload) (*storage.MoveStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveAipStatus", arg0, arg1)
	ret0, _ := ret[0].(*storage.MoveStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveAipStatus indicates an expected call of MoveAipStatus.
func (mr *MockServiceMockRecorder) MoveAipStatus(arg0, arg1 any) *MockServiceMoveAipStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveAipStatus", reflect.TypeOf((*MockService)(nil).MoveAipStatus), arg0, arg1)
	return &MockServiceMoveAipStatusCall{Call: call}
}

// MockServiceMoveAipStatusCall wrap *gomock.Call
type MockServiceMoveAipStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceMoveAipStatusCall) Return(arg0 *storage.MoveStatusResult, arg1 error) *MockServiceMoveAipStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceMoveAipStatusCall) Do(f func(context.Context, *storage.MoveAipStatusPayload) (*storage.MoveStatusResult, error)) *MockServiceMoveAipStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceMoveAipStatusCall) DoAndReturn(f func(context.Context, *storage.MoveAipStatusPayload) (*storage.MoveStatusResult, error)) *MockServiceMoveAipStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAip mocks base method.
func (m *MockService) ReadAip(arg0 context.Context, arg1 uuid.UUID) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAip indicates an expected call of ReadAip.
func (mr *MockServiceMockRecorder) ReadAip(arg0, arg1 any) *MockServiceReadAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAip", reflect.TypeOf((*MockService)(nil).ReadAip), arg0, arg1)
	return &MockServiceReadAipCall{Call: call}
}

// MockServiceReadAipCall wrap *gomock.Call
type MockServiceReadAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceReadAipCall) Return(arg0 *storage.AIP, arg1 error) *MockServiceReadAipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceReadAipCall) Do(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockServiceReadAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceReadAipCall) DoAndReturn(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockServiceReadAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RejectAip mocks base method.
func (m *MockService) RejectAip(arg0 context.Context, arg1 *storage.RejectAipPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectAip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectAip indicates an expected call of RejectAip.
func (mr *MockServiceMockRecorder) RejectAip(arg0, arg1 any) *MockServiceRejectAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAip", reflect.TypeOf((*MockService)(nil).RejectAip), arg0, arg1)
	return &MockServiceRejectAipCall{Call: call}
}

// MockServiceRejectAipCall wrap *gomock.Call
type MockServiceRejectAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRejectAipCall) Return(arg0 error) *MockServiceRejectAipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRejectAipCall) Do(f func(context.Context, *storage.RejectAipPayload) error) *MockServiceRejectAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRejectAipCall) DoAndReturn(f func(context.Context, *storage.RejectAipPayload) error) *MockServiceRejectAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowAip mocks base method.
func (m *MockService) ShowAip(arg0 context.Context, arg1 *storage.ShowAipPayload) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAip indicates an expected call of ShowAip.
func (mr *MockServiceMockRecorder) ShowAip(arg0, arg1 any) *MockServiceShowAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAip", reflect.TypeOf((*MockService)(nil).ShowAip), arg0, arg1)
	return &MockServiceShowAipCall{Call: call}
}

// MockServiceShowAipCall wrap *gomock.Call
type MockServiceShowAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceShowAipCall) Return(arg0 *storage.AIP, arg1 error) *MockServiceShowAipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceShowAipCall) Do(f func(context.Context, *storage.ShowAipPayload) (*storage.AIP, error)) *MockServiceShowAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceShowAipCall) DoAndReturn(f func(context.Context, *storage.ShowAipPayload) (*storage.AIP, error)) *MockServiceShowAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowLocation mocks base method.
func (m *MockService) ShowLocation(arg0 context.Context, arg1 *storage.ShowLocationPayload) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowLocation", arg0, arg1)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowLocation indicates an expected call of ShowLocation.
func (mr *MockServiceMockRecorder) ShowLocation(arg0, arg1 any) *MockServiceShowLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowLocation", reflect.TypeOf((*MockService)(nil).ShowLocation), arg0, arg1)
	return &MockServiceShowLocationCall{Call: call}
}

// MockServiceShowLocationCall wrap *gomock.Call
type MockServiceShowLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceShowLocationCall) Return(arg0 *storage.Location, arg1 error) *MockServiceShowLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceShowLocationCall) Do(f func(context.Context, *storage.ShowLocationPayload) (*storage.Location, error)) *MockServiceShowLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceShowLocationCall) DoAndReturn(f func(context.Context, *storage.ShowLocationPayload) (*storage.Location, error)) *MockServiceShowLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubmitAip mocks base method.
func (m *MockService) SubmitAip(arg0 context.Context, arg1 *storage.SubmitAipPayload) (*storage.SubmitAIPResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.SubmitAIPResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAip indicates an expected call of SubmitAip.
func (mr *MockServiceMockRecorder) SubmitAip(arg0, arg1 any) *MockServiceSubmitAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAip", reflect.TypeOf((*MockService)(nil).SubmitAip), arg0, arg1)
	return &MockServiceSubmitAipCall{Call: call}
}

// MockServiceSubmitAipCall wrap *gomock.Call
type MockServiceSubmitAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSubmitAipCall) Return(arg0 *storage.SubmitAIPResult, arg1 error) *MockServiceSubmitAipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSubmitAipCall) Do(f func(context.Context, *storage.SubmitAipPayload) (*storage.SubmitAIPResult, error)) *MockServiceSubmitAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSubmitAipCall) DoAndReturn(f func(context.Context, *storage.SubmitAipPayload) (*storage.SubmitAIPResult, error)) *MockServiceSubmitAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAip mocks base method.
func (m *MockService) UpdateAip(arg0 context.Context, arg1 *storage.UpdateAipPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAip indicates an expected call of UpdateAip.
func (mr *MockServiceMockRecorder) UpdateAip(arg0, arg1 any) *MockServiceUpdateAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAip", reflect.TypeOf((*MockService)(nil).UpdateAip), arg0, arg1)
	return &MockServiceUpdateAipCall{Call: call}
}

// MockServiceUpdateAipCall wrap *gomock.Call
type MockServiceUpdateAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateAipCall) Return(arg0 error) *MockServiceUpdateAipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateAipCall) Do(f func(context.Context, *storage.UpdateAipPayload) error) *MockServiceUpdateAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateAipCall) DoAndReturn(f func(context.Context, *storage.UpdateAipPayload) error) *MockServiceUpdateAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAipLocationID mocks base method.
func (m *MockService) UpdateAipLocationID(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAipLocationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAipLocationID indicates an expected call of UpdateAipLocationID.
func (mr *MockServiceMockRecorder) UpdateAipLocationID(arg0, arg1, arg2 any) *MockServiceUpdateAipLocationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAipLocationID", reflect.TypeOf((*MockService)(nil).UpdateAipLocationID), arg0, arg1, arg2)
	return &MockServiceUpdateAipLocationIDCall{Call: call}
}

// MockServiceUpdateAipLocationIDCall wrap *gomock.Call
type MockServiceUpdateAipLocationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateAipLocationIDCall) Return(arg0 error) *MockServiceUpdateAipLocationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateAipLocationIDCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockServiceUpdateAipLocationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateAipLocationIDCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockServiceUpdateAipLocationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAipStatus mocks base method.
func (m *MockService) UpdateAipStatus(arg0 context.Context, arg1 uuid.UUID, arg2 enums.AIPStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAipStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAipStatus indicates an expected call of UpdateAipStatus.
func (mr *MockServiceMockRecorder) UpdateAipStatus(arg0, arg1, arg2 any) *MockServiceUpdateAipStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAipStatus", reflect.TypeOf((*MockService)(nil).UpdateAipStatus), arg0, arg1, arg2)
	return &MockServiceUpdateAipStatusCall{Call: call}
}

// MockServiceUpdateAipStatusCall wrap *gomock.Call
type MockServiceUpdateAipStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateAipStatusCall) Return(arg0 error) *MockServiceUpdateAipStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateAipStatusCall) Do(f func(context.Context, uuid.UUID, enums.AIPStatus) error) *MockServiceUpdateAipStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateAipStatusCall) DoAndReturn(f func(context.Context, uuid.UUID, enums.AIPStatus) error) *MockServiceUpdateAipStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
