// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/storage (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/storage/fake/mock_storage.go -package=fake github.com/artefactual-sdps/enduro/internal/storage Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	io "io"
	reflect "reflect"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	storage0 "github.com/artefactual-sdps/enduro/internal/storage"
	enums "github.com/artefactual-sdps/enduro/internal/storage/enums"
	persistence "github.com/artefactual-sdps/enduro/internal/storage/persistence"
	types "github.com/artefactual-sdps/enduro/internal/storage/types"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	blob "gocloud.dev/blob"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AipReader mocks base method.
func (m *MockService) AipReader(ctx context.Context, aip *storage.AIP) (*blob.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AipReader", ctx, aip)
	ret0, _ := ret[0].(*blob.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AipReader indicates an expected call of AipReader.
func (mr *MockServiceMockRecorder) AipReader(ctx, aip any) *MockServiceAipReaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AipReader", reflect.TypeOf((*MockService)(nil).AipReader), ctx, aip)
	return &MockServiceAipReaderCall{Call: call}
}

// MockServiceAipReaderCall wrap *gomock.Call
type MockServiceAipReaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAipReaderCall) Return(arg0 *blob.Reader, arg1 error) *MockServiceAipReaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAipReaderCall) Do(f func(context.Context, *storage.AIP) (*blob.Reader, error)) *MockServiceAipReaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAipReaderCall) DoAndReturn(f func(context.Context, *storage.AIP) (*blob.Reader, error)) *MockServiceAipReaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CancelAipDeletion mocks base method.
func (m *MockService) CancelAipDeletion(arg0 context.Context, arg1 *storage.CancelAipDeletionPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAipDeletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAipDeletion indicates an expected call of CancelAipDeletion.
func (mr *MockServiceMockRecorder) CancelAipDeletion(arg0, arg1 any) *MockServiceCancelAipDeletionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAipDeletion", reflect.TypeOf((*MockService)(nil).CancelAipDeletion), arg0, arg1)
	return &MockServiceCancelAipDeletionCall{Call: call}
}

// MockServiceCancelAipDeletionCall wrap *gomock.Call
type MockServiceCancelAipDeletionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCancelAipDeletionCall) Return(err error) *MockServiceCancelAipDeletionCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCancelAipDeletionCall) Do(f func(context.Context, *storage.CancelAipDeletionPayload) error) *MockServiceCancelAipDeletionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCancelAipDeletionCall) DoAndReturn(f func(context.Context, *storage.CancelAipDeletionPayload) error) *MockServiceCancelAipDeletionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateAip mocks base method.
func (m *MockService) CreateAip(arg0 context.Context, arg1 *storage.CreateAipPayload) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAip indicates an expected call of CreateAip.
func (mr *MockServiceMockRecorder) CreateAip(arg0, arg1 any) *MockServiceCreateAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAip", reflect.TypeOf((*MockService)(nil).CreateAip), arg0, arg1)
	return &MockServiceCreateAipCall{Call: call}
}

// MockServiceCreateAipCall wrap *gomock.Call
type MockServiceCreateAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateAipCall) Return(res *storage.AIP, err error) *MockServiceCreateAipCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateAipCall) Do(f func(context.Context, *storage.CreateAipPayload) (*storage.AIP, error)) *MockServiceCreateAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateAipCall) DoAndReturn(f func(context.Context, *storage.CreateAipPayload) (*storage.AIP, error)) *MockServiceCreateAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDeletionRequest mocks base method.
func (m *MockService) CreateDeletionRequest(arg0 context.Context, arg1 *types.DeletionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeletionRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeletionRequest indicates an expected call of CreateDeletionRequest.
func (mr *MockServiceMockRecorder) CreateDeletionRequest(arg0, arg1 any) *MockServiceCreateDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeletionRequest", reflect.TypeOf((*MockService)(nil).CreateDeletionRequest), arg0, arg1)
	return &MockServiceCreateDeletionRequestCall{Call: call}
}

// MockServiceCreateDeletionRequestCall wrap *gomock.Call
type MockServiceCreateDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateDeletionRequestCall) Return(arg0 error) *MockServiceCreateDeletionRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateDeletionRequestCall) Do(f func(context.Context, *types.DeletionRequest) error) *MockServiceCreateDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateDeletionRequestCall) DoAndReturn(f func(context.Context, *types.DeletionRequest) error) *MockServiceCreateDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLocation mocks base method.
func (m *MockService) CreateLocation(arg0 context.Context, arg1 *storage.CreateLocationPayload) (*storage.CreateLocationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1)
	ret0, _ := ret[0].(*storage.CreateLocationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockServiceMockRecorder) CreateLocation(arg0, arg1 any) *MockServiceCreateLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockService)(nil).CreateLocation), arg0, arg1)
	return &MockServiceCreateLocationCall{Call: call}
}

// MockServiceCreateLocationCall wrap *gomock.Call
type MockServiceCreateLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateLocationCall) Return(res *storage.CreateLocationResult, err error) *MockServiceCreateLocationCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateLocationCall) Do(f func(context.Context, *storage.CreateLocationPayload) (*storage.CreateLocationResult, error)) *MockServiceCreateLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateLocationCall) DoAndReturn(f func(context.Context, *storage.CreateLocationPayload) (*storage.CreateLocationResult, error)) *MockServiceCreateLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTask mocks base method.
func (m *MockService) CreateTask(arg0 context.Context, arg1 *types.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockServiceMockRecorder) CreateTask(arg0, arg1 any) *MockServiceCreateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockService)(nil).CreateTask), arg0, arg1)
	return &MockServiceCreateTaskCall{Call: call}
}

// MockServiceCreateTaskCall wrap *gomock.Call
type MockServiceCreateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateTaskCall) Return(arg0 error) *MockServiceCreateTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateTaskCall) Do(f func(context.Context, *types.Task) error) *MockServiceCreateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateTaskCall) DoAndReturn(f func(context.Context, *types.Task) error) *MockServiceCreateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateWorkflow mocks base method.
func (m *MockService) CreateWorkflow(arg0 context.Context, arg1 *types.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockServiceMockRecorder) CreateWorkflow(arg0, arg1 any) *MockServiceCreateWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockService)(nil).CreateWorkflow), arg0, arg1)
	return &MockServiceCreateWorkflowCall{Call: call}
}

// MockServiceCreateWorkflowCall wrap *gomock.Call
type MockServiceCreateWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateWorkflowCall) Return(arg0 error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateWorkflowCall) Do(f func(context.Context, *types.Workflow) error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateWorkflowCall) DoAndReturn(f func(context.Context, *types.Workflow) error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAip mocks base method.
func (m *MockService) DeleteAip(ctx context.Context, aipID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAip", ctx, aipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAip indicates an expected call of DeleteAip.
func (mr *MockServiceMockRecorder) DeleteAip(ctx, aipID any) *MockServiceDeleteAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAip", reflect.TypeOf((*MockService)(nil).DeleteAip), ctx, aipID)
	return &MockServiceDeleteAipCall{Call: call}
}

// MockServiceDeleteAipCall wrap *gomock.Call
type MockServiceDeleteAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteAipCall) Return(err error) *MockServiceDeleteAipCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteAipCall) Do(f func(context.Context, uuid.UUID) error) *MockServiceDeleteAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteAipCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockServiceDeleteAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DownloadAip mocks base method.
func (m *MockService) DownloadAip(arg0 context.Context, arg1 *storage.DownloadAipPayload) (*storage.DownloadAipResult, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.DownloadAipResult)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadAip indicates an expected call of DownloadAip.
func (mr *MockServiceMockRecorder) DownloadAip(arg0, arg1 any) *MockServiceDownloadAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAip", reflect.TypeOf((*MockService)(nil).DownloadAip), arg0, arg1)
	return &MockServiceDownloadAipCall{Call: call}
}

// MockServiceDownloadAipCall wrap *gomock.Call
type MockServiceDownloadAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDownloadAipCall) Return(res *storage.DownloadAipResult, body io.ReadCloser, err error) *MockServiceDownloadAipCall {
	c.Call = c.Call.Return(res, body, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDownloadAipCall) Do(f func(context.Context, *storage.DownloadAipPayload) (*storage.DownloadAipResult, io.ReadCloser, error)) *MockServiceDownloadAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDownloadAipCall) DoAndReturn(f func(context.Context, *storage.DownloadAipPayload) (*storage.DownloadAipResult, io.ReadCloser, error)) *MockServiceDownloadAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DownloadAipRequest mocks base method.
func (m *MockService) DownloadAipRequest(arg0 context.Context, arg1 *storage.DownloadAipRequestPayload) (*storage.DownloadAipRequestResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAipRequest", arg0, arg1)
	ret0, _ := ret[0].(*storage.DownloadAipRequestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAipRequest indicates an expected call of DownloadAipRequest.
func (mr *MockServiceMockRecorder) DownloadAipRequest(arg0, arg1 any) *MockServiceDownloadAipRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAipRequest", reflect.TypeOf((*MockService)(nil).DownloadAipRequest), arg0, arg1)
	return &MockServiceDownloadAipRequestCall{Call: call}
}

// MockServiceDownloadAipRequestCall wrap *gomock.Call
type MockServiceDownloadAipRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDownloadAipRequestCall) Return(res *storage.DownloadAipRequestResult, err error) *MockServiceDownloadAipRequestCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDownloadAipRequestCall) Do(f func(context.Context, *storage.DownloadAipRequestPayload) (*storage.DownloadAipRequestResult, error)) *MockServiceDownloadAipRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDownloadAipRequestCall) DoAndReturn(f func(context.Context, *storage.DownloadAipRequestPayload) (*storage.DownloadAipRequestResult, error)) *MockServiceDownloadAipRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAipWorkflows mocks base method.
func (m *MockService) ListAipWorkflows(arg0 context.Context, arg1 *storage.ListAipWorkflowsPayload) (*storage.AIPWorkflows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAipWorkflows", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIPWorkflows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAipWorkflows indicates an expected call of ListAipWorkflows.
func (mr *MockServiceMockRecorder) ListAipWorkflows(arg0, arg1 any) *MockServiceListAipWorkflowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAipWorkflows", reflect.TypeOf((*MockService)(nil).ListAipWorkflows), arg0, arg1)
	return &MockServiceListAipWorkflowsCall{Call: call}
}

// MockServiceListAipWorkflowsCall wrap *gomock.Call
type MockServiceListAipWorkflowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListAipWorkflowsCall) Return(res *storage.AIPWorkflows, err error) *MockServiceListAipWorkflowsCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListAipWorkflowsCall) Do(f func(context.Context, *storage.ListAipWorkflowsPayload) (*storage.AIPWorkflows, error)) *MockServiceListAipWorkflowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListAipWorkflowsCall) DoAndReturn(f func(context.Context, *storage.ListAipWorkflowsPayload) (*storage.AIPWorkflows, error)) *MockServiceListAipWorkflowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAips mocks base method.
func (m *MockService) ListAips(arg0 context.Context, arg1 *storage.ListAipsPayload) (*storage.AIPs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAips", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIPs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAips indicates an expected call of ListAips.
func (mr *MockServiceMockRecorder) ListAips(arg0, arg1 any) *MockServiceListAipsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAips", reflect.TypeOf((*MockService)(nil).ListAips), arg0, arg1)
	return &MockServiceListAipsCall{Call: call}
}

// MockServiceListAipsCall wrap *gomock.Call
type MockServiceListAipsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListAipsCall) Return(res *storage.AIPs, err error) *MockServiceListAipsCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListAipsCall) Do(f func(context.Context, *storage.ListAipsPayload) (*storage.AIPs, error)) *MockServiceListAipsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListAipsCall) DoAndReturn(f func(context.Context, *storage.ListAipsPayload) (*storage.AIPs, error)) *MockServiceListAipsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLocationAips mocks base method.
func (m *MockService) ListLocationAips(arg0 context.Context, arg1 *storage.ListLocationAipsPayload) (storage.AIPCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocationAips", arg0, arg1)
	ret0, _ := ret[0].(storage.AIPCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocationAips indicates an expected call of ListLocationAips.
func (mr *MockServiceMockRecorder) ListLocationAips(arg0, arg1 any) *MockServiceListLocationAipsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocationAips", reflect.TypeOf((*MockService)(nil).ListLocationAips), arg0, arg1)
	return &MockServiceListLocationAipsCall{Call: call}
}

// MockServiceListLocationAipsCall wrap *gomock.Call
type MockServiceListLocationAipsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListLocationAipsCall) Return(res storage.AIPCollection, err error) *MockServiceListLocationAipsCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListLocationAipsCall) Do(f func(context.Context, *storage.ListLocationAipsPayload) (storage.AIPCollection, error)) *MockServiceListLocationAipsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListLocationAipsCall) DoAndReturn(f func(context.Context, *storage.ListLocationAipsPayload) (storage.AIPCollection, error)) *MockServiceListLocationAipsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLocations mocks base method.
func (m *MockService) ListLocations(arg0 context.Context, arg1 *storage.ListLocationsPayload) (storage.LocationCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", arg0, arg1)
	ret0, _ := ret[0].(storage.LocationCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockServiceMockRecorder) ListLocations(arg0, arg1 any) *MockServiceListLocationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockService)(nil).ListLocations), arg0, arg1)
	return &MockServiceListLocationsCall{Call: call}
}

// MockServiceListLocationsCall wrap *gomock.Call
type MockServiceListLocationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListLocationsCall) Return(res storage.LocationCollection, err error) *MockServiceListLocationsCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListLocationsCall) Do(f func(context.Context, *storage.ListLocationsPayload) (storage.LocationCollection, error)) *MockServiceListLocationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListLocationsCall) DoAndReturn(f func(context.Context, *storage.ListLocationsPayload) (storage.LocationCollection, error)) *MockServiceListLocationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Location mocks base method.
func (m *MockService) Location(ctx context.Context, locationID uuid.UUID) (storage0.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location", ctx, locationID)
	ret0, _ := ret[0].(storage0.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Location indicates an expected call of Location.
func (mr *MockServiceMockRecorder) Location(ctx, locationID any) *MockServiceLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockService)(nil).Location), ctx, locationID)
	return &MockServiceLocationCall{Call: call}
}

// MockServiceLocationCall wrap *gomock.Call
type MockServiceLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceLocationCall) Return(arg0 storage0.Location, arg1 error) *MockServiceLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceLocationCall) Do(f func(context.Context, uuid.UUID) (storage0.Location, error)) *MockServiceLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceLocationCall) DoAndReturn(f func(context.Context, uuid.UUID) (storage0.Location, error)) *MockServiceLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Monitor mocks base method.
func (m *MockService) Monitor(arg0 context.Context, arg1 *storage.MonitorPayload, arg2 storage.MonitorServerStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Monitor", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Monitor indicates an expected call of Monitor.
func (mr *MockServiceMockRecorder) Monitor(arg0, arg1, arg2 any) *MockServiceMonitorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Monitor", reflect.TypeOf((*MockService)(nil).Monitor), arg0, arg1, arg2)
	return &MockServiceMonitorCall{Call: call}
}

// MockServiceMonitorCall wrap *gomock.Call
type MockServiceMonitorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceMonitorCall) Return(err error) *MockServiceMonitorCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceMonitorCall) Do(f func(context.Context, *storage.MonitorPayload, storage.MonitorServerStream) error) *MockServiceMonitorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceMonitorCall) DoAndReturn(f func(context.Context, *storage.MonitorPayload, storage.MonitorServerStream) error) *MockServiceMonitorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MonitorRequest mocks base method.
func (m *MockService) MonitorRequest(arg0 context.Context, arg1 *storage.MonitorRequestPayload) (*storage.MonitorRequestResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorRequest", arg0, arg1)
	ret0, _ := ret[0].(*storage.MonitorRequestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonitorRequest indicates an expected call of MonitorRequest.
func (mr *MockServiceMockRecorder) MonitorRequest(arg0, arg1 any) *MockServiceMonitorRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorRequest", reflect.TypeOf((*MockService)(nil).MonitorRequest), arg0, arg1)
	return &MockServiceMonitorRequestCall{Call: call}
}

// MockServiceMonitorRequestCall wrap *gomock.Call
type MockServiceMonitorRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceMonitorRequestCall) Return(res *storage.MonitorRequestResult, err error) *MockServiceMonitorRequestCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceMonitorRequestCall) Do(f func(context.Context, *storage.MonitorRequestPayload) (*storage.MonitorRequestResult, error)) *MockServiceMonitorRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceMonitorRequestCall) DoAndReturn(f func(context.Context, *storage.MonitorRequestPayload) (*storage.MonitorRequestResult, error)) *MockServiceMonitorRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveAip mocks base method.
func (m *MockService) MoveAip(arg0 context.Context, arg1 *storage.MoveAipPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveAip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveAip indicates an expected call of MoveAip.
func (mr *MockServiceMockRecorder) MoveAip(arg0, arg1 any) *MockServiceMoveAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveAip", reflect.TypeOf((*MockService)(nil).MoveAip), arg0, arg1)
	return &MockServiceMoveAipCall{Call: call}
}

// MockServiceMoveAipCall wrap *gomock.Call
type MockServiceMoveAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceMoveAipCall) Return(err error) *MockServiceMoveAipCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceMoveAipCall) Do(f func(context.Context, *storage.MoveAipPayload) error) *MockServiceMoveAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceMoveAipCall) DoAndReturn(f func(context.Context, *storage.MoveAipPayload) error) *MockServiceMoveAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveAipStatus mocks base method.
func (m *MockService) MoveAipStatus(arg0 context.Context, arg1 *storage.MoveAipStatusPayload) (*storage.MoveStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveAipStatus", arg0, arg1)
	ret0, _ := ret[0].(*storage.MoveStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveAipStatus indicates an expected call of MoveAipStatus.
func (mr *MockServiceMockRecorder) MoveAipStatus(arg0, arg1 any) *MockServiceMoveAipStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveAipStatus", reflect.TypeOf((*MockService)(nil).MoveAipStatus), arg0, arg1)
	return &MockServiceMoveAipStatusCall{Call: call}
}

// MockServiceMoveAipStatusCall wrap *gomock.Call
type MockServiceMoveAipStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceMoveAipStatusCall) Return(res *storage.MoveStatusResult, err error) *MockServiceMoveAipStatusCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceMoveAipStatusCall) Do(f func(context.Context, *storage.MoveAipStatusPayload) (*storage.MoveStatusResult, error)) *MockServiceMoveAipStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceMoveAipStatusCall) DoAndReturn(f func(context.Context, *storage.MoveAipStatusPayload) (*storage.MoveStatusResult, error)) *MockServiceMoveAipStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAip mocks base method.
func (m *MockService) ReadAip(ctx context.Context, aipID uuid.UUID) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAip", ctx, aipID)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAip indicates an expected call of ReadAip.
func (mr *MockServiceMockRecorder) ReadAip(ctx, aipID any) *MockServiceReadAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAip", reflect.TypeOf((*MockService)(nil).ReadAip), ctx, aipID)
	return &MockServiceReadAipCall{Call: call}
}

// MockServiceReadAipCall wrap *gomock.Call
type MockServiceReadAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceReadAipCall) Return(arg0 *storage.AIP, arg1 error) *MockServiceReadAipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceReadAipCall) Do(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockServiceReadAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceReadAipCall) DoAndReturn(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockServiceReadAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAipPendingDeletionRequest mocks base method.
func (m *MockService) ReadAipPendingDeletionRequest(ctx context.Context, aipID uuid.UUID) (*types.DeletionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAipPendingDeletionRequest", ctx, aipID)
	ret0, _ := ret[0].(*types.DeletionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAipPendingDeletionRequest indicates an expected call of ReadAipPendingDeletionRequest.
func (mr *MockServiceMockRecorder) ReadAipPendingDeletionRequest(ctx, aipID any) *MockServiceReadAipPendingDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAipPendingDeletionRequest", reflect.TypeOf((*MockService)(nil).ReadAipPendingDeletionRequest), ctx, aipID)
	return &MockServiceReadAipPendingDeletionRequestCall{Call: call}
}

// MockServiceReadAipPendingDeletionRequestCall wrap *gomock.Call
type MockServiceReadAipPendingDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceReadAipPendingDeletionRequestCall) Return(arg0 *types.DeletionRequest, arg1 error) *MockServiceReadAipPendingDeletionRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceReadAipPendingDeletionRequestCall) Do(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockServiceReadAipPendingDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceReadAipPendingDeletionRequestCall) DoAndReturn(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockServiceReadAipPendingDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadDeletionRequest mocks base method.
func (m *MockService) ReadDeletionRequest(ctx context.Context, drID uuid.UUID) (*types.DeletionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDeletionRequest", ctx, drID)
	ret0, _ := ret[0].(*types.DeletionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDeletionRequest indicates an expected call of ReadDeletionRequest.
func (mr *MockServiceMockRecorder) ReadDeletionRequest(ctx, drID any) *MockServiceReadDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDeletionRequest", reflect.TypeOf((*MockService)(nil).ReadDeletionRequest), ctx, drID)
	return &MockServiceReadDeletionRequestCall{Call: call}
}

// MockServiceReadDeletionRequestCall wrap *gomock.Call
type MockServiceReadDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceReadDeletionRequestCall) Return(arg0 *types.DeletionRequest, arg1 error) *MockServiceReadDeletionRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceReadDeletionRequestCall) Do(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockServiceReadDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceReadDeletionRequestCall) DoAndReturn(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockServiceReadDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadLocation mocks base method.
func (m *MockService) ReadLocation(ctx context.Context, locationID uuid.UUID) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLocation", ctx, locationID)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLocation indicates an expected call of ReadLocation.
func (mr *MockServiceMockRecorder) ReadLocation(ctx, locationID any) *MockServiceReadLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLocation", reflect.TypeOf((*MockService)(nil).ReadLocation), ctx, locationID)
	return &MockServiceReadLocationCall{Call: call}
}

// MockServiceReadLocationCall wrap *gomock.Call
type MockServiceReadLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceReadLocationCall) Return(arg0 *storage.Location, arg1 error) *MockServiceReadLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceReadLocationCall) Do(f func(context.Context, uuid.UUID) (*storage.Location, error)) *MockServiceReadLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceReadLocationCall) DoAndReturn(f func(context.Context, uuid.UUID) (*storage.Location, error)) *MockServiceReadLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RejectAip mocks base method.
func (m *MockService) RejectAip(arg0 context.Context, arg1 *storage.RejectAipPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectAip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectAip indicates an expected call of RejectAip.
func (mr *MockServiceMockRecorder) RejectAip(arg0, arg1 any) *MockServiceRejectAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAip", reflect.TypeOf((*MockService)(nil).RejectAip), arg0, arg1)
	return &MockServiceRejectAipCall{Call: call}
}

// MockServiceRejectAipCall wrap *gomock.Call
type MockServiceRejectAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRejectAipCall) Return(err error) *MockServiceRejectAipCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRejectAipCall) Do(f func(context.Context, *storage.RejectAipPayload) error) *MockServiceRejectAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRejectAipCall) DoAndReturn(f func(context.Context, *storage.RejectAipPayload) error) *MockServiceRejectAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequestAipDeletion mocks base method.
func (m *MockService) RequestAipDeletion(arg0 context.Context, arg1 *storage.RequestAipDeletionPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAipDeletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestAipDeletion indicates an expected call of RequestAipDeletion.
func (mr *MockServiceMockRecorder) RequestAipDeletion(arg0, arg1 any) *MockServiceRequestAipDeletionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAipDeletion", reflect.TypeOf((*MockService)(nil).RequestAipDeletion), arg0, arg1)
	return &MockServiceRequestAipDeletionCall{Call: call}
}

// MockServiceRequestAipDeletionCall wrap *gomock.Call
type MockServiceRequestAipDeletionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRequestAipDeletionCall) Return(err error) *MockServiceRequestAipDeletionCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRequestAipDeletionCall) Do(f func(context.Context, *storage.RequestAipDeletionPayload) error) *MockServiceRequestAipDeletionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRequestAipDeletionCall) DoAndReturn(f func(context.Context, *storage.RequestAipDeletionPayload) error) *MockServiceRequestAipDeletionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReviewAipDeletion mocks base method.
func (m *MockService) ReviewAipDeletion(arg0 context.Context, arg1 *storage.ReviewAipDeletionPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewAipDeletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReviewAipDeletion indicates an expected call of ReviewAipDeletion.
func (mr *MockServiceMockRecorder) ReviewAipDeletion(arg0, arg1 any) *MockServiceReviewAipDeletionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewAipDeletion", reflect.TypeOf((*MockService)(nil).ReviewAipDeletion), arg0, arg1)
	return &MockServiceReviewAipDeletionCall{Call: call}
}

// MockServiceReviewAipDeletionCall wrap *gomock.Call
type MockServiceReviewAipDeletionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceReviewAipDeletionCall) Return(err error) *MockServiceReviewAipDeletionCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceReviewAipDeletionCall) Do(f func(context.Context, *storage.ReviewAipDeletionPayload) error) *MockServiceReviewAipDeletionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceReviewAipDeletionCall) DoAndReturn(f func(context.Context, *storage.ReviewAipDeletionPayload) error) *MockServiceReviewAipDeletionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowAip mocks base method.
func (m *MockService) ShowAip(arg0 context.Context, arg1 *storage.ShowAipPayload) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAip indicates an expected call of ShowAip.
func (mr *MockServiceMockRecorder) ShowAip(arg0, arg1 any) *MockServiceShowAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAip", reflect.TypeOf((*MockService)(nil).ShowAip), arg0, arg1)
	return &MockServiceShowAipCall{Call: call}
}

// MockServiceShowAipCall wrap *gomock.Call
type MockServiceShowAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceShowAipCall) Return(res *storage.AIP, err error) *MockServiceShowAipCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceShowAipCall) Do(f func(context.Context, *storage.ShowAipPayload) (*storage.AIP, error)) *MockServiceShowAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceShowAipCall) DoAndReturn(f func(context.Context, *storage.ShowAipPayload) (*storage.AIP, error)) *MockServiceShowAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowLocation mocks base method.
func (m *MockService) ShowLocation(arg0 context.Context, arg1 *storage.ShowLocationPayload) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowLocation", arg0, arg1)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowLocation indicates an expected call of ShowLocation.
func (mr *MockServiceMockRecorder) ShowLocation(arg0, arg1 any) *MockServiceShowLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowLocation", reflect.TypeOf((*MockService)(nil).ShowLocation), arg0, arg1)
	return &MockServiceShowLocationCall{Call: call}
}

// MockServiceShowLocationCall wrap *gomock.Call
type MockServiceShowLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceShowLocationCall) Return(res *storage.Location, err error) *MockServiceShowLocationCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceShowLocationCall) Do(f func(context.Context, *storage.ShowLocationPayload) (*storage.Location, error)) *MockServiceShowLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceShowLocationCall) DoAndReturn(f func(context.Context, *storage.ShowLocationPayload) (*storage.Location, error)) *MockServiceShowLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubmitAip mocks base method.
func (m *MockService) SubmitAip(arg0 context.Context, arg1 *storage.SubmitAipPayload) (*storage.SubmitAIPResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAip", arg0, arg1)
	ret0, _ := ret[0].(*storage.SubmitAIPResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAip indicates an expected call of SubmitAip.
func (mr *MockServiceMockRecorder) SubmitAip(arg0, arg1 any) *MockServiceSubmitAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAip", reflect.TypeOf((*MockService)(nil).SubmitAip), arg0, arg1)
	return &MockServiceSubmitAipCall{Call: call}
}

// MockServiceSubmitAipCall wrap *gomock.Call
type MockServiceSubmitAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSubmitAipCall) Return(res *storage.SubmitAIPResult, err error) *MockServiceSubmitAipCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSubmitAipCall) Do(f func(context.Context, *storage.SubmitAipPayload) (*storage.SubmitAIPResult, error)) *MockServiceSubmitAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSubmitAipCall) DoAndReturn(f func(context.Context, *storage.SubmitAipPayload) (*storage.SubmitAIPResult, error)) *MockServiceSubmitAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAip mocks base method.
func (m *MockService) UpdateAip(arg0 context.Context, arg1 *storage.UpdateAipPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAip indicates an expected call of UpdateAip.
func (mr *MockServiceMockRecorder) UpdateAip(arg0, arg1 any) *MockServiceUpdateAipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAip", reflect.TypeOf((*MockService)(nil).UpdateAip), arg0, arg1)
	return &MockServiceUpdateAipCall{Call: call}
}

// MockServiceUpdateAipCall wrap *gomock.Call
type MockServiceUpdateAipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateAipCall) Return(err error) *MockServiceUpdateAipCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateAipCall) Do(f func(context.Context, *storage.UpdateAipPayload) error) *MockServiceUpdateAipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateAipCall) DoAndReturn(f func(context.Context, *storage.UpdateAipPayload) error) *MockServiceUpdateAipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAipLocationID mocks base method.
func (m *MockService) UpdateAipLocationID(ctx context.Context, aipID, locationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAipLocationID", ctx, aipID, locationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAipLocationID indicates an expected call of UpdateAipLocationID.
func (mr *MockServiceMockRecorder) UpdateAipLocationID(ctx, aipID, locationID any) *MockServiceUpdateAipLocationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAipLocationID", reflect.TypeOf((*MockService)(nil).UpdateAipLocationID), ctx, aipID, locationID)
	return &MockServiceUpdateAipLocationIDCall{Call: call}
}

// MockServiceUpdateAipLocationIDCall wrap *gomock.Call
type MockServiceUpdateAipLocationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateAipLocationIDCall) Return(arg0 error) *MockServiceUpdateAipLocationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateAipLocationIDCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockServiceUpdateAipLocationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateAipLocationIDCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockServiceUpdateAipLocationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAipStatus mocks base method.
func (m *MockService) UpdateAipStatus(ctx context.Context, aipID uuid.UUID, status enums.AIPStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAipStatus", ctx, aipID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAipStatus indicates an expected call of UpdateAipStatus.
func (mr *MockServiceMockRecorder) UpdateAipStatus(ctx, aipID, status any) *MockServiceUpdateAipStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAipStatus", reflect.TypeOf((*MockService)(nil).UpdateAipStatus), ctx, aipID, status)
	return &MockServiceUpdateAipStatusCall{Call: call}
}

// MockServiceUpdateAipStatusCall wrap *gomock.Call
type MockServiceUpdateAipStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateAipStatusCall) Return(arg0 error) *MockServiceUpdateAipStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateAipStatusCall) Do(f func(context.Context, uuid.UUID, enums.AIPStatus) error) *MockServiceUpdateAipStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateAipStatusCall) DoAndReturn(f func(context.Context, uuid.UUID, enums.AIPStatus) error) *MockServiceUpdateAipStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDeletionRequest mocks base method.
func (m *MockService) UpdateDeletionRequest(arg0 context.Context, arg1 int, arg2 persistence.DeletionRequestUpdater) (*types.DeletionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeletionRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.DeletionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeletionRequest indicates an expected call of UpdateDeletionRequest.
func (mr *MockServiceMockRecorder) UpdateDeletionRequest(arg0, arg1, arg2 any) *MockServiceUpdateDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeletionRequest", reflect.TypeOf((*MockService)(nil).UpdateDeletionRequest), arg0, arg1, arg2)
	return &MockServiceUpdateDeletionRequestCall{Call: call}
}

// MockServiceUpdateDeletionRequestCall wrap *gomock.Call
type MockServiceUpdateDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateDeletionRequestCall) Return(arg0 *types.DeletionRequest, arg1 error) *MockServiceUpdateDeletionRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateDeletionRequestCall) Do(f func(context.Context, int, persistence.DeletionRequestUpdater) (*types.DeletionRequest, error)) *MockServiceUpdateDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateDeletionRequestCall) DoAndReturn(f func(context.Context, int, persistence.DeletionRequestUpdater) (*types.DeletionRequest, error)) *MockServiceUpdateDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateTask mocks base method.
func (m *MockService) UpdateTask(arg0 context.Context, arg1 int, arg2 persistence.TaskUpdater) (*types.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockServiceMockRecorder) UpdateTask(arg0, arg1, arg2 any) *MockServiceUpdateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockService)(nil).UpdateTask), arg0, arg1, arg2)
	return &MockServiceUpdateTaskCall{Call: call}
}

// MockServiceUpdateTaskCall wrap *gomock.Call
type MockServiceUpdateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateTaskCall) Return(arg0 *types.Task, arg1 error) *MockServiceUpdateTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateTaskCall) Do(f func(context.Context, int, persistence.TaskUpdater) (*types.Task, error)) *MockServiceUpdateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateTaskCall) DoAndReturn(f func(context.Context, int, persistence.TaskUpdater) (*types.Task, error)) *MockServiceUpdateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWorkflow mocks base method.
func (m *MockService) UpdateWorkflow(arg0 context.Context, arg1 int, arg2 persistence.WorkflowUpdater) (*types.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockServiceMockRecorder) UpdateWorkflow(arg0, arg1, arg2 any) *MockServiceUpdateWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockService)(nil).UpdateWorkflow), arg0, arg1, arg2)
	return &MockServiceUpdateWorkflowCall{Call: call}
}

// MockServiceUpdateWorkflowCall wrap *gomock.Call
type MockServiceUpdateWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateWorkflowCall) Return(arg0 *types.Workflow, arg1 error) *MockServiceUpdateWorkflowCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateWorkflowCall) Do(f func(context.Context, int, persistence.WorkflowUpdater) (*types.Workflow, error)) *MockServiceUpdateWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateWorkflowCall) DoAndReturn(f func(context.Context, int, persistence.WorkflowUpdater) (*types.Workflow, error)) *MockServiceUpdateWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
