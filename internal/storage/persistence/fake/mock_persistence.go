// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/storage/persistence (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/storage/persistence/fake/mock_persistence.go -package=fake github.com/artefactual-sdps/enduro/internal/storage/persistence Storage
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	types "github.com/artefactual-sdps/enduro/internal/storage/types"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateAIP mocks base method.
func (m *MockStorage) CreateAIP(arg0 context.Context, arg1 *storage.AIP) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAIP", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAIP indicates an expected call of CreateAIP.
func (mr *MockStorageMockRecorder) CreateAIP(arg0, arg1 any) *MockStorageCreateAIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAIP", reflect.TypeOf((*MockStorage)(nil).CreateAIP), arg0, arg1)
	return &MockStorageCreateAIPCall{Call: call}
}

// MockStorageCreateAIPCall wrap *gomock.Call
type MockStorageCreateAIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateAIPCall) Return(arg0 *storage.AIP, arg1 error) *MockStorageCreateAIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateAIPCall) Do(f func(context.Context, *storage.AIP) (*storage.AIP, error)) *MockStorageCreateAIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateAIPCall) DoAndReturn(f func(context.Context, *storage.AIP) (*storage.AIP, error)) *MockStorageCreateAIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLocation mocks base method.
func (m *MockStorage) CreateLocation(arg0 context.Context, arg1 *storage.Location, arg2 *types.LocationConfig) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockStorageMockRecorder) CreateLocation(arg0, arg1, arg2 any) *MockStorageCreateLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockStorage)(nil).CreateLocation), arg0, arg1, arg2)
	return &MockStorageCreateLocationCall{Call: call}
}

// MockStorageCreateLocationCall wrap *gomock.Call
type MockStorageCreateLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateLocationCall) Return(arg0 *storage.Location, arg1 error) *MockStorageCreateLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateLocationCall) Do(f func(context.Context, *storage.Location, *types.LocationConfig) (*storage.Location, error)) *MockStorageCreateLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateLocationCall) DoAndReturn(f func(context.Context, *storage.Location, *types.LocationConfig) (*storage.Location, error)) *MockStorageCreateLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAIPs mocks base method.
func (m *MockStorage) ListAIPs(arg0 context.Context) (storage.AIPCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAIPs", arg0)
	ret0, _ := ret[0].(storage.AIPCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAIPs indicates an expected call of ListAIPs.
func (mr *MockStorageMockRecorder) ListAIPs(arg0 any) *MockStorageListAIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAIPs", reflect.TypeOf((*MockStorage)(nil).ListAIPs), arg0)
	return &MockStorageListAIPsCall{Call: call}
}

// MockStorageListAIPsCall wrap *gomock.Call
type MockStorageListAIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageListAIPsCall) Return(arg0 storage.AIPCollection, arg1 error) *MockStorageListAIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageListAIPsCall) Do(f func(context.Context) (storage.AIPCollection, error)) *MockStorageListAIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageListAIPsCall) DoAndReturn(f func(context.Context) (storage.AIPCollection, error)) *MockStorageListAIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLocations mocks base method.
func (m *MockStorage) ListLocations(arg0 context.Context) (storage.LocationCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", arg0)
	ret0, _ := ret[0].(storage.LocationCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockStorageMockRecorder) ListLocations(arg0 any) *MockStorageListLocationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockStorage)(nil).ListLocations), arg0)
	return &MockStorageListLocationsCall{Call: call}
}

// MockStorageListLocationsCall wrap *gomock.Call
type MockStorageListLocationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageListLocationsCall) Return(arg0 storage.LocationCollection, arg1 error) *MockStorageListLocationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageListLocationsCall) Do(f func(context.Context) (storage.LocationCollection, error)) *MockStorageListLocationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageListLocationsCall) DoAndReturn(f func(context.Context) (storage.LocationCollection, error)) *MockStorageListLocationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocationAIPs mocks base method.
func (m *MockStorage) LocationAIPs(arg0 context.Context, arg1 uuid.UUID) (storage.AIPCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationAIPs", arg0, arg1)
	ret0, _ := ret[0].(storage.AIPCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationAIPs indicates an expected call of LocationAIPs.
func (mr *MockStorageMockRecorder) LocationAIPs(arg0, arg1 any) *MockStorageLocationAIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationAIPs", reflect.TypeOf((*MockStorage)(nil).LocationAIPs), arg0, arg1)
	return &MockStorageLocationAIPsCall{Call: call}
}

// MockStorageLocationAIPsCall wrap *gomock.Call
type MockStorageLocationAIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageLocationAIPsCall) Return(arg0 storage.AIPCollection, arg1 error) *MockStorageLocationAIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageLocationAIPsCall) Do(f func(context.Context, uuid.UUID) (storage.AIPCollection, error)) *MockStorageLocationAIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageLocationAIPsCall) DoAndReturn(f func(context.Context, uuid.UUID) (storage.AIPCollection, error)) *MockStorageLocationAIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAIP mocks base method.
func (m *MockStorage) ReadAIP(arg0 context.Context, arg1 uuid.UUID) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAIP", arg0, arg1)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAIP indicates an expected call of ReadAIP.
func (mr *MockStorageMockRecorder) ReadAIP(arg0, arg1 any) *MockStorageReadAIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAIP", reflect.TypeOf((*MockStorage)(nil).ReadAIP), arg0, arg1)
	return &MockStorageReadAIPCall{Call: call}
}

// MockStorageReadAIPCall wrap *gomock.Call
type MockStorageReadAIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadAIPCall) Return(arg0 *storage.AIP, arg1 error) *MockStorageReadAIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadAIPCall) Do(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockStorageReadAIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadAIPCall) DoAndReturn(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockStorageReadAIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadLocation mocks base method.
func (m *MockStorage) ReadLocation(arg0 context.Context, arg1 uuid.UUID) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLocation", arg0, arg1)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLocation indicates an expected call of ReadLocation.
func (mr *MockStorageMockRecorder) ReadLocation(arg0, arg1 any) *MockStorageReadLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLocation", reflect.TypeOf((*MockStorage)(nil).ReadLocation), arg0, arg1)
	return &MockStorageReadLocationCall{Call: call}
}

// MockStorageReadLocationCall wrap *gomock.Call
type MockStorageReadLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadLocationCall) Return(arg0 *storage.Location, arg1 error) *MockStorageReadLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadLocationCall) Do(f func(context.Context, uuid.UUID) (*storage.Location, error)) *MockStorageReadLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadLocationCall) DoAndReturn(f func(context.Context, uuid.UUID) (*storage.Location, error)) *MockStorageReadLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAIPLocationID mocks base method.
func (m *MockStorage) UpdateAIPLocationID(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAIPLocationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAIPLocationID indicates an expected call of UpdateAIPLocationID.
func (mr *MockStorageMockRecorder) UpdateAIPLocationID(arg0, arg1, arg2 any) *MockStorageUpdateAIPLocationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAIPLocationID", reflect.TypeOf((*MockStorage)(nil).UpdateAIPLocationID), arg0, arg1, arg2)
	return &MockStorageUpdateAIPLocationIDCall{Call: call}
}

// MockStorageUpdateAIPLocationIDCall wrap *gomock.Call
type MockStorageUpdateAIPLocationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateAIPLocationIDCall) Return(arg0 error) *MockStorageUpdateAIPLocationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateAIPLocationIDCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockStorageUpdateAIPLocationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateAIPLocationIDCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockStorageUpdateAIPLocationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAIPStatus mocks base method.
func (m *MockStorage) UpdateAIPStatus(arg0 context.Context, arg1 uuid.UUID, arg2 types.AIPStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAIPStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAIPStatus indicates an expected call of UpdateAIPStatus.
func (mr *MockStorageMockRecorder) UpdateAIPStatus(arg0, arg1, arg2 any) *MockStorageUpdateAIPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAIPStatus", reflect.TypeOf((*MockStorage)(nil).UpdateAIPStatus), arg0, arg1, arg2)
	return &MockStorageUpdateAIPStatusCall{Call: call}
}

// MockStorageUpdateAIPStatusCall wrap *gomock.Call
type MockStorageUpdateAIPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateAIPStatusCall) Return(arg0 error) *MockStorageUpdateAIPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateAIPStatusCall) Do(f func(context.Context, uuid.UUID, types.AIPStatus) error) *MockStorageUpdateAIPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateAIPStatusCall) DoAndReturn(f func(context.Context, uuid.UUID, types.AIPStatus) error) *MockStorageUpdateAIPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
