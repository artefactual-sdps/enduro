// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/storage/persistence (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/storage/persistence/fake/mock_persistence.go -package=fake github.com/artefactual-sdps/enduro/internal/storage/persistence Storage
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	storage "github.com/artefactual-sdps/enduro/internal/api/gen/storage"
	enums "github.com/artefactual-sdps/enduro/internal/storage/enums"
	persistence "github.com/artefactual-sdps/enduro/internal/storage/persistence"
	types "github.com/artefactual-sdps/enduro/internal/storage/types"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateAIP mocks base method.
func (m *MockStorage) CreateAIP(ctx context.Context, aip *storage.AIP) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAIP", ctx, aip)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAIP indicates an expected call of CreateAIP.
func (mr *MockStorageMockRecorder) CreateAIP(ctx, aip any) *MockStorageCreateAIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAIP", reflect.TypeOf((*MockStorage)(nil).CreateAIP), ctx, aip)
	return &MockStorageCreateAIPCall{Call: call}
}

// MockStorageCreateAIPCall wrap *gomock.Call
type MockStorageCreateAIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateAIPCall) Return(arg0 *storage.AIP, arg1 error) *MockStorageCreateAIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateAIPCall) Do(f func(context.Context, *storage.AIP) (*storage.AIP, error)) *MockStorageCreateAIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateAIPCall) DoAndReturn(f func(context.Context, *storage.AIP) (*storage.AIP, error)) *MockStorageCreateAIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDeletionRequest mocks base method.
func (m *MockStorage) CreateDeletionRequest(arg0 context.Context, arg1 *types.DeletionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeletionRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeletionRequest indicates an expected call of CreateDeletionRequest.
func (mr *MockStorageMockRecorder) CreateDeletionRequest(arg0, arg1 any) *MockStorageCreateDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeletionRequest", reflect.TypeOf((*MockStorage)(nil).CreateDeletionRequest), arg0, arg1)
	return &MockStorageCreateDeletionRequestCall{Call: call}
}

// MockStorageCreateDeletionRequestCall wrap *gomock.Call
type MockStorageCreateDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateDeletionRequestCall) Return(arg0 error) *MockStorageCreateDeletionRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateDeletionRequestCall) Do(f func(context.Context, *types.DeletionRequest) error) *MockStorageCreateDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateDeletionRequestCall) DoAndReturn(f func(context.Context, *types.DeletionRequest) error) *MockStorageCreateDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLocation mocks base method.
func (m *MockStorage) CreateLocation(ctx context.Context, location *storage.Location, config *types.LocationConfig) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", ctx, location, config)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockStorageMockRecorder) CreateLocation(ctx, location, config any) *MockStorageCreateLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockStorage)(nil).CreateLocation), ctx, location, config)
	return &MockStorageCreateLocationCall{Call: call}
}

// MockStorageCreateLocationCall wrap *gomock.Call
type MockStorageCreateLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateLocationCall) Return(arg0 *storage.Location, arg1 error) *MockStorageCreateLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateLocationCall) Do(f func(context.Context, *storage.Location, *types.LocationConfig) (*storage.Location, error)) *MockStorageCreateLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateLocationCall) DoAndReturn(f func(context.Context, *storage.Location, *types.LocationConfig) (*storage.Location, error)) *MockStorageCreateLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTask mocks base method.
func (m *MockStorage) CreateTask(arg0 context.Context, arg1 *types.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockStorageMockRecorder) CreateTask(arg0, arg1 any) *MockStorageCreateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockStorage)(nil).CreateTask), arg0, arg1)
	return &MockStorageCreateTaskCall{Call: call}
}

// MockStorageCreateTaskCall wrap *gomock.Call
type MockStorageCreateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateTaskCall) Return(arg0 error) *MockStorageCreateTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateTaskCall) Do(f func(context.Context, *types.Task) error) *MockStorageCreateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateTaskCall) DoAndReturn(f func(context.Context, *types.Task) error) *MockStorageCreateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateWorkflow mocks base method.
func (m *MockStorage) CreateWorkflow(arg0 context.Context, arg1 *types.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockStorageMockRecorder) CreateWorkflow(arg0, arg1 any) *MockStorageCreateWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockStorage)(nil).CreateWorkflow), arg0, arg1)
	return &MockStorageCreateWorkflowCall{Call: call}
}

// MockStorageCreateWorkflowCall wrap *gomock.Call
type MockStorageCreateWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateWorkflowCall) Return(arg0 error) *MockStorageCreateWorkflowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateWorkflowCall) Do(f func(context.Context, *types.Workflow) error) *MockStorageCreateWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateWorkflowCall) DoAndReturn(f func(context.Context, *types.Workflow) error) *MockStorageCreateWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAIPs mocks base method.
func (m *MockStorage) ListAIPs(ctx context.Context, payload *storage.ListAipsPayload) (*storage.AIPs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAIPs", ctx, payload)
	ret0, _ := ret[0].(*storage.AIPs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAIPs indicates an expected call of ListAIPs.
func (mr *MockStorageMockRecorder) ListAIPs(ctx, payload any) *MockStorageListAIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAIPs", reflect.TypeOf((*MockStorage)(nil).ListAIPs), ctx, payload)
	return &MockStorageListAIPsCall{Call: call}
}

// MockStorageListAIPsCall wrap *gomock.Call
type MockStorageListAIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageListAIPsCall) Return(arg0 *storage.AIPs, arg1 error) *MockStorageListAIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageListAIPsCall) Do(f func(context.Context, *storage.ListAipsPayload) (*storage.AIPs, error)) *MockStorageListAIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageListAIPsCall) DoAndReturn(f func(context.Context, *storage.ListAipsPayload) (*storage.AIPs, error)) *MockStorageListAIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLocations mocks base method.
func (m *MockStorage) ListLocations(ctx context.Context) (storage.LocationCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", ctx)
	ret0, _ := ret[0].(storage.LocationCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockStorageMockRecorder) ListLocations(ctx any) *MockStorageListLocationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockStorage)(nil).ListLocations), ctx)
	return &MockStorageListLocationsCall{Call: call}
}

// MockStorageListLocationsCall wrap *gomock.Call
type MockStorageListLocationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageListLocationsCall) Return(arg0 storage.LocationCollection, arg1 error) *MockStorageListLocationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageListLocationsCall) Do(f func(context.Context) (storage.LocationCollection, error)) *MockStorageListLocationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageListLocationsCall) DoAndReturn(f func(context.Context) (storage.LocationCollection, error)) *MockStorageListLocationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListWorkflows mocks base method.
func (m *MockStorage) ListWorkflows(ctx context.Context, f *persistence.WorkflowFilter) (storage.AIPWorkflowCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", ctx, f)
	ret0, _ := ret[0].(storage.AIPWorkflowCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockStorageMockRecorder) ListWorkflows(ctx, f any) *MockStorageListWorkflowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockStorage)(nil).ListWorkflows), ctx, f)
	return &MockStorageListWorkflowsCall{Call: call}
}

// MockStorageListWorkflowsCall wrap *gomock.Call
type MockStorageListWorkflowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageListWorkflowsCall) Return(arg0 storage.AIPWorkflowCollection, arg1 error) *MockStorageListWorkflowsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageListWorkflowsCall) Do(f func(context.Context, *persistence.WorkflowFilter) (storage.AIPWorkflowCollection, error)) *MockStorageListWorkflowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageListWorkflowsCall) DoAndReturn(f func(context.Context, *persistence.WorkflowFilter) (storage.AIPWorkflowCollection, error)) *MockStorageListWorkflowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocationAIPs mocks base method.
func (m *MockStorage) LocationAIPs(ctx context.Context, locationID uuid.UUID) (storage.AIPCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationAIPs", ctx, locationID)
	ret0, _ := ret[0].(storage.AIPCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationAIPs indicates an expected call of LocationAIPs.
func (mr *MockStorageMockRecorder) LocationAIPs(ctx, locationID any) *MockStorageLocationAIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationAIPs", reflect.TypeOf((*MockStorage)(nil).LocationAIPs), ctx, locationID)
	return &MockStorageLocationAIPsCall{Call: call}
}

// MockStorageLocationAIPsCall wrap *gomock.Call
type MockStorageLocationAIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageLocationAIPsCall) Return(arg0 storage.AIPCollection, arg1 error) *MockStorageLocationAIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageLocationAIPsCall) Do(f func(context.Context, uuid.UUID) (storage.AIPCollection, error)) *MockStorageLocationAIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageLocationAIPsCall) DoAndReturn(f func(context.Context, uuid.UUID) (storage.AIPCollection, error)) *MockStorageLocationAIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAIP mocks base method.
func (m *MockStorage) ReadAIP(ctx context.Context, aipID uuid.UUID) (*storage.AIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAIP", ctx, aipID)
	ret0, _ := ret[0].(*storage.AIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAIP indicates an expected call of ReadAIP.
func (mr *MockStorageMockRecorder) ReadAIP(ctx, aipID any) *MockStorageReadAIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAIP", reflect.TypeOf((*MockStorage)(nil).ReadAIP), ctx, aipID)
	return &MockStorageReadAIPCall{Call: call}
}

// MockStorageReadAIPCall wrap *gomock.Call
type MockStorageReadAIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadAIPCall) Return(arg0 *storage.AIP, arg1 error) *MockStorageReadAIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadAIPCall) Do(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockStorageReadAIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadAIPCall) DoAndReturn(f func(context.Context, uuid.UUID) (*storage.AIP, error)) *MockStorageReadAIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAipPendingDeletionRequest mocks base method.
func (m *MockStorage) ReadAipPendingDeletionRequest(arg0 context.Context, arg1 uuid.UUID) (*types.DeletionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAipPendingDeletionRequest", arg0, arg1)
	ret0, _ := ret[0].(*types.DeletionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAipPendingDeletionRequest indicates an expected call of ReadAipPendingDeletionRequest.
func (mr *MockStorageMockRecorder) ReadAipPendingDeletionRequest(arg0, arg1 any) *MockStorageReadAipPendingDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAipPendingDeletionRequest", reflect.TypeOf((*MockStorage)(nil).ReadAipPendingDeletionRequest), arg0, arg1)
	return &MockStorageReadAipPendingDeletionRequestCall{Call: call}
}

// MockStorageReadAipPendingDeletionRequestCall wrap *gomock.Call
type MockStorageReadAipPendingDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadAipPendingDeletionRequestCall) Return(arg0 *types.DeletionRequest, arg1 error) *MockStorageReadAipPendingDeletionRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadAipPendingDeletionRequestCall) Do(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockStorageReadAipPendingDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadAipPendingDeletionRequestCall) DoAndReturn(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockStorageReadAipPendingDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadDeletionRequest mocks base method.
func (m *MockStorage) ReadDeletionRequest(arg0 context.Context, arg1 uuid.UUID) (*types.DeletionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDeletionRequest", arg0, arg1)
	ret0, _ := ret[0].(*types.DeletionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDeletionRequest indicates an expected call of ReadDeletionRequest.
func (mr *MockStorageMockRecorder) ReadDeletionRequest(arg0, arg1 any) *MockStorageReadDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDeletionRequest", reflect.TypeOf((*MockStorage)(nil).ReadDeletionRequest), arg0, arg1)
	return &MockStorageReadDeletionRequestCall{Call: call}
}

// MockStorageReadDeletionRequestCall wrap *gomock.Call
type MockStorageReadDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadDeletionRequestCall) Return(arg0 *types.DeletionRequest, arg1 error) *MockStorageReadDeletionRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadDeletionRequestCall) Do(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockStorageReadDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadDeletionRequestCall) DoAndReturn(f func(context.Context, uuid.UUID) (*types.DeletionRequest, error)) *MockStorageReadDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadLocation mocks base method.
func (m *MockStorage) ReadLocation(ctx context.Context, locationID uuid.UUID) (*storage.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLocation", ctx, locationID)
	ret0, _ := ret[0].(*storage.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLocation indicates an expected call of ReadLocation.
func (mr *MockStorageMockRecorder) ReadLocation(ctx, locationID any) *MockStorageReadLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLocation", reflect.TypeOf((*MockStorage)(nil).ReadLocation), ctx, locationID)
	return &MockStorageReadLocationCall{Call: call}
}

// MockStorageReadLocationCall wrap *gomock.Call
type MockStorageReadLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadLocationCall) Return(arg0 *storage.Location, arg1 error) *MockStorageReadLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadLocationCall) Do(f func(context.Context, uuid.UUID) (*storage.Location, error)) *MockStorageReadLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadLocationCall) DoAndReturn(f func(context.Context, uuid.UUID) (*storage.Location, error)) *MockStorageReadLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAIPLocationID mocks base method.
func (m *MockStorage) UpdateAIPLocationID(ctx context.Context, aipID, locationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAIPLocationID", ctx, aipID, locationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAIPLocationID indicates an expected call of UpdateAIPLocationID.
func (mr *MockStorageMockRecorder) UpdateAIPLocationID(ctx, aipID, locationID any) *MockStorageUpdateAIPLocationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAIPLocationID", reflect.TypeOf((*MockStorage)(nil).UpdateAIPLocationID), ctx, aipID, locationID)
	return &MockStorageUpdateAIPLocationIDCall{Call: call}
}

// MockStorageUpdateAIPLocationIDCall wrap *gomock.Call
type MockStorageUpdateAIPLocationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateAIPLocationIDCall) Return(arg0 error) *MockStorageUpdateAIPLocationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateAIPLocationIDCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockStorageUpdateAIPLocationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateAIPLocationIDCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockStorageUpdateAIPLocationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAIPStatus mocks base method.
func (m *MockStorage) UpdateAIPStatus(ctx context.Context, aipID uuid.UUID, status enums.AIPStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAIPStatus", ctx, aipID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAIPStatus indicates an expected call of UpdateAIPStatus.
func (mr *MockStorageMockRecorder) UpdateAIPStatus(ctx, aipID, status any) *MockStorageUpdateAIPStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAIPStatus", reflect.TypeOf((*MockStorage)(nil).UpdateAIPStatus), ctx, aipID, status)
	return &MockStorageUpdateAIPStatusCall{Call: call}
}

// MockStorageUpdateAIPStatusCall wrap *gomock.Call
type MockStorageUpdateAIPStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateAIPStatusCall) Return(arg0 error) *MockStorageUpdateAIPStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateAIPStatusCall) Do(f func(context.Context, uuid.UUID, enums.AIPStatus) error) *MockStorageUpdateAIPStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateAIPStatusCall) DoAndReturn(f func(context.Context, uuid.UUID, enums.AIPStatus) error) *MockStorageUpdateAIPStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDeletionRequest mocks base method.
func (m *MockStorage) UpdateDeletionRequest(arg0 context.Context, arg1 int, arg2 persistence.DeletionRequestUpdater) (*types.DeletionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeletionRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.DeletionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeletionRequest indicates an expected call of UpdateDeletionRequest.
func (mr *MockStorageMockRecorder) UpdateDeletionRequest(arg0, arg1, arg2 any) *MockStorageUpdateDeletionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeletionRequest", reflect.TypeOf((*MockStorage)(nil).UpdateDeletionRequest), arg0, arg1, arg2)
	return &MockStorageUpdateDeletionRequestCall{Call: call}
}

// MockStorageUpdateDeletionRequestCall wrap *gomock.Call
type MockStorageUpdateDeletionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateDeletionRequestCall) Return(arg0 *types.DeletionRequest, arg1 error) *MockStorageUpdateDeletionRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateDeletionRequestCall) Do(f func(context.Context, int, persistence.DeletionRequestUpdater) (*types.DeletionRequest, error)) *MockStorageUpdateDeletionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateDeletionRequestCall) DoAndReturn(f func(context.Context, int, persistence.DeletionRequestUpdater) (*types.DeletionRequest, error)) *MockStorageUpdateDeletionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateTask mocks base method.
func (m *MockStorage) UpdateTask(arg0 context.Context, arg1 int, arg2 persistence.TaskUpdater) (*types.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockStorageMockRecorder) UpdateTask(arg0, arg1, arg2 any) *MockStorageUpdateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockStorage)(nil).UpdateTask), arg0, arg1, arg2)
	return &MockStorageUpdateTaskCall{Call: call}
}

// MockStorageUpdateTaskCall wrap *gomock.Call
type MockStorageUpdateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateTaskCall) Return(arg0 *types.Task, arg1 error) *MockStorageUpdateTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateTaskCall) Do(f func(context.Context, int, persistence.TaskUpdater) (*types.Task, error)) *MockStorageUpdateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateTaskCall) DoAndReturn(f func(context.Context, int, persistence.TaskUpdater) (*types.Task, error)) *MockStorageUpdateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWorkflow mocks base method.
func (m *MockStorage) UpdateWorkflow(arg0 context.Context, arg1 int, arg2 persistence.WorkflowUpdater) (*types.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockStorageMockRecorder) UpdateWorkflow(arg0, arg1, arg2 any) *MockStorageUpdateWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockStorage)(nil).UpdateWorkflow), arg0, arg1, arg2)
	return &MockStorageUpdateWorkflowCall{Call: call}
}

// MockStorageUpdateWorkflowCall wrap *gomock.Call
type MockStorageUpdateWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageUpdateWorkflowCall) Return(arg0 *types.Workflow, arg1 error) *MockStorageUpdateWorkflowCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageUpdateWorkflowCall) Do(f func(context.Context, int, persistence.WorkflowUpdater) (*types.Workflow, error)) *MockStorageUpdateWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageUpdateWorkflowCall) DoAndReturn(f func(context.Context, int, persistence.WorkflowUpdater) (*types.Workflow, error)) *MockStorageUpdateWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
