// Code generated by ent, DO NOT EDIT.

package pkg

import (
	"entgo.io/ent/dialect/sql"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/predicate"
	"github.com/artefactual-sdps/enduro/internal/storage/status"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// AipID applies equality check predicate on the "aip_id" field. It's identical to AipIDEQ.
func AipID(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAipID), v))
	})
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// ObjectKey applies equality check predicate on the "object_key" field. It's identical to ObjectKeyEQ.
func ObjectKey(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectKey), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// AipIDEQ applies the EQ predicate on the "aip_id" field.
func AipIDEQ(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAipID), v))
	})
}

// AipIDNEQ applies the NEQ predicate on the "aip_id" field.
func AipIDNEQ(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAipID), v))
	})
}

// AipIDIn applies the In predicate on the "aip_id" field.
func AipIDIn(vs ...uuid.UUID) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAipID), v...))
	})
}

// AipIDNotIn applies the NotIn predicate on the "aip_id" field.
func AipIDNotIn(vs ...uuid.UUID) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAipID), v...))
	})
}

// AipIDGT applies the GT predicate on the "aip_id" field.
func AipIDGT(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAipID), v))
	})
}

// AipIDGTE applies the GTE predicate on the "aip_id" field.
func AipIDGTE(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAipID), v))
	})
}

// AipIDLT applies the LT predicate on the "aip_id" field.
func AipIDLT(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAipID), v))
	})
}

// AipIDLTE applies the LTE predicate on the "aip_id" field.
func AipIDLTE(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAipID), v))
	})
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocation), v))
	})
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocation), v...))
	})
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocation), v...))
	})
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocation), v))
	})
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocation), v))
	})
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocation), v))
	})
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocation), v))
	})
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocation), v))
	})
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocation), v))
	})
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocation), v))
	})
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocation)))
	})
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocation)))
	})
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocation), v))
	})
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocation), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v status.PackageStatus) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v status.PackageStatus) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...status.PackageStatus) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...status.PackageStatus) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// ObjectKeyEQ applies the EQ predicate on the "object_key" field.
func ObjectKeyEQ(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectKey), v))
	})
}

// ObjectKeyNEQ applies the NEQ predicate on the "object_key" field.
func ObjectKeyNEQ(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectKey), v))
	})
}

// ObjectKeyIn applies the In predicate on the "object_key" field.
func ObjectKeyIn(vs ...uuid.UUID) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldObjectKey), v...))
	})
}

// ObjectKeyNotIn applies the NotIn predicate on the "object_key" field.
func ObjectKeyNotIn(vs ...uuid.UUID) predicate.Pkg {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pkg(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldObjectKey), v...))
	})
}

// ObjectKeyGT applies the GT predicate on the "object_key" field.
func ObjectKeyGT(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectKey), v))
	})
}

// ObjectKeyGTE applies the GTE predicate on the "object_key" field.
func ObjectKeyGTE(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectKey), v))
	})
}

// ObjectKeyLT applies the LT predicate on the "object_key" field.
func ObjectKeyLT(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectKey), v))
	})
}

// ObjectKeyLTE applies the LTE predicate on the "object_key" field.
func ObjectKeyLTE(v uuid.UUID) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectKey), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pkg) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pkg) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pkg) predicate.Pkg {
	return predicate.Pkg(func(s *sql.Selector) {
		p(s.Not())
	})
}
