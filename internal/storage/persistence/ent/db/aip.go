// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/artefactual-sdps/enduro/internal/storage/enums"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/aip"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/location"
	"github.com/google/uuid"
)

// AIP is the model entity for the AIP schema.
type AIP struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AipID holds the value of the "aip_id" field.
	AipID uuid.UUID `json:"aip_id,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID int `json:"location_id,omitempty"`
	// Status holds the value of the "status" field.
	Status enums.AIPStatus `json:"status,omitempty"`
	// ObjectKey holds the value of the "object_key" field.
	ObjectKey uuid.UUID `json:"object_key,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AIPQuery when eager-loading is set.
	Edges        AIPEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AIPEdges holds the relations/edges for other nodes in the graph.
type AIPEdges struct {
	// Location holds the value of the location edge.
	Location *Location `json:"location,omitempty"`
	// Workflows holds the value of the workflows edge.
	Workflows []*Workflow `json:"workflows,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AIPEdges) LocationOrErr() (*Location, error) {
	if e.Location != nil {
		return e.Location, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "location"}
}

// WorkflowsOrErr returns the Workflows value or an error if the edge
// was not loaded in eager-loading.
func (e AIPEdges) WorkflowsOrErr() ([]*Workflow, error) {
	if e.loadedTypes[1] {
		return e.Workflows, nil
	}
	return nil, &NotLoadedError{edge: "workflows"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AIP) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case aip.FieldID, aip.FieldLocationID:
			values[i] = new(sql.NullInt64)
		case aip.FieldName, aip.FieldStatus:
			values[i] = new(sql.NullString)
		case aip.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case aip.FieldAipID, aip.FieldObjectKey:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AIP fields.
func (a *AIP) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case aip.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case aip.FieldAipID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field aip_id", values[i])
			} else if value != nil {
				a.AipID = *value
			}
		case aip.FieldLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value.Valid {
				a.LocationID = int(value.Int64)
			}
		case aip.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = enums.AIPStatus(value.String)
			}
		case aip.FieldObjectKey:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field object_key", values[i])
			} else if value != nil {
				a.ObjectKey = *value
			}
		case aip.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AIP.
// This includes values selected through modifiers, order, etc.
func (a *AIP) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryLocation queries the "location" edge of the AIP entity.
func (a *AIP) QueryLocation() *LocationQuery {
	return NewAIPClient(a.config).QueryLocation(a)
}

// QueryWorkflows queries the "workflows" edge of the AIP entity.
func (a *AIP) QueryWorkflows() *WorkflowQuery {
	return NewAIPClient(a.config).QueryWorkflows(a)
}

// Update returns a builder for updating this AIP.
// Note that you need to call AIP.Unwrap() before calling this method if this AIP
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *AIP) Update() *AIPUpdateOne {
	return NewAIPClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the AIP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *AIP) Unwrap() *AIP {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("db: AIP is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *AIP) String() string {
	var builder strings.Builder
	builder.WriteString("AIP(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("aip_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AipID))
	builder.WriteString(", ")
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", a.LocationID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("object_key=")
	builder.WriteString(fmt.Sprintf("%v", a.ObjectKey))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AIPs is a parsable slice of AIP.
type AIPs []*AIP
