// Code generated by ent, DO NOT EDIT.

package workflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artefactual-sdps/enduro/internal/storage/enums"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldUUID, v))
}

// TemporalID applies equality check predicate on the "temporal_id" field. It's identical to TemporalIDEQ.
func TemporalID(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldTemporalID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldCompletedAt, v))
}

// AipID applies equality check predicate on the "aip_id" field. It's identical to AipIDEQ.
func AipID(v int) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldAipID, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldUUID, v))
}

// TemporalIDEQ applies the EQ predicate on the "temporal_id" field.
func TemporalIDEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldTemporalID, v))
}

// TemporalIDNEQ applies the NEQ predicate on the "temporal_id" field.
func TemporalIDNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldTemporalID, v))
}

// TemporalIDIn applies the In predicate on the "temporal_id" field.
func TemporalIDIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldTemporalID, vs...))
}

// TemporalIDNotIn applies the NotIn predicate on the "temporal_id" field.
func TemporalIDNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldTemporalID, vs...))
}

// TemporalIDGT applies the GT predicate on the "temporal_id" field.
func TemporalIDGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldTemporalID, v))
}

// TemporalIDGTE applies the GTE predicate on the "temporal_id" field.
func TemporalIDGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldTemporalID, v))
}

// TemporalIDLT applies the LT predicate on the "temporal_id" field.
func TemporalIDLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldTemporalID, v))
}

// TemporalIDLTE applies the LTE predicate on the "temporal_id" field.
func TemporalIDLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldTemporalID, v))
}

// TemporalIDContains applies the Contains predicate on the "temporal_id" field.
func TemporalIDContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldTemporalID, v))
}

// TemporalIDHasPrefix applies the HasPrefix predicate on the "temporal_id" field.
func TemporalIDHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldTemporalID, v))
}

// TemporalIDHasSuffix applies the HasSuffix predicate on the "temporal_id" field.
func TemporalIDHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldTemporalID, v))
}

// TemporalIDEqualFold applies the EqualFold predicate on the "temporal_id" field.
func TemporalIDEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldTemporalID, v))
}

// TemporalIDContainsFold applies the ContainsFold predicate on the "temporal_id" field.
func TemporalIDContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldTemporalID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enums.WorkflowType) predicate.Workflow {
	vc := v
	return predicate.Workflow(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enums.WorkflowType) predicate.Workflow {
	vc := v
	return predicate.Workflow(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enums.WorkflowType) predicate.Workflow {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workflow(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enums.WorkflowType) predicate.Workflow {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workflow(sql.FieldNotIn(FieldType, v...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.WorkflowStatus) predicate.Workflow {
	vc := v
	return predicate.Workflow(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.WorkflowStatus) predicate.Workflow {
	vc := v
	return predicate.Workflow(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.WorkflowStatus) predicate.Workflow {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workflow(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.WorkflowStatus) predicate.Workflow {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workflow(sql.FieldNotIn(FieldStatus, v...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldNotNull(FieldCompletedAt))
}

// AipIDEQ applies the EQ predicate on the "aip_id" field.
func AipIDEQ(v int) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldAipID, v))
}

// AipIDNEQ applies the NEQ predicate on the "aip_id" field.
func AipIDNEQ(v int) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldAipID, v))
}

// AipIDIn applies the In predicate on the "aip_id" field.
func AipIDIn(vs ...int) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldAipID, vs...))
}

// AipIDNotIn applies the NotIn predicate on the "aip_id" field.
func AipIDNotIn(vs ...int) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldAipID, vs...))
}

// HasAip applies the HasEdge predicate on the "aip" edge.
func HasAip() predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AipTable, AipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAipWith applies the HasEdge predicate on the "aip" edge with a given conditions (other predicates).
func HasAipWith(preds ...predicate.AIP) predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := newAipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.NotPredicates(p))
}
