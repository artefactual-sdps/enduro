// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/storage/enums"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/aip"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/deletionrequest"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/workflow"
	"github.com/google/uuid"
)

// DeletionRequestCreate is the builder for creating a DeletionRequest entity.
type DeletionRequestCreate struct {
	config
	mutation *DeletionRequestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUUID sets the "uuid" field.
func (drc *DeletionRequestCreate) SetUUID(u uuid.UUID) *DeletionRequestCreate {
	drc.mutation.SetUUID(u)
	return drc
}

// SetRequester sets the "requester" field.
func (drc *DeletionRequestCreate) SetRequester(s string) *DeletionRequestCreate {
	drc.mutation.SetRequester(s)
	return drc
}

// SetRequesterIss sets the "requester_iss" field.
func (drc *DeletionRequestCreate) SetRequesterIss(s string) *DeletionRequestCreate {
	drc.mutation.SetRequesterIss(s)
	return drc
}

// SetRequesterSub sets the "requester_sub" field.
func (drc *DeletionRequestCreate) SetRequesterSub(s string) *DeletionRequestCreate {
	drc.mutation.SetRequesterSub(s)
	return drc
}

// SetReviewer sets the "reviewer" field.
func (drc *DeletionRequestCreate) SetReviewer(s string) *DeletionRequestCreate {
	drc.mutation.SetReviewer(s)
	return drc
}

// SetNillableReviewer sets the "reviewer" field if the given value is not nil.
func (drc *DeletionRequestCreate) SetNillableReviewer(s *string) *DeletionRequestCreate {
	if s != nil {
		drc.SetReviewer(*s)
	}
	return drc
}

// SetReviewerIss sets the "reviewer_iss" field.
func (drc *DeletionRequestCreate) SetReviewerIss(s string) *DeletionRequestCreate {
	drc.mutation.SetReviewerIss(s)
	return drc
}

// SetNillableReviewerIss sets the "reviewer_iss" field if the given value is not nil.
func (drc *DeletionRequestCreate) SetNillableReviewerIss(s *string) *DeletionRequestCreate {
	if s != nil {
		drc.SetReviewerIss(*s)
	}
	return drc
}

// SetReviewerSub sets the "reviewer_sub" field.
func (drc *DeletionRequestCreate) SetReviewerSub(s string) *DeletionRequestCreate {
	drc.mutation.SetReviewerSub(s)
	return drc
}

// SetNillableReviewerSub sets the "reviewer_sub" field if the given value is not nil.
func (drc *DeletionRequestCreate) SetNillableReviewerSub(s *string) *DeletionRequestCreate {
	if s != nil {
		drc.SetReviewerSub(*s)
	}
	return drc
}

// SetReason sets the "reason" field.
func (drc *DeletionRequestCreate) SetReason(s string) *DeletionRequestCreate {
	drc.mutation.SetReason(s)
	return drc
}

// SetStatus sets the "status" field.
func (drc *DeletionRequestCreate) SetStatus(ers enums.DeletionRequestStatus) *DeletionRequestCreate {
	drc.mutation.SetStatus(ers)
	return drc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (drc *DeletionRequestCreate) SetNillableStatus(ers *enums.DeletionRequestStatus) *DeletionRequestCreate {
	if ers != nil {
		drc.SetStatus(*ers)
	}
	return drc
}

// SetRequestedAt sets the "requested_at" field.
func (drc *DeletionRequestCreate) SetRequestedAt(t time.Time) *DeletionRequestCreate {
	drc.mutation.SetRequestedAt(t)
	return drc
}

// SetNillableRequestedAt sets the "requested_at" field if the given value is not nil.
func (drc *DeletionRequestCreate) SetNillableRequestedAt(t *time.Time) *DeletionRequestCreate {
	if t != nil {
		drc.SetRequestedAt(*t)
	}
	return drc
}

// SetReviewedAt sets the "reviewed_at" field.
func (drc *DeletionRequestCreate) SetReviewedAt(t time.Time) *DeletionRequestCreate {
	drc.mutation.SetReviewedAt(t)
	return drc
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (drc *DeletionRequestCreate) SetNillableReviewedAt(t *time.Time) *DeletionRequestCreate {
	if t != nil {
		drc.SetReviewedAt(*t)
	}
	return drc
}

// SetAipID sets the "aip_id" field.
func (drc *DeletionRequestCreate) SetAipID(i int) *DeletionRequestCreate {
	drc.mutation.SetAipID(i)
	return drc
}

// SetWorkflowID sets the "workflow_id" field.
func (drc *DeletionRequestCreate) SetWorkflowID(i int) *DeletionRequestCreate {
	drc.mutation.SetWorkflowID(i)
	return drc
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (drc *DeletionRequestCreate) SetNillableWorkflowID(i *int) *DeletionRequestCreate {
	if i != nil {
		drc.SetWorkflowID(*i)
	}
	return drc
}

// SetAip sets the "aip" edge to the AIP entity.
func (drc *DeletionRequestCreate) SetAip(a *AIP) *DeletionRequestCreate {
	return drc.SetAipID(a.ID)
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (drc *DeletionRequestCreate) SetWorkflow(w *Workflow) *DeletionRequestCreate {
	return drc.SetWorkflowID(w.ID)
}

// Mutation returns the DeletionRequestMutation object of the builder.
func (drc *DeletionRequestCreate) Mutation() *DeletionRequestMutation {
	return drc.mutation
}

// Save creates the DeletionRequest in the database.
func (drc *DeletionRequestCreate) Save(ctx context.Context) (*DeletionRequest, error) {
	drc.defaults()
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DeletionRequestCreate) SaveX(ctx context.Context) *DeletionRequest {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DeletionRequestCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DeletionRequestCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DeletionRequestCreate) defaults() {
	if _, ok := drc.mutation.Status(); !ok {
		v := deletionrequest.DefaultStatus
		drc.mutation.SetStatus(v)
	}
	if _, ok := drc.mutation.RequestedAt(); !ok {
		v := deletionrequest.DefaultRequestedAt()
		drc.mutation.SetRequestedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DeletionRequestCreate) check() error {
	if _, ok := drc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`db: missing required field "DeletionRequest.uuid"`)}
	}
	if _, ok := drc.mutation.Requester(); !ok {
		return &ValidationError{Name: "requester", err: errors.New(`db: missing required field "DeletionRequest.requester"`)}
	}
	if _, ok := drc.mutation.RequesterIss(); !ok {
		return &ValidationError{Name: "requester_iss", err: errors.New(`db: missing required field "DeletionRequest.requester_iss"`)}
	}
	if _, ok := drc.mutation.RequesterSub(); !ok {
		return &ValidationError{Name: "requester_sub", err: errors.New(`db: missing required field "DeletionRequest.requester_sub"`)}
	}
	if _, ok := drc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`db: missing required field "DeletionRequest.reason"`)}
	}
	if _, ok := drc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "DeletionRequest.status"`)}
	}
	if v, ok := drc.mutation.Status(); ok {
		if err := deletionrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.status": %w`, err)}
		}
	}
	if _, ok := drc.mutation.RequestedAt(); !ok {
		return &ValidationError{Name: "requested_at", err: errors.New(`db: missing required field "DeletionRequest.requested_at"`)}
	}
	if _, ok := drc.mutation.AipID(); !ok {
		return &ValidationError{Name: "aip_id", err: errors.New(`db: missing required field "DeletionRequest.aip_id"`)}
	}
	if v, ok := drc.mutation.AipID(); ok {
		if err := deletionrequest.AipIDValidator(v); err != nil {
			return &ValidationError{Name: "aip_id", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.aip_id": %w`, err)}
		}
	}
	if v, ok := drc.mutation.WorkflowID(); ok {
		if err := deletionrequest.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.workflow_id": %w`, err)}
		}
	}
	if len(drc.mutation.AipIDs()) == 0 {
		return &ValidationError{Name: "aip", err: errors.New(`db: missing required edge "DeletionRequest.aip"`)}
	}
	return nil
}

func (drc *DeletionRequestCreate) sqlSave(ctx context.Context) (*DeletionRequest, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DeletionRequestCreate) createSpec() (*DeletionRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &DeletionRequest{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(deletionrequest.Table, sqlgraph.NewFieldSpec(deletionrequest.FieldID, field.TypeInt))
	)
	_spec.OnConflict = drc.conflict
	if value, ok := drc.mutation.UUID(); ok {
		_spec.SetField(deletionrequest.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := drc.mutation.Requester(); ok {
		_spec.SetField(deletionrequest.FieldRequester, field.TypeString, value)
		_node.Requester = value
	}
	if value, ok := drc.mutation.RequesterIss(); ok {
		_spec.SetField(deletionrequest.FieldRequesterIss, field.TypeString, value)
		_node.RequesterIss = value
	}
	if value, ok := drc.mutation.RequesterSub(); ok {
		_spec.SetField(deletionrequest.FieldRequesterSub, field.TypeString, value)
		_node.RequesterSub = value
	}
	if value, ok := drc.mutation.Reviewer(); ok {
		_spec.SetField(deletionrequest.FieldReviewer, field.TypeString, value)
		_node.Reviewer = value
	}
	if value, ok := drc.mutation.ReviewerIss(); ok {
		_spec.SetField(deletionrequest.FieldReviewerIss, field.TypeString, value)
		_node.ReviewerIss = value
	}
	if value, ok := drc.mutation.ReviewerSub(); ok {
		_spec.SetField(deletionrequest.FieldReviewerSub, field.TypeString, value)
		_node.ReviewerSub = value
	}
	if value, ok := drc.mutation.Reason(); ok {
		_spec.SetField(deletionrequest.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := drc.mutation.Status(); ok {
		_spec.SetField(deletionrequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := drc.mutation.RequestedAt(); ok {
		_spec.SetField(deletionrequest.FieldRequestedAt, field.TypeTime, value)
		_node.RequestedAt = value
	}
	if value, ok := drc.mutation.ReviewedAt(); ok {
		_spec.SetField(deletionrequest.FieldReviewedAt, field.TypeTime, value)
		_node.ReviewedAt = value
	}
	if nodes := drc.mutation.AipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletionrequest.AipTable,
			Columns: []string{deletionrequest.AipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AipID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deletionrequest.WorkflowTable,
			Columns: []string{deletionrequest.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletionRequest.Create().
//		SetUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletionRequestUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (drc *DeletionRequestCreate) OnConflict(opts ...sql.ConflictOption) *DeletionRequestUpsertOne {
	drc.conflict = opts
	return &DeletionRequestUpsertOne{
		create: drc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletionRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drc *DeletionRequestCreate) OnConflictColumns(columns ...string) *DeletionRequestUpsertOne {
	drc.conflict = append(drc.conflict, sql.ConflictColumns(columns...))
	return &DeletionRequestUpsertOne{
		create: drc,
	}
}

type (
	// DeletionRequestUpsertOne is the builder for "upsert"-ing
	//  one DeletionRequest node.
	DeletionRequestUpsertOne struct {
		create *DeletionRequestCreate
	}

	// DeletionRequestUpsert is the "OnConflict" setter.
	DeletionRequestUpsert struct {
		*sql.UpdateSet
	}
)

// SetUUID sets the "uuid" field.
func (u *DeletionRequestUpsert) SetUUID(v uuid.UUID) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateUUID() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldUUID)
	return u
}

// SetReviewer sets the "reviewer" field.
func (u *DeletionRequestUpsert) SetReviewer(v string) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldReviewer, v)
	return u
}

// UpdateReviewer sets the "reviewer" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateReviewer() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldReviewer)
	return u
}

// ClearReviewer clears the value of the "reviewer" field.
func (u *DeletionRequestUpsert) ClearReviewer() *DeletionRequestUpsert {
	u.SetNull(deletionrequest.FieldReviewer)
	return u
}

// SetReviewerIss sets the "reviewer_iss" field.
func (u *DeletionRequestUpsert) SetReviewerIss(v string) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldReviewerIss, v)
	return u
}

// UpdateReviewerIss sets the "reviewer_iss" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateReviewerIss() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldReviewerIss)
	return u
}

// ClearReviewerIss clears the value of the "reviewer_iss" field.
func (u *DeletionRequestUpsert) ClearReviewerIss() *DeletionRequestUpsert {
	u.SetNull(deletionrequest.FieldReviewerIss)
	return u
}

// SetReviewerSub sets the "reviewer_sub" field.
func (u *DeletionRequestUpsert) SetReviewerSub(v string) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldReviewerSub, v)
	return u
}

// UpdateReviewerSub sets the "reviewer_sub" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateReviewerSub() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldReviewerSub)
	return u
}

// ClearReviewerSub clears the value of the "reviewer_sub" field.
func (u *DeletionRequestUpsert) ClearReviewerSub() *DeletionRequestUpsert {
	u.SetNull(deletionrequest.FieldReviewerSub)
	return u
}

// SetStatus sets the "status" field.
func (u *DeletionRequestUpsert) SetStatus(v enums.DeletionRequestStatus) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateStatus() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldStatus)
	return u
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *DeletionRequestUpsert) SetReviewedAt(v time.Time) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldReviewedAt, v)
	return u
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateReviewedAt() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldReviewedAt)
	return u
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *DeletionRequestUpsert) ClearReviewedAt() *DeletionRequestUpsert {
	u.SetNull(deletionrequest.FieldReviewedAt)
	return u
}

// SetAipID sets the "aip_id" field.
func (u *DeletionRequestUpsert) SetAipID(v int) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldAipID, v)
	return u
}

// UpdateAipID sets the "aip_id" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateAipID() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldAipID)
	return u
}

// SetWorkflowID sets the "workflow_id" field.
func (u *DeletionRequestUpsert) SetWorkflowID(v int) *DeletionRequestUpsert {
	u.Set(deletionrequest.FieldWorkflowID, v)
	return u
}

// UpdateWorkflowID sets the "workflow_id" field to the value that was provided on create.
func (u *DeletionRequestUpsert) UpdateWorkflowID() *DeletionRequestUpsert {
	u.SetExcluded(deletionrequest.FieldWorkflowID)
	return u
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (u *DeletionRequestUpsert) ClearWorkflowID() *DeletionRequestUpsert {
	u.SetNull(deletionrequest.FieldWorkflowID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DeletionRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DeletionRequestUpsertOne) UpdateNewValues() *DeletionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Requester(); exists {
			s.SetIgnore(deletionrequest.FieldRequester)
		}
		if _, exists := u.create.mutation.RequesterIss(); exists {
			s.SetIgnore(deletionrequest.FieldRequesterIss)
		}
		if _, exists := u.create.mutation.RequesterSub(); exists {
			s.SetIgnore(deletionrequest.FieldRequesterSub)
		}
		if _, exists := u.create.mutation.Reason(); exists {
			s.SetIgnore(deletionrequest.FieldReason)
		}
		if _, exists := u.create.mutation.RequestedAt(); exists {
			s.SetIgnore(deletionrequest.FieldRequestedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeletionRequest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeletionRequestUpsertOne) Ignore() *DeletionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletionRequestUpsertOne) DoNothing() *DeletionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletionRequestCreate.OnConflict
// documentation for more info.
func (u *DeletionRequestUpsertOne) Update(set func(*DeletionRequestUpsert)) *DeletionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletionRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *DeletionRequestUpsertOne) SetUUID(v uuid.UUID) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateUUID() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateUUID()
	})
}

// SetReviewer sets the "reviewer" field.
func (u *DeletionRequestUpsertOne) SetReviewer(v string) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewer(v)
	})
}

// UpdateReviewer sets the "reviewer" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateReviewer() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewer()
	})
}

// ClearReviewer clears the value of the "reviewer" field.
func (u *DeletionRequestUpsertOne) ClearReviewer() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewer()
	})
}

// SetReviewerIss sets the "reviewer_iss" field.
func (u *DeletionRequestUpsertOne) SetReviewerIss(v string) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewerIss(v)
	})
}

// UpdateReviewerIss sets the "reviewer_iss" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateReviewerIss() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewerIss()
	})
}

// ClearReviewerIss clears the value of the "reviewer_iss" field.
func (u *DeletionRequestUpsertOne) ClearReviewerIss() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewerIss()
	})
}

// SetReviewerSub sets the "reviewer_sub" field.
func (u *DeletionRequestUpsertOne) SetReviewerSub(v string) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewerSub(v)
	})
}

// UpdateReviewerSub sets the "reviewer_sub" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateReviewerSub() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewerSub()
	})
}

// ClearReviewerSub clears the value of the "reviewer_sub" field.
func (u *DeletionRequestUpsertOne) ClearReviewerSub() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewerSub()
	})
}

// SetStatus sets the "status" field.
func (u *DeletionRequestUpsertOne) SetStatus(v enums.DeletionRequestStatus) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateStatus() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateStatus()
	})
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *DeletionRequestUpsertOne) SetReviewedAt(v time.Time) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewedAt(v)
	})
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateReviewedAt() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewedAt()
	})
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *DeletionRequestUpsertOne) ClearReviewedAt() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewedAt()
	})
}

// SetAipID sets the "aip_id" field.
func (u *DeletionRequestUpsertOne) SetAipID(v int) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetAipID(v)
	})
}

// UpdateAipID sets the "aip_id" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateAipID() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateAipID()
	})
}

// SetWorkflowID sets the "workflow_id" field.
func (u *DeletionRequestUpsertOne) SetWorkflowID(v int) *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetWorkflowID(v)
	})
}

// UpdateWorkflowID sets the "workflow_id" field to the value that was provided on create.
func (u *DeletionRequestUpsertOne) UpdateWorkflowID() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateWorkflowID()
	})
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (u *DeletionRequestUpsertOne) ClearWorkflowID() *DeletionRequestUpsertOne {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearWorkflowID()
	})
}

// Exec executes the query.
func (u *DeletionRequestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for DeletionRequestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletionRequestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeletionRequestUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeletionRequestUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeletionRequestCreateBulk is the builder for creating many DeletionRequest entities in bulk.
type DeletionRequestCreateBulk struct {
	config
	err      error
	builders []*DeletionRequestCreate
	conflict []sql.ConflictOption
}

// Save creates the DeletionRequest entities in the database.
func (drcb *DeletionRequestCreateBulk) Save(ctx context.Context) ([]*DeletionRequest, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DeletionRequest, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeletionRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = drcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DeletionRequestCreateBulk) SaveX(ctx context.Context) []*DeletionRequest {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DeletionRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DeletionRequestCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletionRequest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletionRequestUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (drcb *DeletionRequestCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeletionRequestUpsertBulk {
	drcb.conflict = opts
	return &DeletionRequestUpsertBulk{
		create: drcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletionRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drcb *DeletionRequestCreateBulk) OnConflictColumns(columns ...string) *DeletionRequestUpsertBulk {
	drcb.conflict = append(drcb.conflict, sql.ConflictColumns(columns...))
	return &DeletionRequestUpsertBulk{
		create: drcb,
	}
}

// DeletionRequestUpsertBulk is the builder for "upsert"-ing
// a bulk of DeletionRequest nodes.
type DeletionRequestUpsertBulk struct {
	create *DeletionRequestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeletionRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DeletionRequestUpsertBulk) UpdateNewValues() *DeletionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Requester(); exists {
				s.SetIgnore(deletionrequest.FieldRequester)
			}
			if _, exists := b.mutation.RequesterIss(); exists {
				s.SetIgnore(deletionrequest.FieldRequesterIss)
			}
			if _, exists := b.mutation.RequesterSub(); exists {
				s.SetIgnore(deletionrequest.FieldRequesterSub)
			}
			if _, exists := b.mutation.Reason(); exists {
				s.SetIgnore(deletionrequest.FieldReason)
			}
			if _, exists := b.mutation.RequestedAt(); exists {
				s.SetIgnore(deletionrequest.FieldRequestedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeletionRequest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeletionRequestUpsertBulk) Ignore() *DeletionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletionRequestUpsertBulk) DoNothing() *DeletionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletionRequestCreateBulk.OnConflict
// documentation for more info.
func (u *DeletionRequestUpsertBulk) Update(set func(*DeletionRequestUpsert)) *DeletionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletionRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *DeletionRequestUpsertBulk) SetUUID(v uuid.UUID) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateUUID() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateUUID()
	})
}

// SetReviewer sets the "reviewer" field.
func (u *DeletionRequestUpsertBulk) SetReviewer(v string) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewer(v)
	})
}

// UpdateReviewer sets the "reviewer" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateReviewer() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewer()
	})
}

// ClearReviewer clears the value of the "reviewer" field.
func (u *DeletionRequestUpsertBulk) ClearReviewer() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewer()
	})
}

// SetReviewerIss sets the "reviewer_iss" field.
func (u *DeletionRequestUpsertBulk) SetReviewerIss(v string) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewerIss(v)
	})
}

// UpdateReviewerIss sets the "reviewer_iss" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateReviewerIss() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewerIss()
	})
}

// ClearReviewerIss clears the value of the "reviewer_iss" field.
func (u *DeletionRequestUpsertBulk) ClearReviewerIss() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewerIss()
	})
}

// SetReviewerSub sets the "reviewer_sub" field.
func (u *DeletionRequestUpsertBulk) SetReviewerSub(v string) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewerSub(v)
	})
}

// UpdateReviewerSub sets the "reviewer_sub" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateReviewerSub() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewerSub()
	})
}

// ClearReviewerSub clears the value of the "reviewer_sub" field.
func (u *DeletionRequestUpsertBulk) ClearReviewerSub() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewerSub()
	})
}

// SetStatus sets the "status" field.
func (u *DeletionRequestUpsertBulk) SetStatus(v enums.DeletionRequestStatus) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateStatus() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateStatus()
	})
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *DeletionRequestUpsertBulk) SetReviewedAt(v time.Time) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetReviewedAt(v)
	})
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateReviewedAt() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateReviewedAt()
	})
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *DeletionRequestUpsertBulk) ClearReviewedAt() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearReviewedAt()
	})
}

// SetAipID sets the "aip_id" field.
func (u *DeletionRequestUpsertBulk) SetAipID(v int) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetAipID(v)
	})
}

// UpdateAipID sets the "aip_id" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateAipID() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateAipID()
	})
}

// SetWorkflowID sets the "workflow_id" field.
func (u *DeletionRequestUpsertBulk) SetWorkflowID(v int) *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.SetWorkflowID(v)
	})
}

// UpdateWorkflowID sets the "workflow_id" field to the value that was provided on create.
func (u *DeletionRequestUpsertBulk) UpdateWorkflowID() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.UpdateWorkflowID()
	})
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (u *DeletionRequestUpsertBulk) ClearWorkflowID() *DeletionRequestUpsertBulk {
	return u.Update(func(s *DeletionRequestUpsert) {
		s.ClearWorkflowID()
	})
}

// Exec executes the query.
func (u *DeletionRequestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the DeletionRequestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for DeletionRequestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletionRequestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
