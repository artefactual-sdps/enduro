// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/pkg"
	"github.com/artefactual-sdps/enduro/internal/storage/status"
	"github.com/google/uuid"
)

// Pkg is the model entity for the Pkg schema.
type Pkg struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AipID holds the value of the "aip_id" field.
	AipID uuid.UUID `json:"aip_id,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Status holds the value of the "status" field.
	Status status.PackageStatus `json:"status,omitempty"`
	// ObjectKey holds the value of the "object_key" field.
	ObjectKey uuid.UUID `json:"object_key,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pkg) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pkg.FieldID:
			values[i] = new(sql.NullInt64)
		case pkg.FieldName, pkg.FieldLocation:
			values[i] = new(sql.NullString)
		case pkg.FieldStatus:
			values[i] = new(status.PackageStatus)
		case pkg.FieldAipID, pkg.FieldObjectKey:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pkg", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pkg fields.
func (pk *Pkg) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pkg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pk.ID = int(value.Int64)
		case pkg.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pk.Name = value.String
			}
		case pkg.FieldAipID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field aip_id", values[i])
			} else if value != nil {
				pk.AipID = *value
			}
		case pkg.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				pk.Location = value.String
			}
		case pkg.FieldStatus:
			if value, ok := values[i].(*status.PackageStatus); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				pk.Status = *value
			}
		case pkg.FieldObjectKey:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field object_key", values[i])
			} else if value != nil {
				pk.ObjectKey = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pkg.
// Note that you need to call Pkg.Unwrap() before calling this method if this Pkg
// was returned from a transaction, and the transaction was committed or rolled back.
func (pk *Pkg) Update() *PkgUpdateOne {
	return (&PkgClient{config: pk.config}).UpdateOne(pk)
}

// Unwrap unwraps the Pkg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pk *Pkg) Unwrap() *Pkg {
	_tx, ok := pk.config.driver.(*txDriver)
	if !ok {
		panic("db: Pkg is not a transactional entity")
	}
	pk.config.driver = _tx.drv
	return pk
}

// String implements the fmt.Stringer.
func (pk *Pkg) String() string {
	var builder strings.Builder
	builder.WriteString("Pkg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pk.ID))
	builder.WriteString("name=")
	builder.WriteString(pk.Name)
	builder.WriteString(", ")
	builder.WriteString("aip_id=")
	builder.WriteString(fmt.Sprintf("%v", pk.AipID))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(pk.Location)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pk.Status))
	builder.WriteString(", ")
	builder.WriteString("object_key=")
	builder.WriteString(fmt.Sprintf("%v", pk.ObjectKey))
	builder.WriteByte(')')
	return builder.String()
}

// Pkgs is a parsable slice of Pkg.
type Pkgs []*Pkg

func (pk Pkgs) config(cfg config) {
	for _i := range pk {
		pk[_i].config = cfg
	}
}
