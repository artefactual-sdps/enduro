// Code generated by ent, DO NOT EDIT.

package deletionrequest

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artefactual-sdps/enduro/internal/storage/enums"
)

const (
	// Label holds the string label denoting the deletionrequest type in the database.
	Label = "deletion_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldRequester holds the string denoting the requester field in the database.
	FieldRequester = "requester"
	// FieldRequesterIss holds the string denoting the requester_iss field in the database.
	FieldRequesterIss = "requester_iss"
	// FieldRequesterSub holds the string denoting the requester_sub field in the database.
	FieldRequesterSub = "requester_sub"
	// FieldReviewer holds the string denoting the reviewer field in the database.
	FieldReviewer = "reviewer"
	// FieldReviewerIss holds the string denoting the reviewer_iss field in the database.
	FieldReviewerIss = "reviewer_iss"
	// FieldReviewerSub holds the string denoting the reviewer_sub field in the database.
	FieldReviewerSub = "reviewer_sub"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRequestedAt holds the string denoting the requested_at field in the database.
	FieldRequestedAt = "requested_at"
	// FieldReviewedAt holds the string denoting the reviewed_at field in the database.
	FieldReviewedAt = "reviewed_at"
	// FieldAipID holds the string denoting the aip_id field in the database.
	FieldAipID = "aip_id"
	// FieldWorkflowID holds the string denoting the workflow_id field in the database.
	FieldWorkflowID = "workflow_id"
	// EdgeAip holds the string denoting the aip edge name in mutations.
	EdgeAip = "aip"
	// EdgeWorkflow holds the string denoting the workflow edge name in mutations.
	EdgeWorkflow = "workflow"
	// Table holds the table name of the deletionrequest in the database.
	Table = "deletion_request"
	// AipTable is the table that holds the aip relation/edge.
	AipTable = "deletion_request"
	// AipInverseTable is the table name for the AIP entity.
	// It exists in this package in order to avoid circular dependency with the "aip" package.
	AipInverseTable = "aip"
	// AipColumn is the table column denoting the aip relation/edge.
	AipColumn = "aip_id"
	// WorkflowTable is the table that holds the workflow relation/edge.
	WorkflowTable = "deletion_request"
	// WorkflowInverseTable is the table name for the Workflow entity.
	// It exists in this package in order to avoid circular dependency with the "workflow" package.
	WorkflowInverseTable = "workflow"
	// WorkflowColumn is the table column denoting the workflow relation/edge.
	WorkflowColumn = "workflow_id"
)

// Columns holds all SQL columns for deletionrequest fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldRequester,
	FieldRequesterIss,
	FieldRequesterSub,
	FieldReviewer,
	FieldReviewerIss,
	FieldReviewerSub,
	FieldReason,
	FieldStatus,
	FieldRequestedAt,
	FieldReviewedAt,
	FieldAipID,
	FieldWorkflowID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRequestedAt holds the default value on creation for the "requested_at" field.
	DefaultRequestedAt func() time.Time
	// AipIDValidator is a validator for the "aip_id" field. It is called by the builders before save.
	AipIDValidator func(int) error
	// WorkflowIDValidator is a validator for the "workflow_id" field. It is called by the builders before save.
	WorkflowIDValidator func(int) error
)

const DefaultStatus enums.DeletionRequestStatus = "pending"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.DeletionRequestStatus) error {
	switch s.String() {
	case "pending", "approved", "rejected":
		return nil
	default:
		return fmt.Errorf("deletionrequest: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the DeletionRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByRequester orders the results by the requester field.
func ByRequester(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequester, opts...).ToFunc()
}

// ByRequesterIss orders the results by the requester_iss field.
func ByRequesterIss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequesterIss, opts...).ToFunc()
}

// ByRequesterSub orders the results by the requester_sub field.
func ByRequesterSub(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequesterSub, opts...).ToFunc()
}

// ByReviewer orders the results by the reviewer field.
func ByReviewer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewer, opts...).ToFunc()
}

// ByReviewerIss orders the results by the reviewer_iss field.
func ByReviewerIss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewerIss, opts...).ToFunc()
}

// ByReviewerSub orders the results by the reviewer_sub field.
func ByReviewerSub(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewerSub, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRequestedAt orders the results by the requested_at field.
func ByRequestedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestedAt, opts...).ToFunc()
}

// ByReviewedAt orders the results by the reviewed_at field.
func ByReviewedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewedAt, opts...).ToFunc()
}

// ByAipID orders the results by the aip_id field.
func ByAipID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAipID, opts...).ToFunc()
}

// ByWorkflowID orders the results by the workflow_id field.
func ByWorkflowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowID, opts...).ToFunc()
}

// ByAipField orders the results by aip field.
func ByAipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAipStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkflowField orders the results by workflow field.
func ByWorkflowField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowStep(), sql.OrderByField(field, opts...))
	}
}
func newAipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AipTable, AipColumn),
	)
}
func newWorkflowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, WorkflowTable, WorkflowColumn),
	)
}
