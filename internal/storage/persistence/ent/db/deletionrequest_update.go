// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/storage/enums"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/aip"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/deletionrequest"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/predicate"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/workflow"
	"github.com/google/uuid"
)

// DeletionRequestUpdate is the builder for updating DeletionRequest entities.
type DeletionRequestUpdate struct {
	config
	hooks    []Hook
	mutation *DeletionRequestMutation
}

// Where appends a list predicates to the DeletionRequestUpdate builder.
func (dru *DeletionRequestUpdate) Where(ps ...predicate.DeletionRequest) *DeletionRequestUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetUUID sets the "uuid" field.
func (dru *DeletionRequestUpdate) SetUUID(u uuid.UUID) *DeletionRequestUpdate {
	dru.mutation.SetUUID(u)
	return dru
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableUUID(u *uuid.UUID) *DeletionRequestUpdate {
	if u != nil {
		dru.SetUUID(*u)
	}
	return dru
}

// SetReviewer sets the "reviewer" field.
func (dru *DeletionRequestUpdate) SetReviewer(s string) *DeletionRequestUpdate {
	dru.mutation.SetReviewer(s)
	return dru
}

// SetNillableReviewer sets the "reviewer" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableReviewer(s *string) *DeletionRequestUpdate {
	if s != nil {
		dru.SetReviewer(*s)
	}
	return dru
}

// ClearReviewer clears the value of the "reviewer" field.
func (dru *DeletionRequestUpdate) ClearReviewer() *DeletionRequestUpdate {
	dru.mutation.ClearReviewer()
	return dru
}

// SetReviewerIss sets the "reviewer_iss" field.
func (dru *DeletionRequestUpdate) SetReviewerIss(s string) *DeletionRequestUpdate {
	dru.mutation.SetReviewerIss(s)
	return dru
}

// SetNillableReviewerIss sets the "reviewer_iss" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableReviewerIss(s *string) *DeletionRequestUpdate {
	if s != nil {
		dru.SetReviewerIss(*s)
	}
	return dru
}

// ClearReviewerIss clears the value of the "reviewer_iss" field.
func (dru *DeletionRequestUpdate) ClearReviewerIss() *DeletionRequestUpdate {
	dru.mutation.ClearReviewerIss()
	return dru
}

// SetReviewerSub sets the "reviewer_sub" field.
func (dru *DeletionRequestUpdate) SetReviewerSub(s string) *DeletionRequestUpdate {
	dru.mutation.SetReviewerSub(s)
	return dru
}

// SetNillableReviewerSub sets the "reviewer_sub" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableReviewerSub(s *string) *DeletionRequestUpdate {
	if s != nil {
		dru.SetReviewerSub(*s)
	}
	return dru
}

// ClearReviewerSub clears the value of the "reviewer_sub" field.
func (dru *DeletionRequestUpdate) ClearReviewerSub() *DeletionRequestUpdate {
	dru.mutation.ClearReviewerSub()
	return dru
}

// SetStatus sets the "status" field.
func (dru *DeletionRequestUpdate) SetStatus(ers enums.DeletionRequestStatus) *DeletionRequestUpdate {
	dru.mutation.SetStatus(ers)
	return dru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableStatus(ers *enums.DeletionRequestStatus) *DeletionRequestUpdate {
	if ers != nil {
		dru.SetStatus(*ers)
	}
	return dru
}

// SetReviewedAt sets the "reviewed_at" field.
func (dru *DeletionRequestUpdate) SetReviewedAt(t time.Time) *DeletionRequestUpdate {
	dru.mutation.SetReviewedAt(t)
	return dru
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableReviewedAt(t *time.Time) *DeletionRequestUpdate {
	if t != nil {
		dru.SetReviewedAt(*t)
	}
	return dru
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (dru *DeletionRequestUpdate) ClearReviewedAt() *DeletionRequestUpdate {
	dru.mutation.ClearReviewedAt()
	return dru
}

// SetAipID sets the "aip_id" field.
func (dru *DeletionRequestUpdate) SetAipID(i int) *DeletionRequestUpdate {
	dru.mutation.SetAipID(i)
	return dru
}

// SetNillableAipID sets the "aip_id" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableAipID(i *int) *DeletionRequestUpdate {
	if i != nil {
		dru.SetAipID(*i)
	}
	return dru
}

// SetWorkflowID sets the "workflow_id" field.
func (dru *DeletionRequestUpdate) SetWorkflowID(i int) *DeletionRequestUpdate {
	dru.mutation.SetWorkflowID(i)
	return dru
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (dru *DeletionRequestUpdate) SetNillableWorkflowID(i *int) *DeletionRequestUpdate {
	if i != nil {
		dru.SetWorkflowID(*i)
	}
	return dru
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (dru *DeletionRequestUpdate) ClearWorkflowID() *DeletionRequestUpdate {
	dru.mutation.ClearWorkflowID()
	return dru
}

// SetAip sets the "aip" edge to the AIP entity.
func (dru *DeletionRequestUpdate) SetAip(a *AIP) *DeletionRequestUpdate {
	return dru.SetAipID(a.ID)
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (dru *DeletionRequestUpdate) SetWorkflow(w *Workflow) *DeletionRequestUpdate {
	return dru.SetWorkflowID(w.ID)
}

// Mutation returns the DeletionRequestMutation object of the builder.
func (dru *DeletionRequestUpdate) Mutation() *DeletionRequestMutation {
	return dru.mutation
}

// ClearAip clears the "aip" edge to the AIP entity.
func (dru *DeletionRequestUpdate) ClearAip() *DeletionRequestUpdate {
	dru.mutation.ClearAip()
	return dru
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (dru *DeletionRequestUpdate) ClearWorkflow() *DeletionRequestUpdate {
	dru.mutation.ClearWorkflow()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DeletionRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DeletionRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DeletionRequestUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DeletionRequestUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dru *DeletionRequestUpdate) check() error {
	if v, ok := dru.mutation.Status(); ok {
		if err := deletionrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.status": %w`, err)}
		}
	}
	if v, ok := dru.mutation.AipID(); ok {
		if err := deletionrequest.AipIDValidator(v); err != nil {
			return &ValidationError{Name: "aip_id", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.aip_id": %w`, err)}
		}
	}
	if v, ok := dru.mutation.WorkflowID(); ok {
		if err := deletionrequest.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.workflow_id": %w`, err)}
		}
	}
	if dru.mutation.AipCleared() && len(dru.mutation.AipIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "DeletionRequest.aip"`)
	}
	return nil
}

func (dru *DeletionRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deletionrequest.Table, deletionrequest.Columns, sqlgraph.NewFieldSpec(deletionrequest.FieldID, field.TypeInt))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.UUID(); ok {
		_spec.SetField(deletionrequest.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := dru.mutation.Reviewer(); ok {
		_spec.SetField(deletionrequest.FieldReviewer, field.TypeString, value)
	}
	if dru.mutation.ReviewerCleared() {
		_spec.ClearField(deletionrequest.FieldReviewer, field.TypeString)
	}
	if value, ok := dru.mutation.ReviewerIss(); ok {
		_spec.SetField(deletionrequest.FieldReviewerIss, field.TypeString, value)
	}
	if dru.mutation.ReviewerIssCleared() {
		_spec.ClearField(deletionrequest.FieldReviewerIss, field.TypeString)
	}
	if value, ok := dru.mutation.ReviewerSub(); ok {
		_spec.SetField(deletionrequest.FieldReviewerSub, field.TypeString, value)
	}
	if dru.mutation.ReviewerSubCleared() {
		_spec.ClearField(deletionrequest.FieldReviewerSub, field.TypeString)
	}
	if value, ok := dru.mutation.Status(); ok {
		_spec.SetField(deletionrequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dru.mutation.ReviewedAt(); ok {
		_spec.SetField(deletionrequest.FieldReviewedAt, field.TypeTime, value)
	}
	if dru.mutation.ReviewedAtCleared() {
		_spec.ClearField(deletionrequest.FieldReviewedAt, field.TypeTime)
	}
	if dru.mutation.AipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletionrequest.AipTable,
			Columns: []string{deletionrequest.AipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.AipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletionrequest.AipTable,
			Columns: []string{deletionrequest.AipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deletionrequest.WorkflowTable,
			Columns: []string{deletionrequest.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deletionrequest.WorkflowTable,
			Columns: []string{deletionrequest.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletionrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DeletionRequestUpdateOne is the builder for updating a single DeletionRequest entity.
type DeletionRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeletionRequestMutation
}

// SetUUID sets the "uuid" field.
func (druo *DeletionRequestUpdateOne) SetUUID(u uuid.UUID) *DeletionRequestUpdateOne {
	druo.mutation.SetUUID(u)
	return druo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableUUID(u *uuid.UUID) *DeletionRequestUpdateOne {
	if u != nil {
		druo.SetUUID(*u)
	}
	return druo
}

// SetReviewer sets the "reviewer" field.
func (druo *DeletionRequestUpdateOne) SetReviewer(s string) *DeletionRequestUpdateOne {
	druo.mutation.SetReviewer(s)
	return druo
}

// SetNillableReviewer sets the "reviewer" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableReviewer(s *string) *DeletionRequestUpdateOne {
	if s != nil {
		druo.SetReviewer(*s)
	}
	return druo
}

// ClearReviewer clears the value of the "reviewer" field.
func (druo *DeletionRequestUpdateOne) ClearReviewer() *DeletionRequestUpdateOne {
	druo.mutation.ClearReviewer()
	return druo
}

// SetReviewerIss sets the "reviewer_iss" field.
func (druo *DeletionRequestUpdateOne) SetReviewerIss(s string) *DeletionRequestUpdateOne {
	druo.mutation.SetReviewerIss(s)
	return druo
}

// SetNillableReviewerIss sets the "reviewer_iss" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableReviewerIss(s *string) *DeletionRequestUpdateOne {
	if s != nil {
		druo.SetReviewerIss(*s)
	}
	return druo
}

// ClearReviewerIss clears the value of the "reviewer_iss" field.
func (druo *DeletionRequestUpdateOne) ClearReviewerIss() *DeletionRequestUpdateOne {
	druo.mutation.ClearReviewerIss()
	return druo
}

// SetReviewerSub sets the "reviewer_sub" field.
func (druo *DeletionRequestUpdateOne) SetReviewerSub(s string) *DeletionRequestUpdateOne {
	druo.mutation.SetReviewerSub(s)
	return druo
}

// SetNillableReviewerSub sets the "reviewer_sub" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableReviewerSub(s *string) *DeletionRequestUpdateOne {
	if s != nil {
		druo.SetReviewerSub(*s)
	}
	return druo
}

// ClearReviewerSub clears the value of the "reviewer_sub" field.
func (druo *DeletionRequestUpdateOne) ClearReviewerSub() *DeletionRequestUpdateOne {
	druo.mutation.ClearReviewerSub()
	return druo
}

// SetStatus sets the "status" field.
func (druo *DeletionRequestUpdateOne) SetStatus(ers enums.DeletionRequestStatus) *DeletionRequestUpdateOne {
	druo.mutation.SetStatus(ers)
	return druo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableStatus(ers *enums.DeletionRequestStatus) *DeletionRequestUpdateOne {
	if ers != nil {
		druo.SetStatus(*ers)
	}
	return druo
}

// SetReviewedAt sets the "reviewed_at" field.
func (druo *DeletionRequestUpdateOne) SetReviewedAt(t time.Time) *DeletionRequestUpdateOne {
	druo.mutation.SetReviewedAt(t)
	return druo
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableReviewedAt(t *time.Time) *DeletionRequestUpdateOne {
	if t != nil {
		druo.SetReviewedAt(*t)
	}
	return druo
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (druo *DeletionRequestUpdateOne) ClearReviewedAt() *DeletionRequestUpdateOne {
	druo.mutation.ClearReviewedAt()
	return druo
}

// SetAipID sets the "aip_id" field.
func (druo *DeletionRequestUpdateOne) SetAipID(i int) *DeletionRequestUpdateOne {
	druo.mutation.SetAipID(i)
	return druo
}

// SetNillableAipID sets the "aip_id" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableAipID(i *int) *DeletionRequestUpdateOne {
	if i != nil {
		druo.SetAipID(*i)
	}
	return druo
}

// SetWorkflowID sets the "workflow_id" field.
func (druo *DeletionRequestUpdateOne) SetWorkflowID(i int) *DeletionRequestUpdateOne {
	druo.mutation.SetWorkflowID(i)
	return druo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (druo *DeletionRequestUpdateOne) SetNillableWorkflowID(i *int) *DeletionRequestUpdateOne {
	if i != nil {
		druo.SetWorkflowID(*i)
	}
	return druo
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (druo *DeletionRequestUpdateOne) ClearWorkflowID() *DeletionRequestUpdateOne {
	druo.mutation.ClearWorkflowID()
	return druo
}

// SetAip sets the "aip" edge to the AIP entity.
func (druo *DeletionRequestUpdateOne) SetAip(a *AIP) *DeletionRequestUpdateOne {
	return druo.SetAipID(a.ID)
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (druo *DeletionRequestUpdateOne) SetWorkflow(w *Workflow) *DeletionRequestUpdateOne {
	return druo.SetWorkflowID(w.ID)
}

// Mutation returns the DeletionRequestMutation object of the builder.
func (druo *DeletionRequestUpdateOne) Mutation() *DeletionRequestMutation {
	return druo.mutation
}

// ClearAip clears the "aip" edge to the AIP entity.
func (druo *DeletionRequestUpdateOne) ClearAip() *DeletionRequestUpdateOne {
	druo.mutation.ClearAip()
	return druo
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (druo *DeletionRequestUpdateOne) ClearWorkflow() *DeletionRequestUpdateOne {
	druo.mutation.ClearWorkflow()
	return druo
}

// Where appends a list predicates to the DeletionRequestUpdate builder.
func (druo *DeletionRequestUpdateOne) Where(ps ...predicate.DeletionRequest) *DeletionRequestUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DeletionRequestUpdateOne) Select(field string, fields ...string) *DeletionRequestUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DeletionRequest entity.
func (druo *DeletionRequestUpdateOne) Save(ctx context.Context) (*DeletionRequest, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DeletionRequestUpdateOne) SaveX(ctx context.Context) *DeletionRequest {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DeletionRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DeletionRequestUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (druo *DeletionRequestUpdateOne) check() error {
	if v, ok := druo.mutation.Status(); ok {
		if err := deletionrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.status": %w`, err)}
		}
	}
	if v, ok := druo.mutation.AipID(); ok {
		if err := deletionrequest.AipIDValidator(v); err != nil {
			return &ValidationError{Name: "aip_id", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.aip_id": %w`, err)}
		}
	}
	if v, ok := druo.mutation.WorkflowID(); ok {
		if err := deletionrequest.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`db: validator failed for field "DeletionRequest.workflow_id": %w`, err)}
		}
	}
	if druo.mutation.AipCleared() && len(druo.mutation.AipIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "DeletionRequest.aip"`)
	}
	return nil
}

func (druo *DeletionRequestUpdateOne) sqlSave(ctx context.Context) (_node *DeletionRequest, err error) {
	if err := druo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deletionrequest.Table, deletionrequest.Columns, sqlgraph.NewFieldSpec(deletionrequest.FieldID, field.TypeInt))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "DeletionRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deletionrequest.FieldID)
		for _, f := range fields {
			if !deletionrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != deletionrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.UUID(); ok {
		_spec.SetField(deletionrequest.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := druo.mutation.Reviewer(); ok {
		_spec.SetField(deletionrequest.FieldReviewer, field.TypeString, value)
	}
	if druo.mutation.ReviewerCleared() {
		_spec.ClearField(deletionrequest.FieldReviewer, field.TypeString)
	}
	if value, ok := druo.mutation.ReviewerIss(); ok {
		_spec.SetField(deletionrequest.FieldReviewerIss, field.TypeString, value)
	}
	if druo.mutation.ReviewerIssCleared() {
		_spec.ClearField(deletionrequest.FieldReviewerIss, field.TypeString)
	}
	if value, ok := druo.mutation.ReviewerSub(); ok {
		_spec.SetField(deletionrequest.FieldReviewerSub, field.TypeString, value)
	}
	if druo.mutation.ReviewerSubCleared() {
		_spec.ClearField(deletionrequest.FieldReviewerSub, field.TypeString)
	}
	if value, ok := druo.mutation.Status(); ok {
		_spec.SetField(deletionrequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := druo.mutation.ReviewedAt(); ok {
		_spec.SetField(deletionrequest.FieldReviewedAt, field.TypeTime, value)
	}
	if druo.mutation.ReviewedAtCleared() {
		_spec.ClearField(deletionrequest.FieldReviewedAt, field.TypeTime)
	}
	if druo.mutation.AipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletionrequest.AipTable,
			Columns: []string{deletionrequest.AipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.AipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletionrequest.AipTable,
			Columns: []string{deletionrequest.AipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(aip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deletionrequest.WorkflowTable,
			Columns: []string{deletionrequest.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deletionrequest.WorkflowTable,
			Columns: []string{deletionrequest.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeletionRequest{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletionrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
