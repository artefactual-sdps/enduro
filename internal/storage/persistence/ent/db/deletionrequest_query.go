// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/aip"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/deletionrequest"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/predicate"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/workflow"
)

// DeletionRequestQuery is the builder for querying DeletionRequest entities.
type DeletionRequestQuery struct {
	config
	ctx          *QueryContext
	order        []deletionrequest.OrderOption
	inters       []Interceptor
	predicates   []predicate.DeletionRequest
	withAip      *AIPQuery
	withWorkflow *WorkflowQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeletionRequestQuery builder.
func (drq *DeletionRequestQuery) Where(ps ...predicate.DeletionRequest) *DeletionRequestQuery {
	drq.predicates = append(drq.predicates, ps...)
	return drq
}

// Limit the number of records to be returned by this query.
func (drq *DeletionRequestQuery) Limit(limit int) *DeletionRequestQuery {
	drq.ctx.Limit = &limit
	return drq
}

// Offset to start from.
func (drq *DeletionRequestQuery) Offset(offset int) *DeletionRequestQuery {
	drq.ctx.Offset = &offset
	return drq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drq *DeletionRequestQuery) Unique(unique bool) *DeletionRequestQuery {
	drq.ctx.Unique = &unique
	return drq
}

// Order specifies how the records should be ordered.
func (drq *DeletionRequestQuery) Order(o ...deletionrequest.OrderOption) *DeletionRequestQuery {
	drq.order = append(drq.order, o...)
	return drq
}

// QueryAip chains the current query on the "aip" edge.
func (drq *DeletionRequestQuery) QueryAip() *AIPQuery {
	query := (&AIPClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deletionrequest.Table, deletionrequest.FieldID, selector),
			sqlgraph.To(aip.Table, aip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deletionrequest.AipTable, deletionrequest.AipColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflow chains the current query on the "workflow" edge.
func (drq *DeletionRequestQuery) QueryWorkflow() *WorkflowQuery {
	query := (&WorkflowClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deletionrequest.Table, deletionrequest.FieldID, selector),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deletionrequest.WorkflowTable, deletionrequest.WorkflowColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeletionRequest entity from the query.
// Returns a *NotFoundError when no DeletionRequest was found.
func (drq *DeletionRequestQuery) First(ctx context.Context) (*DeletionRequest, error) {
	nodes, err := drq.Limit(1).All(setContextOp(ctx, drq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deletionrequest.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drq *DeletionRequestQuery) FirstX(ctx context.Context) *DeletionRequest {
	node, err := drq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeletionRequest ID from the query.
// Returns a *NotFoundError when no DeletionRequest ID was found.
func (drq *DeletionRequestQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drq.Limit(1).IDs(setContextOp(ctx, drq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deletionrequest.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drq *DeletionRequestQuery) FirstIDX(ctx context.Context) int {
	id, err := drq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeletionRequest entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeletionRequest entity is found.
// Returns a *NotFoundError when no DeletionRequest entities are found.
func (drq *DeletionRequestQuery) Only(ctx context.Context) (*DeletionRequest, error) {
	nodes, err := drq.Limit(2).All(setContextOp(ctx, drq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deletionrequest.Label}
	default:
		return nil, &NotSingularError{deletionrequest.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drq *DeletionRequestQuery) OnlyX(ctx context.Context) *DeletionRequest {
	node, err := drq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeletionRequest ID in the query.
// Returns a *NotSingularError when more than one DeletionRequest ID is found.
// Returns a *NotFoundError when no entities are found.
func (drq *DeletionRequestQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drq.Limit(2).IDs(setContextOp(ctx, drq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deletionrequest.Label}
	default:
		err = &NotSingularError{deletionrequest.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drq *DeletionRequestQuery) OnlyIDX(ctx context.Context) int {
	id, err := drq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeletionRequests.
func (drq *DeletionRequestQuery) All(ctx context.Context) ([]*DeletionRequest, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryAll)
	if err := drq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeletionRequest, *DeletionRequestQuery]()
	return withInterceptors[[]*DeletionRequest](ctx, drq, qr, drq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drq *DeletionRequestQuery) AllX(ctx context.Context) []*DeletionRequest {
	nodes, err := drq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeletionRequest IDs.
func (drq *DeletionRequestQuery) IDs(ctx context.Context) (ids []int, err error) {
	if drq.ctx.Unique == nil && drq.path != nil {
		drq.Unique(true)
	}
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryIDs)
	if err = drq.Select(deletionrequest.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drq *DeletionRequestQuery) IDsX(ctx context.Context) []int {
	ids, err := drq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drq *DeletionRequestQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryCount)
	if err := drq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drq, querierCount[*DeletionRequestQuery](), drq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drq *DeletionRequestQuery) CountX(ctx context.Context) int {
	count, err := drq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drq *DeletionRequestQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryExist)
	switch _, err := drq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drq *DeletionRequestQuery) ExistX(ctx context.Context) bool {
	exist, err := drq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeletionRequestQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drq *DeletionRequestQuery) Clone() *DeletionRequestQuery {
	if drq == nil {
		return nil
	}
	return &DeletionRequestQuery{
		config:       drq.config,
		ctx:          drq.ctx.Clone(),
		order:        append([]deletionrequest.OrderOption{}, drq.order...),
		inters:       append([]Interceptor{}, drq.inters...),
		predicates:   append([]predicate.DeletionRequest{}, drq.predicates...),
		withAip:      drq.withAip.Clone(),
		withWorkflow: drq.withWorkflow.Clone(),
		// clone intermediate query.
		sql:  drq.sql.Clone(),
		path: drq.path,
	}
}

// WithAip tells the query-builder to eager-load the nodes that are connected to
// the "aip" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DeletionRequestQuery) WithAip(opts ...func(*AIPQuery)) *DeletionRequestQuery {
	query := (&AIPClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withAip = query
	return drq
}

// WithWorkflow tells the query-builder to eager-load the nodes that are connected to
// the "workflow" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DeletionRequestQuery) WithWorkflow(opts ...func(*WorkflowQuery)) *DeletionRequestQuery {
	query := (&WorkflowClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withWorkflow = query
	return drq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeletionRequest.Query().
//		GroupBy(deletionrequest.FieldUUID).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (drq *DeletionRequestQuery) GroupBy(field string, fields ...string) *DeletionRequestGroupBy {
	drq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeletionRequestGroupBy{build: drq}
	grbuild.flds = &drq.ctx.Fields
	grbuild.label = deletionrequest.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//	}
//
//	client.DeletionRequest.Query().
//		Select(deletionrequest.FieldUUID).
//		Scan(ctx, &v)
func (drq *DeletionRequestQuery) Select(fields ...string) *DeletionRequestSelect {
	drq.ctx.Fields = append(drq.ctx.Fields, fields...)
	sbuild := &DeletionRequestSelect{DeletionRequestQuery: drq}
	sbuild.label = deletionrequest.Label
	sbuild.flds, sbuild.scan = &drq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeletionRequestSelect configured with the given aggregations.
func (drq *DeletionRequestQuery) Aggregate(fns ...AggregateFunc) *DeletionRequestSelect {
	return drq.Select().Aggregate(fns...)
}

func (drq *DeletionRequestQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drq); err != nil {
				return err
			}
		}
	}
	for _, f := range drq.ctx.Fields {
		if !deletionrequest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if drq.path != nil {
		prev, err := drq.path(ctx)
		if err != nil {
			return err
		}
		drq.sql = prev
	}
	return nil
}

func (drq *DeletionRequestQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeletionRequest, error) {
	var (
		nodes       = []*DeletionRequest{}
		_spec       = drq.querySpec()
		loadedTypes = [2]bool{
			drq.withAip != nil,
			drq.withWorkflow != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeletionRequest).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeletionRequest{config: drq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drq.withAip; query != nil {
		if err := drq.loadAip(ctx, query, nodes, nil,
			func(n *DeletionRequest, e *AIP) { n.Edges.Aip = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withWorkflow; query != nil {
		if err := drq.loadWorkflow(ctx, query, nodes, nil,
			func(n *DeletionRequest, e *Workflow) { n.Edges.Workflow = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drq *DeletionRequestQuery) loadAip(ctx context.Context, query *AIPQuery, nodes []*DeletionRequest, init func(*DeletionRequest), assign func(*DeletionRequest, *AIP)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeletionRequest)
	for i := range nodes {
		fk := nodes[i].AipID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(aip.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "aip_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DeletionRequestQuery) loadWorkflow(ctx context.Context, query *WorkflowQuery, nodes []*DeletionRequest, init func(*DeletionRequest), assign func(*DeletionRequest, *Workflow)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DeletionRequest)
	for i := range nodes {
		fk := nodes[i].WorkflowID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workflow.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (drq *DeletionRequestQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drq.querySpec()
	_spec.Node.Columns = drq.ctx.Fields
	if len(drq.ctx.Fields) > 0 {
		_spec.Unique = drq.ctx.Unique != nil && *drq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drq.driver, _spec)
}

func (drq *DeletionRequestQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deletionrequest.Table, deletionrequest.Columns, sqlgraph.NewFieldSpec(deletionrequest.FieldID, field.TypeInt))
	_spec.From = drq.sql
	if unique := drq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drq.path != nil {
		_spec.Unique = true
	}
	if fields := drq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deletionrequest.FieldID)
		for i := range fields {
			if fields[i] != deletionrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if drq.withAip != nil {
			_spec.Node.AddColumnOnce(deletionrequest.FieldAipID)
		}
		if drq.withWorkflow != nil {
			_spec.Node.AddColumnOnce(deletionrequest.FieldWorkflowID)
		}
	}
	if ps := drq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drq *DeletionRequestQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drq.driver.Dialect())
	t1 := builder.Table(deletionrequest.Table)
	columns := drq.ctx.Fields
	if len(columns) == 0 {
		columns = deletionrequest.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drq.sql != nil {
		selector = drq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drq.ctx.Unique != nil && *drq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range drq.predicates {
		p(selector)
	}
	for _, p := range drq.order {
		p(selector)
	}
	if offset := drq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeletionRequestGroupBy is the group-by builder for DeletionRequest entities.
type DeletionRequestGroupBy struct {
	selector
	build *DeletionRequestQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drgb *DeletionRequestGroupBy) Aggregate(fns ...AggregateFunc) *DeletionRequestGroupBy {
	drgb.fns = append(drgb.fns, fns...)
	return drgb
}

// Scan applies the selector query and scans the result into the given value.
func (drgb *DeletionRequestGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drgb.build.ctx, ent.OpQueryGroupBy)
	if err := drgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeletionRequestQuery, *DeletionRequestGroupBy](ctx, drgb.build, drgb, drgb.build.inters, v)
}

func (drgb *DeletionRequestGroupBy) sqlScan(ctx context.Context, root *DeletionRequestQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drgb.fns))
	for _, fn := range drgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drgb.flds)+len(drgb.fns))
		for _, f := range *drgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeletionRequestSelect is the builder for selecting fields of DeletionRequest entities.
type DeletionRequestSelect struct {
	*DeletionRequestQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drs *DeletionRequestSelect) Aggregate(fns ...AggregateFunc) *DeletionRequestSelect {
	drs.fns = append(drs.fns, fns...)
	return drs
}

// Scan applies the selector query and scans the result into the given value.
func (drs *DeletionRequestSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drs.ctx, ent.OpQuerySelect)
	if err := drs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeletionRequestQuery, *DeletionRequestSelect](ctx, drs.DeletionRequestQuery, drs, drs.inters, v)
}

func (drs *DeletionRequestSelect) sqlScan(ctx context.Context, root *DeletionRequestQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drs.fns))
	for _, fn := range drs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
