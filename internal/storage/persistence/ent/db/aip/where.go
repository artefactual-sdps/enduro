// Code generated by ent, DO NOT EDIT.

package aip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artefactual-sdps/enduro/internal/storage/enums"
	"github.com/artefactual-sdps/enduro/internal/storage/persistence/ent/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AIP {
	return predicate.AIP(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AIP {
	return predicate.AIP(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AIP {
	return predicate.AIP(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AIP {
	return predicate.AIP(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AIP {
	return predicate.AIP(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AIP {
	return predicate.AIP(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AIP {
	return predicate.AIP(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldName, v))
}

// AipID applies equality check predicate on the "aip_id" field. It's identical to AipIDEQ.
func AipID(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldAipID, v))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v int) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldLocationID, v))
}

// ObjectKey applies equality check predicate on the "object_key" field. It's identical to ObjectKeyEQ.
func ObjectKey(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldObjectKey, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AIP {
	return predicate.AIP(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AIP {
	return predicate.AIP(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AIP {
	return predicate.AIP(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AIP {
	return predicate.AIP(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AIP {
	return predicate.AIP(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AIP {
	return predicate.AIP(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AIP {
	return predicate.AIP(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AIP {
	return predicate.AIP(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AIP {
	return predicate.AIP(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AIP {
	return predicate.AIP(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AIP {
	return predicate.AIP(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AIP {
	return predicate.AIP(sql.FieldContainsFold(FieldName, v))
}

// AipIDEQ applies the EQ predicate on the "aip_id" field.
func AipIDEQ(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldAipID, v))
}

// AipIDNEQ applies the NEQ predicate on the "aip_id" field.
func AipIDNEQ(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldNEQ(FieldAipID, v))
}

// AipIDIn applies the In predicate on the "aip_id" field.
func AipIDIn(vs ...uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldIn(FieldAipID, vs...))
}

// AipIDNotIn applies the NotIn predicate on the "aip_id" field.
func AipIDNotIn(vs ...uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldNotIn(FieldAipID, vs...))
}

// AipIDGT applies the GT predicate on the "aip_id" field.
func AipIDGT(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldGT(FieldAipID, v))
}

// AipIDGTE applies the GTE predicate on the "aip_id" field.
func AipIDGTE(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldGTE(FieldAipID, v))
}

// AipIDLT applies the LT predicate on the "aip_id" field.
func AipIDLT(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldLT(FieldAipID, v))
}

// AipIDLTE applies the LTE predicate on the "aip_id" field.
func AipIDLTE(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldLTE(FieldAipID, v))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v int) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v int) predicate.AIP {
	return predicate.AIP(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...int) predicate.AIP {
	return predicate.AIP(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...int) predicate.AIP {
	return predicate.AIP(sql.FieldNotIn(FieldLocationID, vs...))
}

// LocationIDIsNil applies the IsNil predicate on the "location_id" field.
func LocationIDIsNil() predicate.AIP {
	return predicate.AIP(sql.FieldIsNull(FieldLocationID))
}

// LocationIDNotNil applies the NotNil predicate on the "location_id" field.
func LocationIDNotNil() predicate.AIP {
	return predicate.AIP(sql.FieldNotNull(FieldLocationID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.AIPStatus) predicate.AIP {
	vc := v
	return predicate.AIP(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.AIPStatus) predicate.AIP {
	vc := v
	return predicate.AIP(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.AIPStatus) predicate.AIP {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AIP(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.AIPStatus) predicate.AIP {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AIP(sql.FieldNotIn(FieldStatus, v...))
}

// ObjectKeyEQ applies the EQ predicate on the "object_key" field.
func ObjectKeyEQ(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldObjectKey, v))
}

// ObjectKeyNEQ applies the NEQ predicate on the "object_key" field.
func ObjectKeyNEQ(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldNEQ(FieldObjectKey, v))
}

// ObjectKeyIn applies the In predicate on the "object_key" field.
func ObjectKeyIn(vs ...uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldIn(FieldObjectKey, vs...))
}

// ObjectKeyNotIn applies the NotIn predicate on the "object_key" field.
func ObjectKeyNotIn(vs ...uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldNotIn(FieldObjectKey, vs...))
}

// ObjectKeyGT applies the GT predicate on the "object_key" field.
func ObjectKeyGT(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldGT(FieldObjectKey, v))
}

// ObjectKeyGTE applies the GTE predicate on the "object_key" field.
func ObjectKeyGTE(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldGTE(FieldObjectKey, v))
}

// ObjectKeyLT applies the LT predicate on the "object_key" field.
func ObjectKeyLT(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldLT(FieldObjectKey, v))
}

// ObjectKeyLTE applies the LTE predicate on the "object_key" field.
func ObjectKeyLTE(v uuid.UUID) predicate.AIP {
	return predicate.AIP(sql.FieldLTE(FieldObjectKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AIP {
	return predicate.AIP(sql.FieldLTE(FieldCreatedAt, v))
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.AIP {
	return predicate.AIP(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.AIP {
	return predicate.AIP(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkflows applies the HasEdge predicate on the "workflows" edge.
func HasWorkflows() predicate.AIP {
	return predicate.AIP(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkflowsTable, WorkflowsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowsWith applies the HasEdge predicate on the "workflows" edge with a given conditions (other predicates).
func HasWorkflowsWith(preds ...predicate.Workflow) predicate.AIP {
	return predicate.AIP(func(s *sql.Selector) {
		step := newWorkflowsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AIP) predicate.AIP {
	return predicate.AIP(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AIP) predicate.AIP {
	return predicate.AIP(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AIP) predicate.AIP {
	return predicate.AIP(sql.NotPredicates(p))
}
