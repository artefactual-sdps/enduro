// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/package_ (interfaces: Service)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	package_ "github.com/artefactual-sdps/enduro/internal/api/gen/package_"
	package_0 "github.com/artefactual-sdps/enduro/internal/package_"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CompletePreservationAction mocks base method.
func (m *MockService) CompletePreservationAction(arg0 context.Context, arg1 uint, arg2 package_0.PreservationActionStatus, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletePreservationAction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompletePreservationAction indicates an expected call of CompletePreservationAction.
func (mr *MockServiceMockRecorder) CompletePreservationAction(arg0, arg1, arg2, arg3 interface{}) *ServiceCompletePreservationActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePreservationAction", reflect.TypeOf((*MockService)(nil).CompletePreservationAction), arg0, arg1, arg2, arg3)
	return &ServiceCompletePreservationActionCall{Call: call}
}

// ServiceCompletePreservationActionCall wrap *gomock.Call
type ServiceCompletePreservationActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCompletePreservationActionCall) Return(arg0 error) *ServiceCompletePreservationActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCompletePreservationActionCall) Do(f func(context.Context, uint, package_0.PreservationActionStatus, time.Time) error) *ServiceCompletePreservationActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCompletePreservationActionCall) DoAndReturn(f func(context.Context, uint, package_0.PreservationActionStatus, time.Time) error) *ServiceCompletePreservationActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CompletePreservationTask mocks base method.
func (m *MockService) CompletePreservationTask(arg0 context.Context, arg1 uint, arg2 package_0.PreservationTaskStatus, arg3 time.Time, arg4 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletePreservationTask", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompletePreservationTask indicates an expected call of CompletePreservationTask.
func (mr *MockServiceMockRecorder) CompletePreservationTask(arg0, arg1, arg2, arg3, arg4 interface{}) *ServiceCompletePreservationTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePreservationTask", reflect.TypeOf((*MockService)(nil).CompletePreservationTask), arg0, arg1, arg2, arg3, arg4)
	return &ServiceCompletePreservationTaskCall{Call: call}
}

// ServiceCompletePreservationTaskCall wrap *gomock.Call
type ServiceCompletePreservationTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCompletePreservationTaskCall) Return(arg0 error) *ServiceCompletePreservationTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCompletePreservationTaskCall) Do(f func(context.Context, uint, package_0.PreservationTaskStatus, time.Time, *string) error) *ServiceCompletePreservationTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCompletePreservationTaskCall) DoAndReturn(f func(context.Context, uint, package_0.PreservationTaskStatus, time.Time, *string) error) *ServiceCompletePreservationTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockService) Create(arg0 context.Context, arg1 *package_0.Package) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(arg0, arg1 interface{}) *ServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1)
	return &ServiceCreateCall{Call: call}
}

// ServiceCreateCall wrap *gomock.Call
type ServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreateCall) Return(arg0 error) *ServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreateCall) Do(f func(context.Context, *package_0.Package) error) *ServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreateCall) DoAndReturn(f func(context.Context, *package_0.Package) error) *ServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePreservationAction mocks base method.
func (m *MockService) CreatePreservationAction(arg0 context.Context, arg1 *package_0.PreservationAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreservationAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePreservationAction indicates an expected call of CreatePreservationAction.
func (mr *MockServiceMockRecorder) CreatePreservationAction(arg0, arg1 interface{}) *ServiceCreatePreservationActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreservationAction", reflect.TypeOf((*MockService)(nil).CreatePreservationAction), arg0, arg1)
	return &ServiceCreatePreservationActionCall{Call: call}
}

// ServiceCreatePreservationActionCall wrap *gomock.Call
type ServiceCreatePreservationActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreatePreservationActionCall) Return(arg0 error) *ServiceCreatePreservationActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreatePreservationActionCall) Do(f func(context.Context, *package_0.PreservationAction) error) *ServiceCreatePreservationActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreatePreservationActionCall) DoAndReturn(f func(context.Context, *package_0.PreservationAction) error) *ServiceCreatePreservationActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePreservationTask mocks base method.
func (m *MockService) CreatePreservationTask(arg0 context.Context, arg1 *package_0.PreservationTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreservationTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePreservationTask indicates an expected call of CreatePreservationTask.
func (mr *MockServiceMockRecorder) CreatePreservationTask(arg0, arg1 interface{}) *ServiceCreatePreservationTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreservationTask", reflect.TypeOf((*MockService)(nil).CreatePreservationTask), arg0, arg1)
	return &ServiceCreatePreservationTaskCall{Call: call}
}

// ServiceCreatePreservationTaskCall wrap *gomock.Call
type ServiceCreatePreservationTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreatePreservationTaskCall) Return(arg0 error) *ServiceCreatePreservationTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreatePreservationTaskCall) Do(f func(context.Context, *package_0.PreservationTask) error) *ServiceCreatePreservationTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreatePreservationTaskCall) DoAndReturn(f func(context.Context, *package_0.PreservationTask) error) *ServiceCreatePreservationTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Goa mocks base method.
func (m *MockService) Goa() package_.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Goa")
	ret0, _ := ret[0].(package_.Service)
	return ret0
}

// Goa indicates an expected call of Goa.
func (mr *MockServiceMockRecorder) Goa() *ServiceGoaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Goa", reflect.TypeOf((*MockService)(nil).Goa))
	return &ServiceGoaCall{Call: call}
}

// ServiceGoaCall wrap *gomock.Call
type ServiceGoaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGoaCall) Return(arg0 package_.Service) *ServiceGoaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGoaCall) Do(f func() package_.Service) *ServiceGoaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGoaCall) DoAndReturn(f func() package_.Service) *ServiceGoaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLocationID mocks base method.
func (m *MockService) SetLocationID(arg0 context.Context, arg1 uint, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLocationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLocationID indicates an expected call of SetLocationID.
func (mr *MockServiceMockRecorder) SetLocationID(arg0, arg1, arg2 interface{}) *ServiceSetLocationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocationID", reflect.TypeOf((*MockService)(nil).SetLocationID), arg0, arg1, arg2)
	return &ServiceSetLocationIDCall{Call: call}
}

// ServiceSetLocationIDCall wrap *gomock.Call
type ServiceSetLocationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetLocationIDCall) Return(arg0 error) *ServiceSetLocationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetLocationIDCall) Do(f func(context.Context, uint, uuid.UUID) error) *ServiceSetLocationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetLocationIDCall) DoAndReturn(f func(context.Context, uint, uuid.UUID) error) *ServiceSetLocationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPreservationActionStatus mocks base method.
func (m *MockService) SetPreservationActionStatus(arg0 context.Context, arg1 uint, arg2 package_0.PreservationActionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreservationActionStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPreservationActionStatus indicates an expected call of SetPreservationActionStatus.
func (mr *MockServiceMockRecorder) SetPreservationActionStatus(arg0, arg1, arg2 interface{}) *ServiceSetPreservationActionStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreservationActionStatus", reflect.TypeOf((*MockService)(nil).SetPreservationActionStatus), arg0, arg1, arg2)
	return &ServiceSetPreservationActionStatusCall{Call: call}
}

// ServiceSetPreservationActionStatusCall wrap *gomock.Call
type ServiceSetPreservationActionStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetPreservationActionStatusCall) Return(arg0 error) *ServiceSetPreservationActionStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetPreservationActionStatusCall) Do(f func(context.Context, uint, package_0.PreservationActionStatus) error) *ServiceSetPreservationActionStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetPreservationActionStatusCall) DoAndReturn(f func(context.Context, uint, package_0.PreservationActionStatus) error) *ServiceSetPreservationActionStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockService) SetStatus(arg0 context.Context, arg1 uint, arg2 package_0.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockServiceMockRecorder) SetStatus(arg0, arg1, arg2 interface{}) *ServiceSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockService)(nil).SetStatus), arg0, arg1, arg2)
	return &ServiceSetStatusCall{Call: call}
}

// ServiceSetStatusCall wrap *gomock.Call
type ServiceSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetStatusCall) Return(arg0 error) *ServiceSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetStatusCall) Do(f func(context.Context, uint, package_0.Status) error) *ServiceSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetStatusCall) DoAndReturn(f func(context.Context, uint, package_0.Status) error) *ServiceSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusInProgress mocks base method.
func (m *MockService) SetStatusInProgress(arg0 context.Context, arg1 uint, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusInProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusInProgress indicates an expected call of SetStatusInProgress.
func (mr *MockServiceMockRecorder) SetStatusInProgress(arg0, arg1, arg2 interface{}) *ServiceSetStatusInProgressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusInProgress", reflect.TypeOf((*MockService)(nil).SetStatusInProgress), arg0, arg1, arg2)
	return &ServiceSetStatusInProgressCall{Call: call}
}

// ServiceSetStatusInProgressCall wrap *gomock.Call
type ServiceSetStatusInProgressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetStatusInProgressCall) Return(arg0 error) *ServiceSetStatusInProgressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetStatusInProgressCall) Do(f func(context.Context, uint, time.Time) error) *ServiceSetStatusInProgressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetStatusInProgressCall) DoAndReturn(f func(context.Context, uint, time.Time) error) *ServiceSetStatusInProgressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusPending mocks base method.
func (m *MockService) SetStatusPending(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusPending", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusPending indicates an expected call of SetStatusPending.
func (mr *MockServiceMockRecorder) SetStatusPending(arg0, arg1 interface{}) *ServiceSetStatusPendingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPending", reflect.TypeOf((*MockService)(nil).SetStatusPending), arg0, arg1)
	return &ServiceSetStatusPendingCall{Call: call}
}

// ServiceSetStatusPendingCall wrap *gomock.Call
type ServiceSetStatusPendingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetStatusPendingCall) Return(arg0 error) *ServiceSetStatusPendingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetStatusPendingCall) Do(f func(context.Context, uint) error) *ServiceSetStatusPendingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetStatusPendingCall) DoAndReturn(f func(context.Context, uint) error) *ServiceSetStatusPendingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWorkflowStatus mocks base method.
func (m *MockService) UpdateWorkflowStatus(arg0 context.Context, arg1 uint, arg2, arg3, arg4, arg5 string, arg6 package_0.Status, arg7 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStatus", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowStatus indicates an expected call of UpdateWorkflowStatus.
func (mr *MockServiceMockRecorder) UpdateWorkflowStatus(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *ServiceUpdateWorkflowStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStatus", reflect.TypeOf((*MockService)(nil).UpdateWorkflowStatus), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	return &ServiceUpdateWorkflowStatusCall{Call: call}
}

// ServiceUpdateWorkflowStatusCall wrap *gomock.Call
type ServiceUpdateWorkflowStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceUpdateWorkflowStatusCall) Return(arg0 error) *ServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceUpdateWorkflowStatusCall) Do(f func(context.Context, uint, string, string, string, string, package_0.Status, time.Time) error) *ServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceUpdateWorkflowStatusCall) DoAndReturn(f func(context.Context, uint, string, string, string, string, package_0.Status, time.Time) error) *ServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
