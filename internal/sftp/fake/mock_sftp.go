// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/sftp (interfaces: Client,AsyncUpload)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/sftp/fake/mock_sftp.go -package=fake github.com/artefactual-sdps/enduro/internal/sftp Client,AsyncUpload
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	io "io"
	reflect "reflect"

	sftp "github.com/artefactual-sdps/enduro/internal/sftp"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClient) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(arg0, arg1 any) *MockClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), arg0, arg1)
	return &MockClientDeleteCall{Call: call}
}

// MockClientDeleteCall wrap *gomock.Call
type MockClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteCall) Return(arg0 error) *MockClientDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteCall) Do(f func(context.Context, string) error) *MockClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UploadDirectory mocks base method.
func (m *MockClient) UploadDirectory(arg0 context.Context, arg1 string) (string, sftp.AsyncUpload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadDirectory", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(sftp.AsyncUpload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadDirectory indicates an expected call of UploadDirectory.
func (mr *MockClientMockRecorder) UploadDirectory(arg0, arg1 any) *MockClientUploadDirectoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadDirectory", reflect.TypeOf((*MockClient)(nil).UploadDirectory), arg0, arg1)
	return &MockClientUploadDirectoryCall{Call: call}
}

// MockClientUploadDirectoryCall wrap *gomock.Call
type MockClientUploadDirectoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUploadDirectoryCall) Return(arg0 string, arg1 sftp.AsyncUpload, arg2 error) *MockClientUploadDirectoryCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUploadDirectoryCall) Do(f func(context.Context, string) (string, sftp.AsyncUpload, error)) *MockClientUploadDirectoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUploadDirectoryCall) DoAndReturn(f func(context.Context, string) (string, sftp.AsyncUpload, error)) *MockClientUploadDirectoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UploadFile mocks base method.
func (m *MockClient) UploadFile(arg0 context.Context, arg1 io.Reader, arg2 string) (string, sftp.AsyncUpload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(sftp.AsyncUpload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockClientMockRecorder) UploadFile(arg0, arg1, arg2 any) *MockClientUploadFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockClient)(nil).UploadFile), arg0, arg1, arg2)
	return &MockClientUploadFileCall{Call: call}
}

// MockClientUploadFileCall wrap *gomock.Call
type MockClientUploadFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUploadFileCall) Return(arg0 string, arg1 sftp.AsyncUpload, arg2 error) *MockClientUploadFileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUploadFileCall) Do(f func(context.Context, io.Reader, string) (string, sftp.AsyncUpload, error)) *MockClientUploadFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUploadFileCall) DoAndReturn(f func(context.Context, io.Reader, string) (string, sftp.AsyncUpload, error)) *MockClientUploadFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAsyncUpload is a mock of AsyncUpload interface.
type MockAsyncUpload struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncUploadMockRecorder
}

// MockAsyncUploadMockRecorder is the mock recorder for MockAsyncUpload.
type MockAsyncUploadMockRecorder struct {
	mock *MockAsyncUpload
}

// NewMockAsyncUpload creates a new mock instance.
func NewMockAsyncUpload(ctrl *gomock.Controller) *MockAsyncUpload {
	mock := &MockAsyncUpload{ctrl: ctrl}
	mock.recorder = &MockAsyncUploadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncUpload) EXPECT() *MockAsyncUploadMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockAsyncUpload) Bytes() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockAsyncUploadMockRecorder) Bytes() *MockAsyncUploadBytesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockAsyncUpload)(nil).Bytes))
	return &MockAsyncUploadBytesCall{Call: call}
}

// MockAsyncUploadBytesCall wrap *gomock.Call
type MockAsyncUploadBytesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAsyncUploadBytesCall) Return(arg0 int64) *MockAsyncUploadBytesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAsyncUploadBytesCall) Do(f func() int64) *MockAsyncUploadBytesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAsyncUploadBytesCall) DoAndReturn(f func() int64) *MockAsyncUploadBytesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockAsyncUpload) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAsyncUploadMockRecorder) Close() *MockAsyncUploadCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAsyncUpload)(nil).Close))
	return &MockAsyncUploadCloseCall{Call: call}
}

// MockAsyncUploadCloseCall wrap *gomock.Call
type MockAsyncUploadCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAsyncUploadCloseCall) Return(arg0 error) *MockAsyncUploadCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAsyncUploadCloseCall) Do(f func() error) *MockAsyncUploadCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAsyncUploadCloseCall) DoAndReturn(f func() error) *MockAsyncUploadCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockAsyncUpload) Done() chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockAsyncUploadMockRecorder) Done() *MockAsyncUploadDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockAsyncUpload)(nil).Done))
	return &MockAsyncUploadDoneCall{Call: call}
}

// MockAsyncUploadDoneCall wrap *gomock.Call
type MockAsyncUploadDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAsyncUploadDoneCall) Return(arg0 chan bool) *MockAsyncUploadDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAsyncUploadDoneCall) Do(f func() chan bool) *MockAsyncUploadDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAsyncUploadDoneCall) DoAndReturn(f func() chan bool) *MockAsyncUploadDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Err mocks base method.
func (m *MockAsyncUpload) Err() chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(chan error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockAsyncUploadMockRecorder) Err() *MockAsyncUploadErrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockAsyncUpload)(nil).Err))
	return &MockAsyncUploadErrCall{Call: call}
}

// MockAsyncUploadErrCall wrap *gomock.Call
type MockAsyncUploadErrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAsyncUploadErrCall) Return(arg0 chan error) *MockAsyncUploadErrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAsyncUploadErrCall) Do(f func() chan error) *MockAsyncUploadErrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAsyncUploadErrCall) DoAndReturn(f func() chan error) *MockAsyncUploadErrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockAsyncUpload) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockAsyncUploadMockRecorder) Write(arg0 any) *MockAsyncUploadWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockAsyncUpload)(nil).Write), arg0)
	return &MockAsyncUploadWriteCall{Call: call}
}

// MockAsyncUploadWriteCall wrap *gomock.Call
type MockAsyncUploadWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAsyncUploadWriteCall) Return(arg0 int, arg1 error) *MockAsyncUploadWriteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAsyncUploadWriteCall) Do(f func([]byte) (int, error)) *MockAsyncUploadWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAsyncUploadWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockAsyncUploadWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
