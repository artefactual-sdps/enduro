package entclient

import (
	"context"
	"time"

	"github.com/google/uuid"

	"github.com/artefactual-sdps/enduro/internal/datatypes"
	"github.com/artefactual-sdps/enduro/internal/entfilter"
	"github.com/artefactual-sdps/enduro/internal/persistence"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/sip"
)

// CreateSIP creates and persists a new SIP using the values from s
// then returns the updated SIP.
//
// The input SIP "ID" and "CreatedAt" values are ignored; the stored SIP
// "ID" is generated by the persistence implementation and "CreatedAt" is always
// set to the current time.
func (c *client) CreateSIP(ctx context.Context, s *datatypes.SIP) error {
	// Validate required fields.
	if s.Name == "" {
		return newRequiredFieldError("Name")
	}
	if s.WorkflowID == "" {
		return newRequiredFieldError("WorkflowID")
	}

	if s.RunID == "" {
		return newRequiredFieldError("RunID")
	}
	runID, err := uuid.Parse(s.RunID)
	if err != nil {
		return newParseError(err, "RunID")
	}

	q := c.ent.SIP.Create().
		SetName(s.Name).
		SetWorkflowID(s.WorkflowID).
		SetRunID(runID).
		SetStatus(int8(s.Status)) // #nosec G115 -- constrained value.

	// Add optional fields.
	if s.AIPID.Valid {
		q.SetAipID(s.AIPID.UUID)
	}
	if s.LocationID.Valid {
		q.SetLocationID(s.LocationID.UUID)
	}
	if s.StartedAt.Valid {
		q.SetStartedAt(s.StartedAt.Time)
	}
	if s.CompletedAt.Valid {
		q.SetCompletedAt(s.CompletedAt.Time)
	}

	// Set CreatedAt to the current time
	q.SetCreatedAt(time.Now())

	// Save the SIP.
	dbs, err := q.Save(ctx)
	if err != nil {
		return newDBErrorWithDetails(err, "create SIP")
	}

	// Update SIP with DB data, to get generated values (e.g. ID).
	*s = *convertSIP(dbs)

	return nil
}

// UpdateSIP updates the persisted SIP identified by id using the
// updater function, then returns the updated SIP.
//
// The SIP "ID" and "CreatedAt" field values can not be updated with this
// method.
func (c *client) UpdateSIP(
	ctx context.Context,
	id int,
	updater persistence.SIPUpdater,
) (*datatypes.SIP, error) {
	tx, err := c.ent.BeginTx(ctx, nil)
	if err != nil {
		return nil, newDBError(err)
	}

	s, err := tx.SIP.Get(ctx, id)
	if err != nil {
		return nil, rollback(tx, newDBError(err))
	}

	up, err := updater(convertSIP(s))
	if err != nil {
		return nil, rollback(tx, newUpdaterError(err))
	}

	runID, err := uuid.Parse(up.RunID)
	if err != nil {
		return nil, rollback(tx, newParseError(err, "RunID"))
	}

	// Set required column values.
	q := tx.SIP.UpdateOneID(id).
		SetName(up.Name).
		SetWorkflowID(up.WorkflowID).
		SetRunID(runID).
		SetStatus(int8(up.Status)) // #nosec G115 -- constrained value.

	// Set nullable column values.
	if up.AIPID.Valid {
		q.SetAipID(up.AIPID.UUID)
	}
	if up.LocationID.Valid {
		q.SetLocationID(up.LocationID.UUID)
	}
	if up.StartedAt.Valid {
		q.SetStartedAt(up.StartedAt.Time)
	}
	if up.CompletedAt.Valid {
		q.SetCompletedAt(up.CompletedAt.Time)
	}

	// Save changes.
	s, err = q.Save(ctx)
	if err != nil {
		return nil, rollback(tx, newDBError(err))
	}
	if err = tx.Commit(); err != nil {
		return nil, rollback(tx, newDBError(err))
	}

	return convertSIP(s), nil
}

// ListSIPs returns a slice of SIPs filtered according to f.
func (c *client) ListSIPs(ctx context.Context, f *persistence.SIPFilter) (
	[]*datatypes.SIP, *persistence.Page, error,
) {
	res := []*datatypes.SIP{}

	if f == nil {
		f = &persistence.SIPFilter{}
	}

	page, whole := filterSIPs(c.ent.SIP.Query(), f)

	r, err := page.All(ctx)
	if err != nil {
		return nil, nil, newDBError(err)
	}

	for _, i := range r {
		res = append(res, convertSIP(i))
	}

	total, err := whole.Count(ctx)
	if err != nil {
		return nil, nil, newDBError(err)
	}

	pp := &persistence.Page{
		Limit:  f.Limit,
		Offset: f.Offset,
		Total:  total,
	}

	return res, pp, err
}

// filterSIPs applies the SIP filter f to the query q.
func filterSIPs(q *db.SIPQuery, f *persistence.SIPFilter) (page, whole *db.SIPQuery) {
	qf := entfilter.NewFilter(q, entfilter.SortableFields{
		sip.FieldID: {Name: "ID", Default: true},
	})
	qf.Contains(sip.FieldName, f.Name)
	qf.Equals(sip.FieldAipID, f.AIPID)
	qf.Equals(sip.FieldLocationID, f.LocationID)
	qf.Equals(sip.FieldStatus, f.Status)
	qf.AddDateRange(sip.FieldCreatedAt, f.CreatedAt)
	qf.OrderBy(f.Sort)
	qf.Page(f.Limit, f.Offset)

	// Update the SIPFilter values with the actual values set on the query.
	// E.g. calling `qf.Page(0,0)` will set the query limit equal to the default
	// page size.
	f.Limit = qf.Limit
	f.Offset = qf.Offset

	return qf.Apply()
}
