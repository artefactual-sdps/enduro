// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUUID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// OidcIss applies equality check predicate on the "oidc_iss" field. It's identical to OidcIssEQ.
func OidcIss(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOidcIss, v))
}

// OidcSub applies equality check predicate on the "oidc_sub" field. It's identical to OidcSubEQ.
func OidcSub(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOidcSub, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// OidcIssEQ applies the EQ predicate on the "oidc_iss" field.
func OidcIssEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOidcIss, v))
}

// OidcIssNEQ applies the NEQ predicate on the "oidc_iss" field.
func OidcIssNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOidcIss, v))
}

// OidcIssIn applies the In predicate on the "oidc_iss" field.
func OidcIssIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOidcIss, vs...))
}

// OidcIssNotIn applies the NotIn predicate on the "oidc_iss" field.
func OidcIssNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOidcIss, vs...))
}

// OidcIssGT applies the GT predicate on the "oidc_iss" field.
func OidcIssGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOidcIss, v))
}

// OidcIssGTE applies the GTE predicate on the "oidc_iss" field.
func OidcIssGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOidcIss, v))
}

// OidcIssLT applies the LT predicate on the "oidc_iss" field.
func OidcIssLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOidcIss, v))
}

// OidcIssLTE applies the LTE predicate on the "oidc_iss" field.
func OidcIssLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOidcIss, v))
}

// OidcIssContains applies the Contains predicate on the "oidc_iss" field.
func OidcIssContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOidcIss, v))
}

// OidcIssHasPrefix applies the HasPrefix predicate on the "oidc_iss" field.
func OidcIssHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOidcIss, v))
}

// OidcIssHasSuffix applies the HasSuffix predicate on the "oidc_iss" field.
func OidcIssHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOidcIss, v))
}

// OidcIssIsNil applies the IsNil predicate on the "oidc_iss" field.
func OidcIssIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOidcIss))
}

// OidcIssNotNil applies the NotNil predicate on the "oidc_iss" field.
func OidcIssNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOidcIss))
}

// OidcIssEqualFold applies the EqualFold predicate on the "oidc_iss" field.
func OidcIssEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOidcIss, v))
}

// OidcIssContainsFold applies the ContainsFold predicate on the "oidc_iss" field.
func OidcIssContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOidcIss, v))
}

// OidcSubEQ applies the EQ predicate on the "oidc_sub" field.
func OidcSubEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOidcSub, v))
}

// OidcSubNEQ applies the NEQ predicate on the "oidc_sub" field.
func OidcSubNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOidcSub, v))
}

// OidcSubIn applies the In predicate on the "oidc_sub" field.
func OidcSubIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOidcSub, vs...))
}

// OidcSubNotIn applies the NotIn predicate on the "oidc_sub" field.
func OidcSubNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOidcSub, vs...))
}

// OidcSubGT applies the GT predicate on the "oidc_sub" field.
func OidcSubGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOidcSub, v))
}

// OidcSubGTE applies the GTE predicate on the "oidc_sub" field.
func OidcSubGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOidcSub, v))
}

// OidcSubLT applies the LT predicate on the "oidc_sub" field.
func OidcSubLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOidcSub, v))
}

// OidcSubLTE applies the LTE predicate on the "oidc_sub" field.
func OidcSubLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOidcSub, v))
}

// OidcSubContains applies the Contains predicate on the "oidc_sub" field.
func OidcSubContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOidcSub, v))
}

// OidcSubHasPrefix applies the HasPrefix predicate on the "oidc_sub" field.
func OidcSubHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOidcSub, v))
}

// OidcSubHasSuffix applies the HasSuffix predicate on the "oidc_sub" field.
func OidcSubHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOidcSub, v))
}

// OidcSubIsNil applies the IsNil predicate on the "oidc_sub" field.
func OidcSubIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOidcSub))
}

// OidcSubNotNil applies the NotNil predicate on the "oidc_sub" field.
func OidcSubNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOidcSub))
}

// OidcSubEqualFold applies the EqualFold predicate on the "oidc_sub" field.
func OidcSubEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOidcSub, v))
}

// OidcSubContainsFold applies the ContainsFold predicate on the "oidc_sub" field.
func OidcSubContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOidcSub, v))
}

// HasUploadedSips applies the HasEdge predicate on the "uploaded_sips" edge.
func HasUploadedSips() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UploadedSipsTable, UploadedSipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUploadedSipsWith applies the HasEdge predicate on the "uploaded_sips" edge with a given conditions (other predicates).
func HasUploadedSipsWith(preds ...predicate.SIP) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUploadedSipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
