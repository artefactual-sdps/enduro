// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOidcIss holds the string denoting the oidc_iss field in the database.
	FieldOidcIss = "oidc_iss"
	// FieldOidcSub holds the string denoting the oidc_sub field in the database.
	FieldOidcSub = "oidc_sub"
	// EdgeUploadedSips holds the string denoting the uploaded_sips edge name in mutations.
	EdgeUploadedSips = "uploaded_sips"
	// Table holds the table name of the user in the database.
	Table = "user"
	// UploadedSipsTable is the table that holds the uploaded_sips relation/edge.
	UploadedSipsTable = "sip"
	// UploadedSipsInverseTable is the table name for the SIP entity.
	// It exists in this package in order to avoid circular dependency with the "sip" package.
	UploadedSipsInverseTable = "sip"
	// UploadedSipsColumn is the table column denoting the uploaded_sips relation/edge.
	UploadedSipsColumn = "uploader_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldEmail,
	FieldName,
	FieldOidcIss,
	FieldOidcSub,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOidcIss orders the results by the oidc_iss field.
func ByOidcIss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOidcIss, opts...).ToFunc()
}

// ByOidcSub orders the results by the oidc_sub field.
func ByOidcSub(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOidcSub, opts...).ToFunc()
}

// ByUploadedSipsCount orders the results by uploaded_sips count.
func ByUploadedSipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUploadedSipsStep(), opts...)
	}
}

// ByUploadedSips orders the results by uploaded_sips terms.
func ByUploadedSips(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadedSipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUploadedSipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadedSipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UploadedSipsTable, UploadedSipsColumn),
	)
}
