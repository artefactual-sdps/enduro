// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/pkg"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/predicate"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationaction"
	"github.com/google/uuid"
)

// PkgUpdate is the builder for updating Pkg entities.
type PkgUpdate struct {
	config
	hooks    []Hook
	mutation *PkgMutation
}

// Where appends a list predicates to the PkgUpdate builder.
func (pu *PkgUpdate) Where(ps ...predicate.Pkg) *PkgUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PkgUpdate) SetName(s string) *PkgUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetWorkflowID sets the "workflow_id" field.
func (pu *PkgUpdate) SetWorkflowID(s string) *PkgUpdate {
	pu.mutation.SetWorkflowID(s)
	return pu
}

// SetRunID sets the "run_id" field.
func (pu *PkgUpdate) SetRunID(u uuid.UUID) *PkgUpdate {
	pu.mutation.SetRunID(u)
	return pu
}

// SetAipID sets the "aip_id" field.
func (pu *PkgUpdate) SetAipID(u uuid.UUID) *PkgUpdate {
	pu.mutation.SetAipID(u)
	return pu
}

// SetLocationID sets the "location_id" field.
func (pu *PkgUpdate) SetLocationID(u uuid.UUID) *PkgUpdate {
	pu.mutation.SetLocationID(u)
	return pu
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (pu *PkgUpdate) SetNillableLocationID(u *uuid.UUID) *PkgUpdate {
	if u != nil {
		pu.SetLocationID(*u)
	}
	return pu
}

// ClearLocationID clears the value of the "location_id" field.
func (pu *PkgUpdate) ClearLocationID() *PkgUpdate {
	pu.mutation.ClearLocationID()
	return pu
}

// SetStatus sets the "status" field.
func (pu *PkgUpdate) SetStatus(i int8) *PkgUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *PkgUpdate) AddStatus(i int8) *PkgUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetStartedAt sets the "started_at" field.
func (pu *PkgUpdate) SetStartedAt(t time.Time) *PkgUpdate {
	pu.mutation.SetStartedAt(t)
	return pu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pu *PkgUpdate) SetNillableStartedAt(t *time.Time) *PkgUpdate {
	if t != nil {
		pu.SetStartedAt(*t)
	}
	return pu
}

// ClearStartedAt clears the value of the "started_at" field.
func (pu *PkgUpdate) ClearStartedAt() *PkgUpdate {
	pu.mutation.ClearStartedAt()
	return pu
}

// SetCompletedAt sets the "completed_at" field.
func (pu *PkgUpdate) SetCompletedAt(t time.Time) *PkgUpdate {
	pu.mutation.SetCompletedAt(t)
	return pu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (pu *PkgUpdate) SetNillableCompletedAt(t *time.Time) *PkgUpdate {
	if t != nil {
		pu.SetCompletedAt(*t)
	}
	return pu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (pu *PkgUpdate) ClearCompletedAt() *PkgUpdate {
	pu.mutation.ClearCompletedAt()
	return pu
}

// AddPreservationActionIDs adds the "preservation_actions" edge to the PreservationAction entity by IDs.
func (pu *PkgUpdate) AddPreservationActionIDs(ids ...int) *PkgUpdate {
	pu.mutation.AddPreservationActionIDs(ids...)
	return pu
}

// AddPreservationActions adds the "preservation_actions" edges to the PreservationAction entity.
func (pu *PkgUpdate) AddPreservationActions(p ...*PreservationAction) *PkgUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPreservationActionIDs(ids...)
}

// Mutation returns the PkgMutation object of the builder.
func (pu *PkgUpdate) Mutation() *PkgMutation {
	return pu.mutation
}

// ClearPreservationActions clears all "preservation_actions" edges to the PreservationAction entity.
func (pu *PkgUpdate) ClearPreservationActions() *PkgUpdate {
	pu.mutation.ClearPreservationActions()
	return pu
}

// RemovePreservationActionIDs removes the "preservation_actions" edge to PreservationAction entities by IDs.
func (pu *PkgUpdate) RemovePreservationActionIDs(ids ...int) *PkgUpdate {
	pu.mutation.RemovePreservationActionIDs(ids...)
	return pu
}

// RemovePreservationActions removes "preservation_actions" edges to PreservationAction entities.
func (pu *PkgUpdate) RemovePreservationActions(p ...*PreservationAction) *PkgUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePreservationActionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PkgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PkgUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PkgUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PkgUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PkgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pkg.Table, pkg.Columns, sqlgraph.NewFieldSpec(pkg.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(pkg.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.WorkflowID(); ok {
		_spec.SetField(pkg.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := pu.mutation.RunID(); ok {
		_spec.SetField(pkg.FieldRunID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.AipID(); ok {
		_spec.SetField(pkg.FieldAipID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.LocationID(); ok {
		_spec.SetField(pkg.FieldLocationID, field.TypeUUID, value)
	}
	if pu.mutation.LocationIDCleared() {
		_spec.ClearField(pkg.FieldLocationID, field.TypeUUID)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(pkg.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(pkg.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.StartedAt(); ok {
		_spec.SetField(pkg.FieldStartedAt, field.TypeTime, value)
	}
	if pu.mutation.StartedAtCleared() {
		_spec.ClearField(pkg.FieldStartedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.CompletedAt(); ok {
		_spec.SetField(pkg.FieldCompletedAt, field.TypeTime, value)
	}
	if pu.mutation.CompletedAtCleared() {
		_spec.ClearField(pkg.FieldCompletedAt, field.TypeTime)
	}
	if pu.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pkg.PreservationActionsTable,
			Columns: []string{pkg.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPreservationActionsIDs(); len(nodes) > 0 && !pu.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pkg.PreservationActionsTable,
			Columns: []string{pkg.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PreservationActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pkg.PreservationActionsTable,
			Columns: []string{pkg.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PkgUpdateOne is the builder for updating a single Pkg entity.
type PkgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PkgMutation
}

// SetName sets the "name" field.
func (puo *PkgUpdateOne) SetName(s string) *PkgUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetWorkflowID sets the "workflow_id" field.
func (puo *PkgUpdateOne) SetWorkflowID(s string) *PkgUpdateOne {
	puo.mutation.SetWorkflowID(s)
	return puo
}

// SetRunID sets the "run_id" field.
func (puo *PkgUpdateOne) SetRunID(u uuid.UUID) *PkgUpdateOne {
	puo.mutation.SetRunID(u)
	return puo
}

// SetAipID sets the "aip_id" field.
func (puo *PkgUpdateOne) SetAipID(u uuid.UUID) *PkgUpdateOne {
	puo.mutation.SetAipID(u)
	return puo
}

// SetLocationID sets the "location_id" field.
func (puo *PkgUpdateOne) SetLocationID(u uuid.UUID) *PkgUpdateOne {
	puo.mutation.SetLocationID(u)
	return puo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (puo *PkgUpdateOne) SetNillableLocationID(u *uuid.UUID) *PkgUpdateOne {
	if u != nil {
		puo.SetLocationID(*u)
	}
	return puo
}

// ClearLocationID clears the value of the "location_id" field.
func (puo *PkgUpdateOne) ClearLocationID() *PkgUpdateOne {
	puo.mutation.ClearLocationID()
	return puo
}

// SetStatus sets the "status" field.
func (puo *PkgUpdateOne) SetStatus(i int8) *PkgUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *PkgUpdateOne) AddStatus(i int8) *PkgUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetStartedAt sets the "started_at" field.
func (puo *PkgUpdateOne) SetStartedAt(t time.Time) *PkgUpdateOne {
	puo.mutation.SetStartedAt(t)
	return puo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (puo *PkgUpdateOne) SetNillableStartedAt(t *time.Time) *PkgUpdateOne {
	if t != nil {
		puo.SetStartedAt(*t)
	}
	return puo
}

// ClearStartedAt clears the value of the "started_at" field.
func (puo *PkgUpdateOne) ClearStartedAt() *PkgUpdateOne {
	puo.mutation.ClearStartedAt()
	return puo
}

// SetCompletedAt sets the "completed_at" field.
func (puo *PkgUpdateOne) SetCompletedAt(t time.Time) *PkgUpdateOne {
	puo.mutation.SetCompletedAt(t)
	return puo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (puo *PkgUpdateOne) SetNillableCompletedAt(t *time.Time) *PkgUpdateOne {
	if t != nil {
		puo.SetCompletedAt(*t)
	}
	return puo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (puo *PkgUpdateOne) ClearCompletedAt() *PkgUpdateOne {
	puo.mutation.ClearCompletedAt()
	return puo
}

// AddPreservationActionIDs adds the "preservation_actions" edge to the PreservationAction entity by IDs.
func (puo *PkgUpdateOne) AddPreservationActionIDs(ids ...int) *PkgUpdateOne {
	puo.mutation.AddPreservationActionIDs(ids...)
	return puo
}

// AddPreservationActions adds the "preservation_actions" edges to the PreservationAction entity.
func (puo *PkgUpdateOne) AddPreservationActions(p ...*PreservationAction) *PkgUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPreservationActionIDs(ids...)
}

// Mutation returns the PkgMutation object of the builder.
func (puo *PkgUpdateOne) Mutation() *PkgMutation {
	return puo.mutation
}

// ClearPreservationActions clears all "preservation_actions" edges to the PreservationAction entity.
func (puo *PkgUpdateOne) ClearPreservationActions() *PkgUpdateOne {
	puo.mutation.ClearPreservationActions()
	return puo
}

// RemovePreservationActionIDs removes the "preservation_actions" edge to PreservationAction entities by IDs.
func (puo *PkgUpdateOne) RemovePreservationActionIDs(ids ...int) *PkgUpdateOne {
	puo.mutation.RemovePreservationActionIDs(ids...)
	return puo
}

// RemovePreservationActions removes "preservation_actions" edges to PreservationAction entities.
func (puo *PkgUpdateOne) RemovePreservationActions(p ...*PreservationAction) *PkgUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePreservationActionIDs(ids...)
}

// Where appends a list predicates to the PkgUpdate builder.
func (puo *PkgUpdateOne) Where(ps ...predicate.Pkg) *PkgUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PkgUpdateOne) Select(field string, fields ...string) *PkgUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pkg entity.
func (puo *PkgUpdateOne) Save(ctx context.Context) (*Pkg, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PkgUpdateOne) SaveX(ctx context.Context) *Pkg {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PkgUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PkgUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PkgUpdateOne) sqlSave(ctx context.Context) (_node *Pkg, err error) {
	_spec := sqlgraph.NewUpdateSpec(pkg.Table, pkg.Columns, sqlgraph.NewFieldSpec(pkg.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Pkg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pkg.FieldID)
		for _, f := range fields {
			if !pkg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != pkg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(pkg.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.WorkflowID(); ok {
		_spec.SetField(pkg.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := puo.mutation.RunID(); ok {
		_spec.SetField(pkg.FieldRunID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.AipID(); ok {
		_spec.SetField(pkg.FieldAipID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.LocationID(); ok {
		_spec.SetField(pkg.FieldLocationID, field.TypeUUID, value)
	}
	if puo.mutation.LocationIDCleared() {
		_spec.ClearField(pkg.FieldLocationID, field.TypeUUID)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(pkg.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(pkg.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.StartedAt(); ok {
		_spec.SetField(pkg.FieldStartedAt, field.TypeTime, value)
	}
	if puo.mutation.StartedAtCleared() {
		_spec.ClearField(pkg.FieldStartedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.CompletedAt(); ok {
		_spec.SetField(pkg.FieldCompletedAt, field.TypeTime, value)
	}
	if puo.mutation.CompletedAtCleared() {
		_spec.ClearField(pkg.FieldCompletedAt, field.TypeTime)
	}
	if puo.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pkg.PreservationActionsTable,
			Columns: []string{pkg.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPreservationActionsIDs(); len(nodes) > 0 && !puo.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pkg.PreservationActionsTable,
			Columns: []string{pkg.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PreservationActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pkg.PreservationActionsTable,
			Columns: []string{pkg.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pkg{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
