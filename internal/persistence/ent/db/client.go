// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/pkg"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationaction"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationtask"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Pkg is the client for interacting with the Pkg builders.
	Pkg *PkgClient
	// PreservationAction is the client for interacting with the PreservationAction builders.
	PreservationAction *PreservationActionClient
	// PreservationTask is the client for interacting with the PreservationTask builders.
	PreservationTask *PreservationTaskClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Pkg = NewPkgClient(c.config)
	c.PreservationAction = NewPreservationActionClient(c.config)
	c.PreservationTask = NewPreservationTaskClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("db: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("db: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Pkg:                NewPkgClient(cfg),
		PreservationAction: NewPreservationActionClient(cfg),
		PreservationTask:   NewPreservationTaskClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Pkg:                NewPkgClient(cfg),
		PreservationAction: NewPreservationActionClient(cfg),
		PreservationTask:   NewPreservationTaskClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Pkg.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Pkg.Use(hooks...)
	c.PreservationAction.Use(hooks...)
	c.PreservationTask.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Pkg.Intercept(interceptors...)
	c.PreservationAction.Intercept(interceptors...)
	c.PreservationTask.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *PkgMutation:
		return c.Pkg.mutate(ctx, m)
	case *PreservationActionMutation:
		return c.PreservationAction.mutate(ctx, m)
	case *PreservationTaskMutation:
		return c.PreservationTask.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("db: unknown mutation type %T", m)
	}
}

// PkgClient is a client for the Pkg schema.
type PkgClient struct {
	config
}

// NewPkgClient returns a client for the Pkg from the given config.
func NewPkgClient(c config) *PkgClient {
	return &PkgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pkg.Hooks(f(g(h())))`.
func (c *PkgClient) Use(hooks ...Hook) {
	c.hooks.Pkg = append(c.hooks.Pkg, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pkg.Intercept(f(g(h())))`.
func (c *PkgClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pkg = append(c.inters.Pkg, interceptors...)
}

// Create returns a builder for creating a Pkg entity.
func (c *PkgClient) Create() *PkgCreate {
	mutation := newPkgMutation(c.config, OpCreate)
	return &PkgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pkg entities.
func (c *PkgClient) CreateBulk(builders ...*PkgCreate) *PkgCreateBulk {
	return &PkgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pkg.
func (c *PkgClient) Update() *PkgUpdate {
	mutation := newPkgMutation(c.config, OpUpdate)
	return &PkgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PkgClient) UpdateOne(pk *Pkg) *PkgUpdateOne {
	mutation := newPkgMutation(c.config, OpUpdateOne, withPkg(pk))
	return &PkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PkgClient) UpdateOneID(id int) *PkgUpdateOne {
	mutation := newPkgMutation(c.config, OpUpdateOne, withPkgID(id))
	return &PkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pkg.
func (c *PkgClient) Delete() *PkgDelete {
	mutation := newPkgMutation(c.config, OpDelete)
	return &PkgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PkgClient) DeleteOne(pk *Pkg) *PkgDeleteOne {
	return c.DeleteOneID(pk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PkgClient) DeleteOneID(id int) *PkgDeleteOne {
	builder := c.Delete().Where(pkg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PkgDeleteOne{builder}
}

// Query returns a query builder for Pkg.
func (c *PkgClient) Query() *PkgQuery {
	return &PkgQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePkg},
		inters: c.Interceptors(),
	}
}

// Get returns a Pkg entity by its id.
func (c *PkgClient) Get(ctx context.Context, id int) (*Pkg, error) {
	return c.Query().Where(pkg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PkgClient) GetX(ctx context.Context, id int) *Pkg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPreservationActions queries the preservation_actions edge of a Pkg.
func (c *PkgClient) QueryPreservationActions(pk *Pkg) *PreservationActionQuery {
	query := (&PreservationActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pkg.Table, pkg.FieldID, id),
			sqlgraph.To(preservationaction.Table, preservationaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pkg.PreservationActionsTable, pkg.PreservationActionsColumn),
		)
		fromV = sqlgraph.Neighbors(pk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PkgClient) Hooks() []Hook {
	return c.hooks.Pkg
}

// Interceptors returns the client interceptors.
func (c *PkgClient) Interceptors() []Interceptor {
	return c.inters.Pkg
}

func (c *PkgClient) mutate(ctx context.Context, m *PkgMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PkgCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PkgUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PkgDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Pkg mutation op: %q", m.Op())
	}
}

// PreservationActionClient is a client for the PreservationAction schema.
type PreservationActionClient struct {
	config
}

// NewPreservationActionClient returns a client for the PreservationAction from the given config.
func NewPreservationActionClient(c config) *PreservationActionClient {
	return &PreservationActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `preservationaction.Hooks(f(g(h())))`.
func (c *PreservationActionClient) Use(hooks ...Hook) {
	c.hooks.PreservationAction = append(c.hooks.PreservationAction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `preservationaction.Intercept(f(g(h())))`.
func (c *PreservationActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.PreservationAction = append(c.inters.PreservationAction, interceptors...)
}

// Create returns a builder for creating a PreservationAction entity.
func (c *PreservationActionClient) Create() *PreservationActionCreate {
	mutation := newPreservationActionMutation(c.config, OpCreate)
	return &PreservationActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PreservationAction entities.
func (c *PreservationActionClient) CreateBulk(builders ...*PreservationActionCreate) *PreservationActionCreateBulk {
	return &PreservationActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PreservationAction.
func (c *PreservationActionClient) Update() *PreservationActionUpdate {
	mutation := newPreservationActionMutation(c.config, OpUpdate)
	return &PreservationActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PreservationActionClient) UpdateOne(pa *PreservationAction) *PreservationActionUpdateOne {
	mutation := newPreservationActionMutation(c.config, OpUpdateOne, withPreservationAction(pa))
	return &PreservationActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PreservationActionClient) UpdateOneID(id int) *PreservationActionUpdateOne {
	mutation := newPreservationActionMutation(c.config, OpUpdateOne, withPreservationActionID(id))
	return &PreservationActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PreservationAction.
func (c *PreservationActionClient) Delete() *PreservationActionDelete {
	mutation := newPreservationActionMutation(c.config, OpDelete)
	return &PreservationActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PreservationActionClient) DeleteOne(pa *PreservationAction) *PreservationActionDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PreservationActionClient) DeleteOneID(id int) *PreservationActionDeleteOne {
	builder := c.Delete().Where(preservationaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PreservationActionDeleteOne{builder}
}

// Query returns a query builder for PreservationAction.
func (c *PreservationActionClient) Query() *PreservationActionQuery {
	return &PreservationActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePreservationAction},
		inters: c.Interceptors(),
	}
}

// Get returns a PreservationAction entity by its id.
func (c *PreservationActionClient) Get(ctx context.Context, id int) (*PreservationAction, error) {
	return c.Query().Where(preservationaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PreservationActionClient) GetX(ctx context.Context, id int) *PreservationAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPackage queries the package edge of a PreservationAction.
func (c *PreservationActionClient) QueryPackage(pa *PreservationAction) *PkgQuery {
	query := (&PkgClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preservationaction.Table, preservationaction.FieldID, id),
			sqlgraph.To(pkg.Table, pkg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, preservationaction.PackageTable, preservationaction.PackageColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a PreservationAction.
func (c *PreservationActionClient) QueryTasks(pa *PreservationAction) *PreservationTaskQuery {
	query := (&PreservationTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preservationaction.Table, preservationaction.FieldID, id),
			sqlgraph.To(preservationtask.Table, preservationtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, preservationaction.TasksTable, preservationaction.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PreservationActionClient) Hooks() []Hook {
	return c.hooks.PreservationAction
}

// Interceptors returns the client interceptors.
func (c *PreservationActionClient) Interceptors() []Interceptor {
	return c.inters.PreservationAction
}

func (c *PreservationActionClient) mutate(ctx context.Context, m *PreservationActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PreservationActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PreservationActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PreservationActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PreservationActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown PreservationAction mutation op: %q", m.Op())
	}
}

// PreservationTaskClient is a client for the PreservationTask schema.
type PreservationTaskClient struct {
	config
}

// NewPreservationTaskClient returns a client for the PreservationTask from the given config.
func NewPreservationTaskClient(c config) *PreservationTaskClient {
	return &PreservationTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `preservationtask.Hooks(f(g(h())))`.
func (c *PreservationTaskClient) Use(hooks ...Hook) {
	c.hooks.PreservationTask = append(c.hooks.PreservationTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `preservationtask.Intercept(f(g(h())))`.
func (c *PreservationTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.PreservationTask = append(c.inters.PreservationTask, interceptors...)
}

// Create returns a builder for creating a PreservationTask entity.
func (c *PreservationTaskClient) Create() *PreservationTaskCreate {
	mutation := newPreservationTaskMutation(c.config, OpCreate)
	return &PreservationTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PreservationTask entities.
func (c *PreservationTaskClient) CreateBulk(builders ...*PreservationTaskCreate) *PreservationTaskCreateBulk {
	return &PreservationTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PreservationTask.
func (c *PreservationTaskClient) Update() *PreservationTaskUpdate {
	mutation := newPreservationTaskMutation(c.config, OpUpdate)
	return &PreservationTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PreservationTaskClient) UpdateOne(pt *PreservationTask) *PreservationTaskUpdateOne {
	mutation := newPreservationTaskMutation(c.config, OpUpdateOne, withPreservationTask(pt))
	return &PreservationTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PreservationTaskClient) UpdateOneID(id int) *PreservationTaskUpdateOne {
	mutation := newPreservationTaskMutation(c.config, OpUpdateOne, withPreservationTaskID(id))
	return &PreservationTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PreservationTask.
func (c *PreservationTaskClient) Delete() *PreservationTaskDelete {
	mutation := newPreservationTaskMutation(c.config, OpDelete)
	return &PreservationTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PreservationTaskClient) DeleteOne(pt *PreservationTask) *PreservationTaskDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PreservationTaskClient) DeleteOneID(id int) *PreservationTaskDeleteOne {
	builder := c.Delete().Where(preservationtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PreservationTaskDeleteOne{builder}
}

// Query returns a query builder for PreservationTask.
func (c *PreservationTaskClient) Query() *PreservationTaskQuery {
	return &PreservationTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePreservationTask},
		inters: c.Interceptors(),
	}
}

// Get returns a PreservationTask entity by its id.
func (c *PreservationTaskClient) Get(ctx context.Context, id int) (*PreservationTask, error) {
	return c.Query().Where(preservationtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PreservationTaskClient) GetX(ctx context.Context, id int) *PreservationTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAction queries the action edge of a PreservationTask.
func (c *PreservationTaskClient) QueryAction(pt *PreservationTask) *PreservationActionQuery {
	query := (&PreservationActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preservationtask.Table, preservationtask.FieldID, id),
			sqlgraph.To(preservationaction.Table, preservationaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, preservationtask.ActionTable, preservationtask.ActionColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PreservationTaskClient) Hooks() []Hook {
	return c.hooks.PreservationTask
}

// Interceptors returns the client interceptors.
func (c *PreservationTaskClient) Interceptors() []Interceptor {
	return c.inters.PreservationTask
}

func (c *PreservationTaskClient) mutate(ctx context.Context, m *PreservationTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PreservationTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PreservationTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PreservationTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PreservationTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown PreservationTask mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Pkg, PreservationAction, PreservationTask []ent.Hook
	}
	inters struct {
		Pkg, PreservationAction, PreservationTask []ent.Interceptor
	}
)
