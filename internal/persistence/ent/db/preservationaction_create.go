// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/pkg"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationaction"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationtask"
)

// PreservationActionCreate is the builder for creating a PreservationAction entity.
type PreservationActionCreate struct {
	config
	mutation *PreservationActionMutation
	hooks    []Hook
}

// SetWorkflowID sets the "workflow_id" field.
func (pac *PreservationActionCreate) SetWorkflowID(s string) *PreservationActionCreate {
	pac.mutation.SetWorkflowID(s)
	return pac
}

// SetType sets the "type" field.
func (pac *PreservationActionCreate) SetType(i int8) *PreservationActionCreate {
	pac.mutation.SetType(i)
	return pac
}

// SetStatus sets the "status" field.
func (pac *PreservationActionCreate) SetStatus(i int8) *PreservationActionCreate {
	pac.mutation.SetStatus(i)
	return pac
}

// SetStartedAt sets the "started_at" field.
func (pac *PreservationActionCreate) SetStartedAt(t time.Time) *PreservationActionCreate {
	pac.mutation.SetStartedAt(t)
	return pac
}

// SetCompletedAt sets the "completed_at" field.
func (pac *PreservationActionCreate) SetCompletedAt(t time.Time) *PreservationActionCreate {
	pac.mutation.SetCompletedAt(t)
	return pac
}

// SetPackageID sets the "package_id" field.
func (pac *PreservationActionCreate) SetPackageID(i int) *PreservationActionCreate {
	pac.mutation.SetPackageID(i)
	return pac
}

// SetPackage sets the "package" edge to the Pkg entity.
func (pac *PreservationActionCreate) SetPackage(p *Pkg) *PreservationActionCreate {
	return pac.SetPackageID(p.ID)
}

// AddTaskIDs adds the "tasks" edge to the PreservationTask entity by IDs.
func (pac *PreservationActionCreate) AddTaskIDs(ids ...int) *PreservationActionCreate {
	pac.mutation.AddTaskIDs(ids...)
	return pac
}

// AddTasks adds the "tasks" edges to the PreservationTask entity.
func (pac *PreservationActionCreate) AddTasks(p ...*PreservationTask) *PreservationActionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pac.AddTaskIDs(ids...)
}

// Mutation returns the PreservationActionMutation object of the builder.
func (pac *PreservationActionCreate) Mutation() *PreservationActionMutation {
	return pac.mutation
}

// Save creates the PreservationAction in the database.
func (pac *PreservationActionCreate) Save(ctx context.Context) (*PreservationAction, error) {
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PreservationActionCreate) SaveX(ctx context.Context) *PreservationAction {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PreservationActionCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PreservationActionCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PreservationActionCreate) check() error {
	if _, ok := pac.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`db: missing required field "PreservationAction.workflow_id"`)}
	}
	if _, ok := pac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "PreservationAction.type"`)}
	}
	if _, ok := pac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "PreservationAction.status"`)}
	}
	if _, ok := pac.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`db: missing required field "PreservationAction.started_at"`)}
	}
	if _, ok := pac.mutation.CompletedAt(); !ok {
		return &ValidationError{Name: "completed_at", err: errors.New(`db: missing required field "PreservationAction.completed_at"`)}
	}
	if _, ok := pac.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`db: missing required field "PreservationAction.package_id"`)}
	}
	if v, ok := pac.mutation.PackageID(); ok {
		if err := preservationaction.PackageIDValidator(v); err != nil {
			return &ValidationError{Name: "package_id", err: fmt.Errorf(`db: validator failed for field "PreservationAction.package_id": %w`, err)}
		}
	}
	if _, ok := pac.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`db: missing required edge "PreservationAction.package"`)}
	}
	return nil
}

func (pac *PreservationActionCreate) sqlSave(ctx context.Context) (*PreservationAction, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PreservationActionCreate) createSpec() (*PreservationAction, *sqlgraph.CreateSpec) {
	var (
		_node = &PreservationAction{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(preservationaction.Table, sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt))
	)
	if value, ok := pac.mutation.WorkflowID(); ok {
		_spec.SetField(preservationaction.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	if value, ok := pac.mutation.GetType(); ok {
		_spec.SetField(preservationaction.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if value, ok := pac.mutation.Status(); ok {
		_spec.SetField(preservationaction.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := pac.mutation.StartedAt(); ok {
		_spec.SetField(preservationaction.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := pac.mutation.CompletedAt(); ok {
		_spec.SetField(preservationaction.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if nodes := pac.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   preservationaction.PackageTable,
			Columns: []string{preservationaction.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   preservationaction.TasksTable,
			Columns: []string{preservationaction.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PreservationActionCreateBulk is the builder for creating many PreservationAction entities in bulk.
type PreservationActionCreateBulk struct {
	config
	builders []*PreservationActionCreate
}

// Save creates the PreservationAction entities in the database.
func (pacb *PreservationActionCreateBulk) Save(ctx context.Context) ([]*PreservationAction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PreservationAction, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PreservationActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PreservationActionCreateBulk) SaveX(ctx context.Context) []*PreservationAction {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PreservationActionCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PreservationActionCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
