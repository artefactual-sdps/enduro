// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/enums"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/predicate"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/sip"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/task"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/workflow"
)

// WorkflowUpdate is the builder for updating Workflow entities.
type WorkflowUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowMutation
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (wu *WorkflowUpdate) Where(ps ...predicate.Workflow) *WorkflowUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetTemporalID sets the "temporal_id" field.
func (wu *WorkflowUpdate) SetTemporalID(s string) *WorkflowUpdate {
	wu.mutation.SetTemporalID(s)
	return wu
}

// SetNillableTemporalID sets the "temporal_id" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableTemporalID(s *string) *WorkflowUpdate {
	if s != nil {
		wu.SetTemporalID(*s)
	}
	return wu
}

// SetType sets the "type" field.
func (wu *WorkflowUpdate) SetType(et enums.WorkflowType) *WorkflowUpdate {
	wu.mutation.SetType(et)
	return wu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableType(et *enums.WorkflowType) *WorkflowUpdate {
	if et != nil {
		wu.SetType(*et)
	}
	return wu
}

// SetStatus sets the "status" field.
func (wu *WorkflowUpdate) SetStatus(i int8) *WorkflowUpdate {
	wu.mutation.ResetStatus()
	wu.mutation.SetStatus(i)
	return wu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableStatus(i *int8) *WorkflowUpdate {
	if i != nil {
		wu.SetStatus(*i)
	}
	return wu
}

// AddStatus adds i to the "status" field.
func (wu *WorkflowUpdate) AddStatus(i int8) *WorkflowUpdate {
	wu.mutation.AddStatus(i)
	return wu
}

// SetStartedAt sets the "started_at" field.
func (wu *WorkflowUpdate) SetStartedAt(t time.Time) *WorkflowUpdate {
	wu.mutation.SetStartedAt(t)
	return wu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableStartedAt(t *time.Time) *WorkflowUpdate {
	if t != nil {
		wu.SetStartedAt(*t)
	}
	return wu
}

// ClearStartedAt clears the value of the "started_at" field.
func (wu *WorkflowUpdate) ClearStartedAt() *WorkflowUpdate {
	wu.mutation.ClearStartedAt()
	return wu
}

// SetCompletedAt sets the "completed_at" field.
func (wu *WorkflowUpdate) SetCompletedAt(t time.Time) *WorkflowUpdate {
	wu.mutation.SetCompletedAt(t)
	return wu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableCompletedAt(t *time.Time) *WorkflowUpdate {
	if t != nil {
		wu.SetCompletedAt(*t)
	}
	return wu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (wu *WorkflowUpdate) ClearCompletedAt() *WorkflowUpdate {
	wu.mutation.ClearCompletedAt()
	return wu
}

// SetSipID sets the "sip_id" field.
func (wu *WorkflowUpdate) SetSipID(i int) *WorkflowUpdate {
	wu.mutation.SetSipID(i)
	return wu
}

// SetNillableSipID sets the "sip_id" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableSipID(i *int) *WorkflowUpdate {
	if i != nil {
		wu.SetSipID(*i)
	}
	return wu
}

// SetSip sets the "sip" edge to the SIP entity.
func (wu *WorkflowUpdate) SetSip(s *SIP) *WorkflowUpdate {
	return wu.SetSipID(s.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (wu *WorkflowUpdate) AddTaskIDs(ids ...int) *WorkflowUpdate {
	wu.mutation.AddTaskIDs(ids...)
	return wu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (wu *WorkflowUpdate) AddTasks(t ...*Task) *WorkflowUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.AddTaskIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wu *WorkflowUpdate) Mutation() *WorkflowMutation {
	return wu.mutation
}

// ClearSip clears the "sip" edge to the SIP entity.
func (wu *WorkflowUpdate) ClearSip() *WorkflowUpdate {
	wu.mutation.ClearSip()
	return wu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (wu *WorkflowUpdate) ClearTasks() *WorkflowUpdate {
	wu.mutation.ClearTasks()
	return wu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (wu *WorkflowUpdate) RemoveTaskIDs(ids ...int) *WorkflowUpdate {
	wu.mutation.RemoveTaskIDs(ids...)
	return wu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (wu *WorkflowUpdate) RemoveTasks(t ...*Task) *WorkflowUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkflowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkflowUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkflowUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkflowUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkflowUpdate) check() error {
	if v, ok := wu.mutation.GetType(); ok {
		if err := workflow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Workflow.type": %w`, err)}
		}
	}
	if v, ok := wu.mutation.SipID(); ok {
		if err := workflow.SipIDValidator(v); err != nil {
			return &ValidationError{Name: "sip_id", err: fmt.Errorf(`db: validator failed for field "Workflow.sip_id": %w`, err)}
		}
	}
	if wu.mutation.SipCleared() && len(wu.mutation.SipIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Workflow.sip"`)
	}
	return nil
}

func (wu *WorkflowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.TemporalID(); ok {
		_spec.SetField(workflow.FieldTemporalID, field.TypeString, value)
	}
	if value, ok := wu.mutation.GetType(); ok {
		_spec.SetField(workflow.FieldType, field.TypeEnum, value)
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(workflow.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wu.mutation.AddedStatus(); ok {
		_spec.AddField(workflow.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wu.mutation.StartedAt(); ok {
		_spec.SetField(workflow.FieldStartedAt, field.TypeTime, value)
	}
	if wu.mutation.StartedAtCleared() {
		_spec.ClearField(workflow.FieldStartedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.CompletedAt(); ok {
		_spec.SetField(workflow.FieldCompletedAt, field.TypeTime, value)
	}
	if wu.mutation.CompletedAtCleared() {
		_spec.ClearField(workflow.FieldCompletedAt, field.TypeTime)
	}
	if wu.mutation.SipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.SipTable,
			Columns: []string{workflow.SipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.SipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.SipTable,
			Columns: []string{workflow.SipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.TasksTable,
			Columns: []string{workflow.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !wu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.TasksTable,
			Columns: []string{workflow.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.TasksTable,
			Columns: []string{workflow.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkflowUpdateOne is the builder for updating a single Workflow entity.
type WorkflowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowMutation
}

// SetTemporalID sets the "temporal_id" field.
func (wuo *WorkflowUpdateOne) SetTemporalID(s string) *WorkflowUpdateOne {
	wuo.mutation.SetTemporalID(s)
	return wuo
}

// SetNillableTemporalID sets the "temporal_id" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableTemporalID(s *string) *WorkflowUpdateOne {
	if s != nil {
		wuo.SetTemporalID(*s)
	}
	return wuo
}

// SetType sets the "type" field.
func (wuo *WorkflowUpdateOne) SetType(et enums.WorkflowType) *WorkflowUpdateOne {
	wuo.mutation.SetType(et)
	return wuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableType(et *enums.WorkflowType) *WorkflowUpdateOne {
	if et != nil {
		wuo.SetType(*et)
	}
	return wuo
}

// SetStatus sets the "status" field.
func (wuo *WorkflowUpdateOne) SetStatus(i int8) *WorkflowUpdateOne {
	wuo.mutation.ResetStatus()
	wuo.mutation.SetStatus(i)
	return wuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableStatus(i *int8) *WorkflowUpdateOne {
	if i != nil {
		wuo.SetStatus(*i)
	}
	return wuo
}

// AddStatus adds i to the "status" field.
func (wuo *WorkflowUpdateOne) AddStatus(i int8) *WorkflowUpdateOne {
	wuo.mutation.AddStatus(i)
	return wuo
}

// SetStartedAt sets the "started_at" field.
func (wuo *WorkflowUpdateOne) SetStartedAt(t time.Time) *WorkflowUpdateOne {
	wuo.mutation.SetStartedAt(t)
	return wuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableStartedAt(t *time.Time) *WorkflowUpdateOne {
	if t != nil {
		wuo.SetStartedAt(*t)
	}
	return wuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (wuo *WorkflowUpdateOne) ClearStartedAt() *WorkflowUpdateOne {
	wuo.mutation.ClearStartedAt()
	return wuo
}

// SetCompletedAt sets the "completed_at" field.
func (wuo *WorkflowUpdateOne) SetCompletedAt(t time.Time) *WorkflowUpdateOne {
	wuo.mutation.SetCompletedAt(t)
	return wuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableCompletedAt(t *time.Time) *WorkflowUpdateOne {
	if t != nil {
		wuo.SetCompletedAt(*t)
	}
	return wuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (wuo *WorkflowUpdateOne) ClearCompletedAt() *WorkflowUpdateOne {
	wuo.mutation.ClearCompletedAt()
	return wuo
}

// SetSipID sets the "sip_id" field.
func (wuo *WorkflowUpdateOne) SetSipID(i int) *WorkflowUpdateOne {
	wuo.mutation.SetSipID(i)
	return wuo
}

// SetNillableSipID sets the "sip_id" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableSipID(i *int) *WorkflowUpdateOne {
	if i != nil {
		wuo.SetSipID(*i)
	}
	return wuo
}

// SetSip sets the "sip" edge to the SIP entity.
func (wuo *WorkflowUpdateOne) SetSip(s *SIP) *WorkflowUpdateOne {
	return wuo.SetSipID(s.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (wuo *WorkflowUpdateOne) AddTaskIDs(ids ...int) *WorkflowUpdateOne {
	wuo.mutation.AddTaskIDs(ids...)
	return wuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (wuo *WorkflowUpdateOne) AddTasks(t ...*Task) *WorkflowUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.AddTaskIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wuo *WorkflowUpdateOne) Mutation() *WorkflowMutation {
	return wuo.mutation
}

// ClearSip clears the "sip" edge to the SIP entity.
func (wuo *WorkflowUpdateOne) ClearSip() *WorkflowUpdateOne {
	wuo.mutation.ClearSip()
	return wuo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (wuo *WorkflowUpdateOne) ClearTasks() *WorkflowUpdateOne {
	wuo.mutation.ClearTasks()
	return wuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveTaskIDs(ids ...int) *WorkflowUpdateOne {
	wuo.mutation.RemoveTaskIDs(ids...)
	return wuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (wuo *WorkflowUpdateOne) RemoveTasks(t ...*Task) *WorkflowUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (wuo *WorkflowUpdateOne) Where(ps ...predicate.Workflow) *WorkflowUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkflowUpdateOne) Select(field string, fields ...string) *WorkflowUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workflow entity.
func (wuo *WorkflowUpdateOne) Save(ctx context.Context) (*Workflow, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) SaveX(ctx context.Context) *Workflow {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkflowUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkflowUpdateOne) check() error {
	if v, ok := wuo.mutation.GetType(); ok {
		if err := workflow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Workflow.type": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.SipID(); ok {
		if err := workflow.SipIDValidator(v); err != nil {
			return &ValidationError{Name: "sip_id", err: fmt.Errorf(`db: validator failed for field "Workflow.sip_id": %w`, err)}
		}
	}
	if wuo.mutation.SipCleared() && len(wuo.mutation.SipIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Workflow.sip"`)
	}
	return nil
}

func (wuo *WorkflowUpdateOne) sqlSave(ctx context.Context) (_node *Workflow, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Workflow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflow.FieldID)
		for _, f := range fields {
			if !workflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != workflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.TemporalID(); ok {
		_spec.SetField(workflow.FieldTemporalID, field.TypeString, value)
	}
	if value, ok := wuo.mutation.GetType(); ok {
		_spec.SetField(workflow.FieldType, field.TypeEnum, value)
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(workflow.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wuo.mutation.AddedStatus(); ok {
		_spec.AddField(workflow.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wuo.mutation.StartedAt(); ok {
		_spec.SetField(workflow.FieldStartedAt, field.TypeTime, value)
	}
	if wuo.mutation.StartedAtCleared() {
		_spec.ClearField(workflow.FieldStartedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.CompletedAt(); ok {
		_spec.SetField(workflow.FieldCompletedAt, field.TypeTime, value)
	}
	if wuo.mutation.CompletedAtCleared() {
		_spec.ClearField(workflow.FieldCompletedAt, field.TypeTime)
	}
	if wuo.mutation.SipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.SipTable,
			Columns: []string{workflow.SipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.SipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.SipTable,
			Columns: []string{workflow.SipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.TasksTable,
			Columns: []string{workflow.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !wuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.TasksTable,
			Columns: []string{workflow.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.TasksTable,
			Columns: []string{workflow.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workflow{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
