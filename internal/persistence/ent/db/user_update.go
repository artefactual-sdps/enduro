// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/predicate"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/sip"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetOidcIss sets the "oidc_iss" field.
func (uu *UserUpdate) SetOidcIss(s string) *UserUpdate {
	uu.mutation.SetOidcIss(s)
	return uu
}

// SetNillableOidcIss sets the "oidc_iss" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOidcIss(s *string) *UserUpdate {
	if s != nil {
		uu.SetOidcIss(*s)
	}
	return uu
}

// ClearOidcIss clears the value of the "oidc_iss" field.
func (uu *UserUpdate) ClearOidcIss() *UserUpdate {
	uu.mutation.ClearOidcIss()
	return uu
}

// SetOidcSub sets the "oidc_sub" field.
func (uu *UserUpdate) SetOidcSub(s string) *UserUpdate {
	uu.mutation.SetOidcSub(s)
	return uu
}

// SetNillableOidcSub sets the "oidc_sub" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOidcSub(s *string) *UserUpdate {
	if s != nil {
		uu.SetOidcSub(*s)
	}
	return uu
}

// ClearOidcSub clears the value of the "oidc_sub" field.
func (uu *UserUpdate) ClearOidcSub() *UserUpdate {
	uu.mutation.ClearOidcSub()
	return uu
}

// AddUploadedSipIDs adds the "uploaded_sips" edge to the SIP entity by IDs.
func (uu *UserUpdate) AddUploadedSipIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUploadedSipIDs(ids...)
	return uu
}

// AddUploadedSips adds the "uploaded_sips" edges to the SIP entity.
func (uu *UserUpdate) AddUploadedSips(s ...*SIP) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddUploadedSipIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUploadedSips clears all "uploaded_sips" edges to the SIP entity.
func (uu *UserUpdate) ClearUploadedSips() *UserUpdate {
	uu.mutation.ClearUploadedSips()
	return uu
}

// RemoveUploadedSipIDs removes the "uploaded_sips" edge to SIP entities by IDs.
func (uu *UserUpdate) RemoveUploadedSipIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUploadedSipIDs(ids...)
	return uu
}

// RemoveUploadedSips removes "uploaded_sips" edges to SIP entities.
func (uu *UserUpdate) RemoveUploadedSips(s ...*SIP) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveUploadedSipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.OidcIss(); ok {
		_spec.SetField(user.FieldOidcIss, field.TypeString, value)
	}
	if uu.mutation.OidcIssCleared() {
		_spec.ClearField(user.FieldOidcIss, field.TypeString)
	}
	if value, ok := uu.mutation.OidcSub(); ok {
		_spec.SetField(user.FieldOidcSub, field.TypeString, value)
	}
	if uu.mutation.OidcSubCleared() {
		_spec.ClearField(user.FieldOidcSub, field.TypeString)
	}
	if uu.mutation.UploadedSipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedSipsTable,
			Columns: []string{user.UploadedSipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUploadedSipsIDs(); len(nodes) > 0 && !uu.mutation.UploadedSipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedSipsTable,
			Columns: []string{user.UploadedSipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UploadedSipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedSipsTable,
			Columns: []string{user.UploadedSipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetOidcIss sets the "oidc_iss" field.
func (uuo *UserUpdateOne) SetOidcIss(s string) *UserUpdateOne {
	uuo.mutation.SetOidcIss(s)
	return uuo
}

// SetNillableOidcIss sets the "oidc_iss" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOidcIss(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOidcIss(*s)
	}
	return uuo
}

// ClearOidcIss clears the value of the "oidc_iss" field.
func (uuo *UserUpdateOne) ClearOidcIss() *UserUpdateOne {
	uuo.mutation.ClearOidcIss()
	return uuo
}

// SetOidcSub sets the "oidc_sub" field.
func (uuo *UserUpdateOne) SetOidcSub(s string) *UserUpdateOne {
	uuo.mutation.SetOidcSub(s)
	return uuo
}

// SetNillableOidcSub sets the "oidc_sub" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOidcSub(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOidcSub(*s)
	}
	return uuo
}

// ClearOidcSub clears the value of the "oidc_sub" field.
func (uuo *UserUpdateOne) ClearOidcSub() *UserUpdateOne {
	uuo.mutation.ClearOidcSub()
	return uuo
}

// AddUploadedSipIDs adds the "uploaded_sips" edge to the SIP entity by IDs.
func (uuo *UserUpdateOne) AddUploadedSipIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUploadedSipIDs(ids...)
	return uuo
}

// AddUploadedSips adds the "uploaded_sips" edges to the SIP entity.
func (uuo *UserUpdateOne) AddUploadedSips(s ...*SIP) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddUploadedSipIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUploadedSips clears all "uploaded_sips" edges to the SIP entity.
func (uuo *UserUpdateOne) ClearUploadedSips() *UserUpdateOne {
	uuo.mutation.ClearUploadedSips()
	return uuo
}

// RemoveUploadedSipIDs removes the "uploaded_sips" edge to SIP entities by IDs.
func (uuo *UserUpdateOne) RemoveUploadedSipIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUploadedSipIDs(ids...)
	return uuo
}

// RemoveUploadedSips removes "uploaded_sips" edges to SIP entities.
func (uuo *UserUpdateOne) RemoveUploadedSips(s ...*SIP) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveUploadedSipIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.OidcIss(); ok {
		_spec.SetField(user.FieldOidcIss, field.TypeString, value)
	}
	if uuo.mutation.OidcIssCleared() {
		_spec.ClearField(user.FieldOidcIss, field.TypeString)
	}
	if value, ok := uuo.mutation.OidcSub(); ok {
		_spec.SetField(user.FieldOidcSub, field.TypeString, value)
	}
	if uuo.mutation.OidcSubCleared() {
		_spec.ClearField(user.FieldOidcSub, field.TypeString)
	}
	if uuo.mutation.UploadedSipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedSipsTable,
			Columns: []string{user.UploadedSipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUploadedSipsIDs(); len(nodes) > 0 && !uuo.mutation.UploadedSipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedSipsTable,
			Columns: []string{user.UploadedSipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UploadedSipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UploadedSipsTable,
			Columns: []string{user.UploadedSipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
