// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/sip"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/workflow"
	"github.com/google/uuid"
)

// SIPCreate is the builder for creating a SIP entity.
type SIPCreate struct {
	config
	mutation *SIPMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SIPCreate) SetName(s string) *SIPCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetAipID sets the "aip_id" field.
func (sc *SIPCreate) SetAipID(u uuid.UUID) *SIPCreate {
	sc.mutation.SetAipID(u)
	return sc
}

// SetNillableAipID sets the "aip_id" field if the given value is not nil.
func (sc *SIPCreate) SetNillableAipID(u *uuid.UUID) *SIPCreate {
	if u != nil {
		sc.SetAipID(*u)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SIPCreate) SetStatus(i int8) *SIPCreate {
	sc.mutation.SetStatus(i)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SIPCreate) SetCreatedAt(t time.Time) *SIPCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SIPCreate) SetNillableCreatedAt(t *time.Time) *SIPCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetStartedAt sets the "started_at" field.
func (sc *SIPCreate) SetStartedAt(t time.Time) *SIPCreate {
	sc.mutation.SetStartedAt(t)
	return sc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sc *SIPCreate) SetNillableStartedAt(t *time.Time) *SIPCreate {
	if t != nil {
		sc.SetStartedAt(*t)
	}
	return sc
}

// SetCompletedAt sets the "completed_at" field.
func (sc *SIPCreate) SetCompletedAt(t time.Time) *SIPCreate {
	sc.mutation.SetCompletedAt(t)
	return sc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sc *SIPCreate) SetNillableCompletedAt(t *time.Time) *SIPCreate {
	if t != nil {
		sc.SetCompletedAt(*t)
	}
	return sc
}

// AddWorkflowIDs adds the "workflows" edge to the Workflow entity by IDs.
func (sc *SIPCreate) AddWorkflowIDs(ids ...int) *SIPCreate {
	sc.mutation.AddWorkflowIDs(ids...)
	return sc
}

// AddWorkflows adds the "workflows" edges to the Workflow entity.
func (sc *SIPCreate) AddWorkflows(w ...*Workflow) *SIPCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return sc.AddWorkflowIDs(ids...)
}

// Mutation returns the SIPMutation object of the builder.
func (sc *SIPCreate) Mutation() *SIPMutation {
	return sc.mutation
}

// Save creates the SIP in the database.
func (sc *SIPCreate) Save(ctx context.Context) (*SIP, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SIPCreate) SaveX(ctx context.Context) *SIP {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SIPCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SIPCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SIPCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := sip.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SIPCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "SIP.name"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "SIP.status"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SIP.created_at"`)}
	}
	return nil
}

func (sc *SIPCreate) sqlSave(ctx context.Context) (*SIP, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SIPCreate) createSpec() (*SIP, *sqlgraph.CreateSpec) {
	var (
		_node = &SIP{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sip.Table, sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(sip.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.AipID(); ok {
		_spec.SetField(sip.FieldAipID, field.TypeUUID, value)
		_node.AipID = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(sip.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(sip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.StartedAt(); ok {
		_spec.SetField(sip.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := sc.mutation.CompletedAt(); ok {
		_spec.SetField(sip.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if nodes := sc.mutation.WorkflowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sip.WorkflowsTable,
			Columns: []string{sip.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SIPCreateBulk is the builder for creating many SIP entities in bulk.
type SIPCreateBulk struct {
	config
	err      error
	builders []*SIPCreate
}

// Save creates the SIP entities in the database.
func (scb *SIPCreateBulk) Save(ctx context.Context) ([]*SIP, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*SIP, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SIPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SIPCreateBulk) SaveX(ctx context.Context) []*SIP {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SIPCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SIPCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
