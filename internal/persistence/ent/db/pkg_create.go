// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/pkg"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationaction"
	"github.com/google/uuid"
)

// PkgCreate is the builder for creating a Pkg entity.
type PkgCreate struct {
	config
	mutation *PkgMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PkgCreate) SetName(s string) *PkgCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetWorkflowID sets the "workflow_id" field.
func (pc *PkgCreate) SetWorkflowID(s string) *PkgCreate {
	pc.mutation.SetWorkflowID(s)
	return pc
}

// SetRunID sets the "run_id" field.
func (pc *PkgCreate) SetRunID(u uuid.UUID) *PkgCreate {
	pc.mutation.SetRunID(u)
	return pc
}

// SetAipID sets the "aip_id" field.
func (pc *PkgCreate) SetAipID(u uuid.UUID) *PkgCreate {
	pc.mutation.SetAipID(u)
	return pc
}

// SetNillableAipID sets the "aip_id" field if the given value is not nil.
func (pc *PkgCreate) SetNillableAipID(u *uuid.UUID) *PkgCreate {
	if u != nil {
		pc.SetAipID(*u)
	}
	return pc
}

// SetLocationID sets the "location_id" field.
func (pc *PkgCreate) SetLocationID(u uuid.UUID) *PkgCreate {
	pc.mutation.SetLocationID(u)
	return pc
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (pc *PkgCreate) SetNillableLocationID(u *uuid.UUID) *PkgCreate {
	if u != nil {
		pc.SetLocationID(*u)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PkgCreate) SetStatus(i int8) *PkgCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PkgCreate) SetCreatedAt(t time.Time) *PkgCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PkgCreate) SetNillableCreatedAt(t *time.Time) *PkgCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetStartedAt sets the "started_at" field.
func (pc *PkgCreate) SetStartedAt(t time.Time) *PkgCreate {
	pc.mutation.SetStartedAt(t)
	return pc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pc *PkgCreate) SetNillableStartedAt(t *time.Time) *PkgCreate {
	if t != nil {
		pc.SetStartedAt(*t)
	}
	return pc
}

// SetCompletedAt sets the "completed_at" field.
func (pc *PkgCreate) SetCompletedAt(t time.Time) *PkgCreate {
	pc.mutation.SetCompletedAt(t)
	return pc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (pc *PkgCreate) SetNillableCompletedAt(t *time.Time) *PkgCreate {
	if t != nil {
		pc.SetCompletedAt(*t)
	}
	return pc
}

// AddPreservationActionIDs adds the "preservation_actions" edge to the PreservationAction entity by IDs.
func (pc *PkgCreate) AddPreservationActionIDs(ids ...int) *PkgCreate {
	pc.mutation.AddPreservationActionIDs(ids...)
	return pc
}

// AddPreservationActions adds the "preservation_actions" edges to the PreservationAction entity.
func (pc *PkgCreate) AddPreservationActions(p ...*PreservationAction) *PkgCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPreservationActionIDs(ids...)
}

// Mutation returns the PkgMutation object of the builder.
func (pc *PkgCreate) Mutation() *PkgMutation {
	return pc.mutation
}

// Save creates the Pkg in the database.
func (pc *PkgCreate) Save(ctx context.Context) (*Pkg, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PkgCreate) SaveX(ctx context.Context) *Pkg {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PkgCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PkgCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PkgCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pkg.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PkgCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Pkg.name"`)}
	}
	if _, ok := pc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`db: missing required field "Pkg.workflow_id"`)}
	}
	if _, ok := pc.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`db: missing required field "Pkg.run_id"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "Pkg.status"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Pkg.created_at"`)}
	}
	return nil
}

func (pc *PkgCreate) sqlSave(ctx context.Context) (*Pkg, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PkgCreate) createSpec() (*Pkg, *sqlgraph.CreateSpec) {
	var (
		_node = &Pkg{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pkg.Table, sqlgraph.NewFieldSpec(pkg.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(pkg.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.WorkflowID(); ok {
		_spec.SetField(pkg.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	if value, ok := pc.mutation.RunID(); ok {
		_spec.SetField(pkg.FieldRunID, field.TypeUUID, value)
		_node.RunID = value
	}
	if value, ok := pc.mutation.AipID(); ok {
		_spec.SetField(pkg.FieldAipID, field.TypeUUID, value)
		_node.AipID = value
	}
	if value, ok := pc.mutation.LocationID(); ok {
		_spec.SetField(pkg.FieldLocationID, field.TypeUUID, value)
		_node.LocationID = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(pkg.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pkg.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.StartedAt(); ok {
		_spec.SetField(pkg.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := pc.mutation.CompletedAt(); ok {
		_spec.SetField(pkg.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if nodes := pc.mutation.PreservationActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pkg.PreservationActionsTable,
			Columns: []string{pkg.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PkgCreateBulk is the builder for creating many Pkg entities in bulk.
type PkgCreateBulk struct {
	config
	err      error
	builders []*PkgCreate
}

// Save creates the Pkg entities in the database.
func (pcb *PkgCreateBulk) Save(ctx context.Context) ([]*Pkg, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pkg, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PkgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PkgCreateBulk) SaveX(ctx context.Context) []*Pkg {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PkgCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PkgCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
