// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/predicate"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationaction"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/sip"
	"github.com/google/uuid"
)

// SIPUpdate is the builder for updating SIP entities.
type SIPUpdate struct {
	config
	hooks    []Hook
	mutation *SIPMutation
}

// Where appends a list predicates to the SIPUpdate builder.
func (su *SIPUpdate) Where(ps ...predicate.SIP) *SIPUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SIPUpdate) SetName(s string) *SIPUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SIPUpdate) SetNillableName(s *string) *SIPUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetWorkflowID sets the "workflow_id" field.
func (su *SIPUpdate) SetWorkflowID(s string) *SIPUpdate {
	su.mutation.SetWorkflowID(s)
	return su
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (su *SIPUpdate) SetNillableWorkflowID(s *string) *SIPUpdate {
	if s != nil {
		su.SetWorkflowID(*s)
	}
	return su
}

// SetRunID sets the "run_id" field.
func (su *SIPUpdate) SetRunID(u uuid.UUID) *SIPUpdate {
	su.mutation.SetRunID(u)
	return su
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (su *SIPUpdate) SetNillableRunID(u *uuid.UUID) *SIPUpdate {
	if u != nil {
		su.SetRunID(*u)
	}
	return su
}

// SetAipID sets the "aip_id" field.
func (su *SIPUpdate) SetAipID(u uuid.UUID) *SIPUpdate {
	su.mutation.SetAipID(u)
	return su
}

// SetNillableAipID sets the "aip_id" field if the given value is not nil.
func (su *SIPUpdate) SetNillableAipID(u *uuid.UUID) *SIPUpdate {
	if u != nil {
		su.SetAipID(*u)
	}
	return su
}

// ClearAipID clears the value of the "aip_id" field.
func (su *SIPUpdate) ClearAipID() *SIPUpdate {
	su.mutation.ClearAipID()
	return su
}

// SetLocationID sets the "location_id" field.
func (su *SIPUpdate) SetLocationID(u uuid.UUID) *SIPUpdate {
	su.mutation.SetLocationID(u)
	return su
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (su *SIPUpdate) SetNillableLocationID(u *uuid.UUID) *SIPUpdate {
	if u != nil {
		su.SetLocationID(*u)
	}
	return su
}

// ClearLocationID clears the value of the "location_id" field.
func (su *SIPUpdate) ClearLocationID() *SIPUpdate {
	su.mutation.ClearLocationID()
	return su
}

// SetStatus sets the "status" field.
func (su *SIPUpdate) SetStatus(i int8) *SIPUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SIPUpdate) SetNillableStatus(i *int8) *SIPUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SIPUpdate) AddStatus(i int8) *SIPUpdate {
	su.mutation.AddStatus(i)
	return su
}

// SetStartedAt sets the "started_at" field.
func (su *SIPUpdate) SetStartedAt(t time.Time) *SIPUpdate {
	su.mutation.SetStartedAt(t)
	return su
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (su *SIPUpdate) SetNillableStartedAt(t *time.Time) *SIPUpdate {
	if t != nil {
		su.SetStartedAt(*t)
	}
	return su
}

// ClearStartedAt clears the value of the "started_at" field.
func (su *SIPUpdate) ClearStartedAt() *SIPUpdate {
	su.mutation.ClearStartedAt()
	return su
}

// SetCompletedAt sets the "completed_at" field.
func (su *SIPUpdate) SetCompletedAt(t time.Time) *SIPUpdate {
	su.mutation.SetCompletedAt(t)
	return su
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (su *SIPUpdate) SetNillableCompletedAt(t *time.Time) *SIPUpdate {
	if t != nil {
		su.SetCompletedAt(*t)
	}
	return su
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (su *SIPUpdate) ClearCompletedAt() *SIPUpdate {
	su.mutation.ClearCompletedAt()
	return su
}

// AddPreservationActionIDs adds the "preservation_actions" edge to the PreservationAction entity by IDs.
func (su *SIPUpdate) AddPreservationActionIDs(ids ...int) *SIPUpdate {
	su.mutation.AddPreservationActionIDs(ids...)
	return su
}

// AddPreservationActions adds the "preservation_actions" edges to the PreservationAction entity.
func (su *SIPUpdate) AddPreservationActions(p ...*PreservationAction) *SIPUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPreservationActionIDs(ids...)
}

// Mutation returns the SIPMutation object of the builder.
func (su *SIPUpdate) Mutation() *SIPMutation {
	return su.mutation
}

// ClearPreservationActions clears all "preservation_actions" edges to the PreservationAction entity.
func (su *SIPUpdate) ClearPreservationActions() *SIPUpdate {
	su.mutation.ClearPreservationActions()
	return su
}

// RemovePreservationActionIDs removes the "preservation_actions" edge to PreservationAction entities by IDs.
func (su *SIPUpdate) RemovePreservationActionIDs(ids ...int) *SIPUpdate {
	su.mutation.RemovePreservationActionIDs(ids...)
	return su
}

// RemovePreservationActions removes "preservation_actions" edges to PreservationAction entities.
func (su *SIPUpdate) RemovePreservationActions(p ...*PreservationAction) *SIPUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePreservationActionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SIPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SIPUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SIPUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SIPUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sip.Table, sip.Columns, sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sip.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.WorkflowID(); ok {
		_spec.SetField(sip.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := su.mutation.RunID(); ok {
		_spec.SetField(sip.FieldRunID, field.TypeUUID, value)
	}
	if value, ok := su.mutation.AipID(); ok {
		_spec.SetField(sip.FieldAipID, field.TypeUUID, value)
	}
	if su.mutation.AipIDCleared() {
		_spec.ClearField(sip.FieldAipID, field.TypeUUID)
	}
	if value, ok := su.mutation.LocationID(); ok {
		_spec.SetField(sip.FieldLocationID, field.TypeUUID, value)
	}
	if su.mutation.LocationIDCleared() {
		_spec.ClearField(sip.FieldLocationID, field.TypeUUID)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(sip.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(sip.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := su.mutation.StartedAt(); ok {
		_spec.SetField(sip.FieldStartedAt, field.TypeTime, value)
	}
	if su.mutation.StartedAtCleared() {
		_spec.ClearField(sip.FieldStartedAt, field.TypeTime)
	}
	if value, ok := su.mutation.CompletedAt(); ok {
		_spec.SetField(sip.FieldCompletedAt, field.TypeTime, value)
	}
	if su.mutation.CompletedAtCleared() {
		_spec.ClearField(sip.FieldCompletedAt, field.TypeTime)
	}
	if su.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sip.PreservationActionsTable,
			Columns: []string{sip.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPreservationActionsIDs(); len(nodes) > 0 && !su.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sip.PreservationActionsTable,
			Columns: []string{sip.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PreservationActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sip.PreservationActionsTable,
			Columns: []string{sip.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SIPUpdateOne is the builder for updating a single SIP entity.
type SIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SIPMutation
}

// SetName sets the "name" field.
func (suo *SIPUpdateOne) SetName(s string) *SIPUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableName(s *string) *SIPUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetWorkflowID sets the "workflow_id" field.
func (suo *SIPUpdateOne) SetWorkflowID(s string) *SIPUpdateOne {
	suo.mutation.SetWorkflowID(s)
	return suo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableWorkflowID(s *string) *SIPUpdateOne {
	if s != nil {
		suo.SetWorkflowID(*s)
	}
	return suo
}

// SetRunID sets the "run_id" field.
func (suo *SIPUpdateOne) SetRunID(u uuid.UUID) *SIPUpdateOne {
	suo.mutation.SetRunID(u)
	return suo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableRunID(u *uuid.UUID) *SIPUpdateOne {
	if u != nil {
		suo.SetRunID(*u)
	}
	return suo
}

// SetAipID sets the "aip_id" field.
func (suo *SIPUpdateOne) SetAipID(u uuid.UUID) *SIPUpdateOne {
	suo.mutation.SetAipID(u)
	return suo
}

// SetNillableAipID sets the "aip_id" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableAipID(u *uuid.UUID) *SIPUpdateOne {
	if u != nil {
		suo.SetAipID(*u)
	}
	return suo
}

// ClearAipID clears the value of the "aip_id" field.
func (suo *SIPUpdateOne) ClearAipID() *SIPUpdateOne {
	suo.mutation.ClearAipID()
	return suo
}

// SetLocationID sets the "location_id" field.
func (suo *SIPUpdateOne) SetLocationID(u uuid.UUID) *SIPUpdateOne {
	suo.mutation.SetLocationID(u)
	return suo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableLocationID(u *uuid.UUID) *SIPUpdateOne {
	if u != nil {
		suo.SetLocationID(*u)
	}
	return suo
}

// ClearLocationID clears the value of the "location_id" field.
func (suo *SIPUpdateOne) ClearLocationID() *SIPUpdateOne {
	suo.mutation.ClearLocationID()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SIPUpdateOne) SetStatus(i int8) *SIPUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableStatus(i *int8) *SIPUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SIPUpdateOne) AddStatus(i int8) *SIPUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// SetStartedAt sets the "started_at" field.
func (suo *SIPUpdateOne) SetStartedAt(t time.Time) *SIPUpdateOne {
	suo.mutation.SetStartedAt(t)
	return suo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableStartedAt(t *time.Time) *SIPUpdateOne {
	if t != nil {
		suo.SetStartedAt(*t)
	}
	return suo
}

// ClearStartedAt clears the value of the "started_at" field.
func (suo *SIPUpdateOne) ClearStartedAt() *SIPUpdateOne {
	suo.mutation.ClearStartedAt()
	return suo
}

// SetCompletedAt sets the "completed_at" field.
func (suo *SIPUpdateOne) SetCompletedAt(t time.Time) *SIPUpdateOne {
	suo.mutation.SetCompletedAt(t)
	return suo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (suo *SIPUpdateOne) SetNillableCompletedAt(t *time.Time) *SIPUpdateOne {
	if t != nil {
		suo.SetCompletedAt(*t)
	}
	return suo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (suo *SIPUpdateOne) ClearCompletedAt() *SIPUpdateOne {
	suo.mutation.ClearCompletedAt()
	return suo
}

// AddPreservationActionIDs adds the "preservation_actions" edge to the PreservationAction entity by IDs.
func (suo *SIPUpdateOne) AddPreservationActionIDs(ids ...int) *SIPUpdateOne {
	suo.mutation.AddPreservationActionIDs(ids...)
	return suo
}

// AddPreservationActions adds the "preservation_actions" edges to the PreservationAction entity.
func (suo *SIPUpdateOne) AddPreservationActions(p ...*PreservationAction) *SIPUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPreservationActionIDs(ids...)
}

// Mutation returns the SIPMutation object of the builder.
func (suo *SIPUpdateOne) Mutation() *SIPMutation {
	return suo.mutation
}

// ClearPreservationActions clears all "preservation_actions" edges to the PreservationAction entity.
func (suo *SIPUpdateOne) ClearPreservationActions() *SIPUpdateOne {
	suo.mutation.ClearPreservationActions()
	return suo
}

// RemovePreservationActionIDs removes the "preservation_actions" edge to PreservationAction entities by IDs.
func (suo *SIPUpdateOne) RemovePreservationActionIDs(ids ...int) *SIPUpdateOne {
	suo.mutation.RemovePreservationActionIDs(ids...)
	return suo
}

// RemovePreservationActions removes "preservation_actions" edges to PreservationAction entities.
func (suo *SIPUpdateOne) RemovePreservationActions(p ...*PreservationAction) *SIPUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePreservationActionIDs(ids...)
}

// Where appends a list predicates to the SIPUpdate builder.
func (suo *SIPUpdateOne) Where(ps ...predicate.SIP) *SIPUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SIPUpdateOne) Select(field string, fields ...string) *SIPUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated SIP entity.
func (suo *SIPUpdateOne) Save(ctx context.Context) (*SIP, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SIPUpdateOne) SaveX(ctx context.Context) *SIP {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SIPUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SIPUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SIPUpdateOne) sqlSave(ctx context.Context) (_node *SIP, err error) {
	_spec := sqlgraph.NewUpdateSpec(sip.Table, sip.Columns, sqlgraph.NewFieldSpec(sip.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SIP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sip.FieldID)
		for _, f := range fields {
			if !sip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != sip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sip.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.WorkflowID(); ok {
		_spec.SetField(sip.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := suo.mutation.RunID(); ok {
		_spec.SetField(sip.FieldRunID, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.AipID(); ok {
		_spec.SetField(sip.FieldAipID, field.TypeUUID, value)
	}
	if suo.mutation.AipIDCleared() {
		_spec.ClearField(sip.FieldAipID, field.TypeUUID)
	}
	if value, ok := suo.mutation.LocationID(); ok {
		_spec.SetField(sip.FieldLocationID, field.TypeUUID, value)
	}
	if suo.mutation.LocationIDCleared() {
		_spec.ClearField(sip.FieldLocationID, field.TypeUUID)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(sip.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(sip.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.StartedAt(); ok {
		_spec.SetField(sip.FieldStartedAt, field.TypeTime, value)
	}
	if suo.mutation.StartedAtCleared() {
		_spec.ClearField(sip.FieldStartedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.CompletedAt(); ok {
		_spec.SetField(sip.FieldCompletedAt, field.TypeTime, value)
	}
	if suo.mutation.CompletedAtCleared() {
		_spec.ClearField(sip.FieldCompletedAt, field.TypeTime)
	}
	if suo.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sip.PreservationActionsTable,
			Columns: []string{sip.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPreservationActionsIDs(); len(nodes) > 0 && !suo.mutation.PreservationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sip.PreservationActionsTable,
			Columns: []string{sip.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PreservationActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sip.PreservationActionsTable,
			Columns: []string{sip.PreservationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preservationaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SIP{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
