// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/preservationaction"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/sip"
)

// PreservationAction is the model entity for the PreservationAction schema.
type PreservationAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WorkflowID holds the value of the "workflow_id" field.
	WorkflowID string `json:"workflow_id,omitempty"`
	// Type holds the value of the "type" field.
	Type int8 `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// SipID holds the value of the "sip_id" field.
	SipID int `json:"sip_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PreservationActionQuery when eager-loading is set.
	Edges        PreservationActionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PreservationActionEdges holds the relations/edges for other nodes in the graph.
type PreservationActionEdges struct {
	// Sip holds the value of the sip edge.
	Sip *SIP `json:"sip,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*PreservationTask `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SipOrErr returns the Sip value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PreservationActionEdges) SipOrErr() (*SIP, error) {
	if e.Sip != nil {
		return e.Sip, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sip.Label}
	}
	return nil, &NotLoadedError{edge: "sip"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e PreservationActionEdges) TasksOrErr() ([]*PreservationTask, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PreservationAction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case preservationaction.FieldID, preservationaction.FieldType, preservationaction.FieldStatus, preservationaction.FieldSipID:
			values[i] = new(sql.NullInt64)
		case preservationaction.FieldWorkflowID:
			values[i] = new(sql.NullString)
		case preservationaction.FieldStartedAt, preservationaction.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PreservationAction fields.
func (pa *PreservationAction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case preservationaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case preservationaction.FieldWorkflowID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value.Valid {
				pa.WorkflowID = value.String
			}
		case preservationaction.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = int8(value.Int64)
			}
		case preservationaction.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = int8(value.Int64)
			}
		case preservationaction.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				pa.StartedAt = value.Time
			}
		case preservationaction.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				pa.CompletedAt = value.Time
			}
		case preservationaction.FieldSipID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sip_id", values[i])
			} else if value.Valid {
				pa.SipID = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PreservationAction.
// This includes values selected through modifiers, order, etc.
func (pa *PreservationAction) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QuerySip queries the "sip" edge of the PreservationAction entity.
func (pa *PreservationAction) QuerySip() *SIPQuery {
	return NewPreservationActionClient(pa.config).QuerySip(pa)
}

// QueryTasks queries the "tasks" edge of the PreservationAction entity.
func (pa *PreservationAction) QueryTasks() *PreservationTaskQuery {
	return NewPreservationActionClient(pa.config).QueryTasks(pa)
}

// Update returns a builder for updating this PreservationAction.
// Note that you need to call PreservationAction.Unwrap() before calling this method if this PreservationAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PreservationAction) Update() *PreservationActionUpdateOne {
	return NewPreservationActionClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PreservationAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PreservationAction) Unwrap() *PreservationAction {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("db: PreservationAction is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PreservationAction) String() string {
	var builder strings.Builder
	builder.WriteString("PreservationAction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("workflow_id=")
	builder.WriteString(pa.WorkflowID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pa.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(pa.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(pa.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sip_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.SipID))
	builder.WriteByte(')')
	return builder.String()
}

// PreservationActions is a parsable slice of PreservationAction.
type PreservationActions []*PreservationAction
