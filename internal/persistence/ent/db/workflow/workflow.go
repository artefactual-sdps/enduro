// Code generated by ent, DO NOT EDIT.

package workflow

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artefactual-sdps/enduro/internal/enums"
)

const (
	// Label holds the string label denoting the workflow type in the database.
	Label = "workflow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTemporalID holds the string denoting the temporal_id field in the database.
	FieldTemporalID = "temporal_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldSipID holds the string denoting the sip_id field in the database.
	FieldSipID = "sip_id"
	// EdgeSip holds the string denoting the sip edge name in mutations.
	EdgeSip = "sip"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the workflow in the database.
	Table = "workflow"
	// SipTable is the table that holds the sip relation/edge.
	SipTable = "workflow"
	// SipInverseTable is the table name for the SIP entity.
	// It exists in this package in order to avoid circular dependency with the "sip" package.
	SipInverseTable = "sip"
	// SipColumn is the table column denoting the sip relation/edge.
	SipColumn = "sip_id"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "task"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "task"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "workflow_id"
)

// Columns holds all SQL columns for workflow fields.
var Columns = []string{
	FieldID,
	FieldTemporalID,
	FieldType,
	FieldStatus,
	FieldStartedAt,
	FieldCompletedAt,
	FieldSipID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SipIDValidator is a validator for the "sip_id" field. It is called by the builders before save.
	SipIDValidator func(int) error
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enums.WorkflowType) error {
	switch _type.String() {
	case "create aip", "create and review aip":
		return nil
	default:
		return fmt.Errorf("workflow: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Workflow queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTemporalID orders the results by the temporal_id field.
func ByTemporalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemporalID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// BySipID orders the results by the sip_id field.
func BySipID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSipID, opts...).ToFunc()
}

// BySipField orders the results by sip field.
func BySipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSipStep(), sql.OrderByField(field, opts...))
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SipTable, SipColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}
