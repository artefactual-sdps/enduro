// Code generated by ent, DO NOT EDIT.

package preservationtask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the preservationtask type in the database.
	Label = "preservation_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldPreservationActionID holds the string denoting the preservation_action_id field in the database.
	FieldPreservationActionID = "preservation_action_id"
	// EdgeAction holds the string denoting the action edge name in mutations.
	EdgeAction = "action"
	// Table holds the table name of the preservationtask in the database.
	Table = "preservation_task"
	// ActionTable is the table that holds the action relation/edge.
	ActionTable = "preservation_task"
	// ActionInverseTable is the table name for the PreservationAction entity.
	// It exists in this package in order to avoid circular dependency with the "preservationaction" package.
	ActionInverseTable = "preservation_action"
	// ActionColumn is the table column denoting the action relation/edge.
	ActionColumn = "preservation_action_id"
)

// Columns holds all SQL columns for preservationtask fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldName,
	FieldStatus,
	FieldStartedAt,
	FieldCompletedAt,
	FieldNote,
	FieldPreservationActionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PreservationActionIDValidator is a validator for the "preservation_action_id" field. It is called by the builders before save.
	PreservationActionIDValidator func(int) error
)

// OrderOption defines the ordering options for the PreservationTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByPreservationActionID orders the results by the preservation_action_id field.
func ByPreservationActionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreservationActionID, opts...).ToFunc()
}

// ByActionField orders the results by action field.
func ByActionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionStep(), sql.OrderByField(field, opts...))
	}
}
func newActionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActionTable, ActionColumn),
	)
}
