// Code generated by ent, DO NOT EDIT.

package sip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artefactual-sdps/enduro/internal/persistence/ent/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SIP {
	return predicate.SIP(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SIP {
	return predicate.SIP(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SIP {
	return predicate.SIP(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SIP {
	return predicate.SIP(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SIP {
	return predicate.SIP(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SIP {
	return predicate.SIP(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SIP {
	return predicate.SIP(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldName, v))
}

// AipID applies equality check predicate on the "aip_id" field. It's identical to AipIDEQ.
func AipID(v uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldAipID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldCreatedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldCompletedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SIP {
	return predicate.SIP(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SIP {
	return predicate.SIP(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SIP {
	return predicate.SIP(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SIP {
	return predicate.SIP(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SIP {
	return predicate.SIP(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SIP {
	return predicate.SIP(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SIP {
	return predicate.SIP(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SIP {
	return predicate.SIP(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SIP {
	return predicate.SIP(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SIP {
	return predicate.SIP(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SIP {
	return predicate.SIP(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SIP {
	return predicate.SIP(sql.FieldContainsFold(FieldName, v))
}

// AipIDEQ applies the EQ predicate on the "aip_id" field.
func AipIDEQ(v uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldAipID, v))
}

// AipIDNEQ applies the NEQ predicate on the "aip_id" field.
func AipIDNEQ(v uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldNEQ(FieldAipID, v))
}

// AipIDIn applies the In predicate on the "aip_id" field.
func AipIDIn(vs ...uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldIn(FieldAipID, vs...))
}

// AipIDNotIn applies the NotIn predicate on the "aip_id" field.
func AipIDNotIn(vs ...uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldNotIn(FieldAipID, vs...))
}

// AipIDGT applies the GT predicate on the "aip_id" field.
func AipIDGT(v uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldGT(FieldAipID, v))
}

// AipIDGTE applies the GTE predicate on the "aip_id" field.
func AipIDGTE(v uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldGTE(FieldAipID, v))
}

// AipIDLT applies the LT predicate on the "aip_id" field.
func AipIDLT(v uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldLT(FieldAipID, v))
}

// AipIDLTE applies the LTE predicate on the "aip_id" field.
func AipIDLTE(v uuid.UUID) predicate.SIP {
	return predicate.SIP(sql.FieldLTE(FieldAipID, v))
}

// AipIDIsNil applies the IsNil predicate on the "aip_id" field.
func AipIDIsNil() predicate.SIP {
	return predicate.SIP(sql.FieldIsNull(FieldAipID))
}

// AipIDNotNil applies the NotNil predicate on the "aip_id" field.
func AipIDNotNil() predicate.SIP {
	return predicate.SIP(sql.FieldNotNull(FieldAipID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.SIP {
	return predicate.SIP(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.SIP {
	return predicate.SIP(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.SIP {
	return predicate.SIP(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.SIP {
	return predicate.SIP(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.SIP {
	return predicate.SIP(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.SIP {
	return predicate.SIP(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.SIP {
	return predicate.SIP(sql.FieldLTE(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldLTE(FieldCreatedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.SIP {
	return predicate.SIP(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.SIP {
	return predicate.SIP(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.SIP {
	return predicate.SIP(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.SIP {
	return predicate.SIP(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.SIP {
	return predicate.SIP(sql.FieldNotNull(FieldCompletedAt))
}

// HasWorkflows applies the HasEdge predicate on the "workflows" edge.
func HasWorkflows() predicate.SIP {
	return predicate.SIP(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkflowsTable, WorkflowsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowsWith applies the HasEdge predicate on the "workflows" edge with a given conditions (other predicates).
func HasWorkflowsWith(preds ...predicate.Workflow) predicate.SIP {
	return predicate.SIP(func(s *sql.Selector) {
		step := newWorkflowsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SIP) predicate.SIP {
	return predicate.SIP(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SIP) predicate.SIP {
	return predicate.SIP(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SIP) predicate.SIP {
	return predicate.SIP(sql.NotPredicates(p))
}
