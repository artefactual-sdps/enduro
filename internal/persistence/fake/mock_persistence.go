// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/persistence (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/persistence/fake/mock_persistence.go -package=fake github.com/artefactual-sdps/enduro/internal/persistence Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	datatypes "github.com/artefactual-sdps/enduro/internal/datatypes"
	persistence "github.com/artefactual-sdps/enduro/internal/persistence"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateSIP mocks base method.
func (m *MockService) CreateSIP(arg0 context.Context, arg1 *datatypes.SIP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSIP indicates an expected call of CreateSIP.
func (mr *MockServiceMockRecorder) CreateSIP(arg0, arg1 any) *MockServiceCreateSIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSIP", reflect.TypeOf((*MockService)(nil).CreateSIP), arg0, arg1)
	return &MockServiceCreateSIPCall{Call: call}
}

// MockServiceCreateSIPCall wrap *gomock.Call
type MockServiceCreateSIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateSIPCall) Return(arg0 error) *MockServiceCreateSIPCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateSIPCall) Do(f func(context.Context, *datatypes.SIP) error) *MockServiceCreateSIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateSIPCall) DoAndReturn(f func(context.Context, *datatypes.SIP) error) *MockServiceCreateSIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTask mocks base method.
func (m *MockService) CreateTask(arg0 context.Context, arg1 *datatypes.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockServiceMockRecorder) CreateTask(arg0, arg1 any) *MockServiceCreateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockService)(nil).CreateTask), arg0, arg1)
	return &MockServiceCreateTaskCall{Call: call}
}

// MockServiceCreateTaskCall wrap *gomock.Call
type MockServiceCreateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateTaskCall) Return(arg0 error) *MockServiceCreateTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateTaskCall) Do(f func(context.Context, *datatypes.Task) error) *MockServiceCreateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateTaskCall) DoAndReturn(f func(context.Context, *datatypes.Task) error) *MockServiceCreateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateWorkflow mocks base method.
func (m *MockService) CreateWorkflow(arg0 context.Context, arg1 *datatypes.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockServiceMockRecorder) CreateWorkflow(arg0, arg1 any) *MockServiceCreateWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockService)(nil).CreateWorkflow), arg0, arg1)
	return &MockServiceCreateWorkflowCall{Call: call}
}

// MockServiceCreateWorkflowCall wrap *gomock.Call
type MockServiceCreateWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateWorkflowCall) Return(arg0 error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateWorkflowCall) Do(f func(context.Context, *datatypes.Workflow) error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateWorkflowCall) DoAndReturn(f func(context.Context, *datatypes.Workflow) error) *MockServiceCreateWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSIP mocks base method.
func (m *MockService) DeleteSIP(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSIP indicates an expected call of DeleteSIP.
func (mr *MockServiceMockRecorder) DeleteSIP(arg0, arg1 any) *MockServiceDeleteSIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSIP", reflect.TypeOf((*MockService)(nil).DeleteSIP), arg0, arg1)
	return &MockServiceDeleteSIPCall{Call: call}
}

// MockServiceDeleteSIPCall wrap *gomock.Call
type MockServiceDeleteSIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteSIPCall) Return(arg0 error) *MockServiceDeleteSIPCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteSIPCall) Do(f func(context.Context, int) error) *MockServiceDeleteSIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteSIPCall) DoAndReturn(f func(context.Context, int) error) *MockServiceDeleteSIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSIPs mocks base method.
func (m *MockService) ListSIPs(arg0 context.Context, arg1 *persistence.SIPFilter) ([]*datatypes.SIP, *persistence.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSIPs", arg0, arg1)
	ret0, _ := ret[0].([]*datatypes.SIP)
	ret1, _ := ret[1].(*persistence.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSIPs indicates an expected call of ListSIPs.
func (mr *MockServiceMockRecorder) ListSIPs(arg0, arg1 any) *MockServiceListSIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSIPs", reflect.TypeOf((*MockService)(nil).ListSIPs), arg0, arg1)
	return &MockServiceListSIPsCall{Call: call}
}

// MockServiceListSIPsCall wrap *gomock.Call
type MockServiceListSIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListSIPsCall) Return(arg0 []*datatypes.SIP, arg1 *persistence.Page, arg2 error) *MockServiceListSIPsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListSIPsCall) Do(f func(context.Context, *persistence.SIPFilter) ([]*datatypes.SIP, *persistence.Page, error)) *MockServiceListSIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListSIPsCall) DoAndReturn(f func(context.Context, *persistence.SIPFilter) ([]*datatypes.SIP, *persistence.Page, error)) *MockServiceListSIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSIP mocks base method.
func (m *MockService) UpdateSIP(arg0 context.Context, arg1 uuid.UUID, arg2 persistence.SIPUpdater) (*datatypes.SIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSIP", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datatypes.SIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSIP indicates an expected call of UpdateSIP.
func (mr *MockServiceMockRecorder) UpdateSIP(arg0, arg1, arg2 any) *MockServiceUpdateSIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSIP", reflect.TypeOf((*MockService)(nil).UpdateSIP), arg0, arg1, arg2)
	return &MockServiceUpdateSIPCall{Call: call}
}

// MockServiceUpdateSIPCall wrap *gomock.Call
type MockServiceUpdateSIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateSIPCall) Return(arg0 *datatypes.SIP, arg1 error) *MockServiceUpdateSIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateSIPCall) Do(f func(context.Context, uuid.UUID, persistence.SIPUpdater) (*datatypes.SIP, error)) *MockServiceUpdateSIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateSIPCall) DoAndReturn(f func(context.Context, uuid.UUID, persistence.SIPUpdater) (*datatypes.SIP, error)) *MockServiceUpdateSIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateTask mocks base method.
func (m *MockService) UpdateTask(arg0 context.Context, arg1 int, arg2 persistence.TaskUpdater) (*datatypes.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datatypes.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockServiceMockRecorder) UpdateTask(arg0, arg1, arg2 any) *MockServiceUpdateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockService)(nil).UpdateTask), arg0, arg1, arg2)
	return &MockServiceUpdateTaskCall{Call: call}
}

// MockServiceUpdateTaskCall wrap *gomock.Call
type MockServiceUpdateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateTaskCall) Return(arg0 *datatypes.Task, arg1 error) *MockServiceUpdateTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateTaskCall) Do(f func(context.Context, int, persistence.TaskUpdater) (*datatypes.Task, error)) *MockServiceUpdateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateTaskCall) DoAndReturn(f func(context.Context, int, persistence.TaskUpdater) (*datatypes.Task, error)) *MockServiceUpdateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
