// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/persistence (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/persistence/fake/mock_persistence.go -package=fake github.com/artefactual-sdps/enduro/internal/persistence Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	datatypes "github.com/artefactual-sdps/enduro/internal/datatypes"
	persistence "github.com/artefactual-sdps/enduro/internal/persistence"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreatePackage mocks base method.
func (m *MockService) CreatePackage(arg0 context.Context, arg1 *datatypes.Package) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockServiceMockRecorder) CreatePackage(arg0, arg1 any) *MockServiceCreatePackageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockService)(nil).CreatePackage), arg0, arg1)
	return &MockServiceCreatePackageCall{Call: call}
}

// MockServiceCreatePackageCall wrap *gomock.Call
type MockServiceCreatePackageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreatePackageCall) Return(arg0 error) *MockServiceCreatePackageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreatePackageCall) Do(f func(context.Context, *datatypes.Package) error) *MockServiceCreatePackageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreatePackageCall) DoAndReturn(f func(context.Context, *datatypes.Package) error) *MockServiceCreatePackageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePackage mocks base method.
func (m *MockService) UpdatePackage(arg0 context.Context, arg1 uint, arg2 persistence.PackageUpdater) (*datatypes.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datatypes.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackage indicates an expected call of UpdatePackage.
func (mr *MockServiceMockRecorder) UpdatePackage(arg0, arg1, arg2 any) *MockServiceUpdatePackageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackage", reflect.TypeOf((*MockService)(nil).UpdatePackage), arg0, arg1, arg2)
	return &MockServiceUpdatePackageCall{Call: call}
}

// MockServiceUpdatePackageCall wrap *gomock.Call
type MockServiceUpdatePackageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdatePackageCall) Return(arg0 *datatypes.Package, arg1 error) *MockServiceUpdatePackageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdatePackageCall) Do(f func(context.Context, uint, persistence.PackageUpdater) (*datatypes.Package, error)) *MockServiceUpdatePackageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdatePackageCall) DoAndReturn(f func(context.Context, uint, persistence.PackageUpdater) (*datatypes.Package, error)) *MockServiceUpdatePackageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
