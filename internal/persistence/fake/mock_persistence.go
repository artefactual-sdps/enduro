// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/persistence (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/persistence/fake/mock_persistence.go -package=fake github.com/artefactual-sdps/enduro/internal/persistence Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	datatypes "github.com/artefactual-sdps/enduro/internal/datatypes"
	persistence "github.com/artefactual-sdps/enduro/internal/persistence"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreatePackage mocks base method.
func (m *MockService) CreatePackage(arg0 context.Context, arg1 *datatypes.Package) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockServiceMockRecorder) CreatePackage(arg0, arg1 any) *MockServiceCreatePackageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockService)(nil).CreatePackage), arg0, arg1)
	return &MockServiceCreatePackageCall{Call: call}
}

// MockServiceCreatePackageCall wrap *gomock.Call
type MockServiceCreatePackageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreatePackageCall) Return(arg0 error) *MockServiceCreatePackageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreatePackageCall) Do(f func(context.Context, *datatypes.Package) error) *MockServiceCreatePackageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreatePackageCall) DoAndReturn(f func(context.Context, *datatypes.Package) error) *MockServiceCreatePackageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePreservationAction mocks base method.
func (m *MockService) CreatePreservationAction(arg0 context.Context, arg1 *datatypes.PreservationAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreservationAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePreservationAction indicates an expected call of CreatePreservationAction.
func (mr *MockServiceMockRecorder) CreatePreservationAction(arg0, arg1 any) *MockServiceCreatePreservationActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreservationAction", reflect.TypeOf((*MockService)(nil).CreatePreservationAction), arg0, arg1)
	return &MockServiceCreatePreservationActionCall{Call: call}
}

// MockServiceCreatePreservationActionCall wrap *gomock.Call
type MockServiceCreatePreservationActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreatePreservationActionCall) Return(arg0 error) *MockServiceCreatePreservationActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreatePreservationActionCall) Do(f func(context.Context, *datatypes.PreservationAction) error) *MockServiceCreatePreservationActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreatePreservationActionCall) DoAndReturn(f func(context.Context, *datatypes.PreservationAction) error) *MockServiceCreatePreservationActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePreservationTask mocks base method.
func (m *MockService) CreatePreservationTask(arg0 context.Context, arg1 *datatypes.PreservationTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreservationTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePreservationTask indicates an expected call of CreatePreservationTask.
func (mr *MockServiceMockRecorder) CreatePreservationTask(arg0, arg1 any) *MockServiceCreatePreservationTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreservationTask", reflect.TypeOf((*MockService)(nil).CreatePreservationTask), arg0, arg1)
	return &MockServiceCreatePreservationTaskCall{Call: call}
}

// MockServiceCreatePreservationTaskCall wrap *gomock.Call
type MockServiceCreatePreservationTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreatePreservationTaskCall) Return(arg0 error) *MockServiceCreatePreservationTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreatePreservationTaskCall) Do(f func(context.Context, *datatypes.PreservationTask) error) *MockServiceCreatePreservationTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreatePreservationTaskCall) DoAndReturn(f func(context.Context, *datatypes.PreservationTask) error) *MockServiceCreatePreservationTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePreservationTasks mocks base method.
func (m *MockService) CreatePreservationTasks(arg0 context.Context, arg1 func(func(*datatypes.PreservationTask) bool)) ([]*datatypes.PreservationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreservationTasks", arg0, arg1)
	ret0, _ := ret[0].([]*datatypes.PreservationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreservationTasks indicates an expected call of CreatePreservationTasks.
func (mr *MockServiceMockRecorder) CreatePreservationTasks(arg0, arg1 any) *MockServiceCreatePreservationTasksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreservationTasks", reflect.TypeOf((*MockService)(nil).CreatePreservationTasks), arg0, arg1)
	return &MockServiceCreatePreservationTasksCall{Call: call}
}

// MockServiceCreatePreservationTasksCall wrap *gomock.Call
type MockServiceCreatePreservationTasksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreatePreservationTasksCall) Return(arg0 []*datatypes.PreservationTask, arg1 error) *MockServiceCreatePreservationTasksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreatePreservationTasksCall) Do(f func(context.Context, func(func(*datatypes.PreservationTask) bool)) ([]*datatypes.PreservationTask, error)) *MockServiceCreatePreservationTasksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreatePreservationTasksCall) DoAndReturn(f func(context.Context, func(func(*datatypes.PreservationTask) bool)) ([]*datatypes.PreservationTask, error)) *MockServiceCreatePreservationTasksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPackages mocks base method.
func (m *MockService) ListPackages(arg0 context.Context, arg1 *persistence.PackageFilter) ([]*datatypes.Package, *persistence.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", arg0, arg1)
	ret0, _ := ret[0].([]*datatypes.Package)
	ret1, _ := ret[1].(*persistence.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockServiceMockRecorder) ListPackages(arg0, arg1 any) *MockServiceListPackagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockService)(nil).ListPackages), arg0, arg1)
	return &MockServiceListPackagesCall{Call: call}
}

// MockServiceListPackagesCall wrap *gomock.Call
type MockServiceListPackagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListPackagesCall) Return(arg0 []*datatypes.Package, arg1 *persistence.Page, arg2 error) *MockServiceListPackagesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListPackagesCall) Do(f func(context.Context, *persistence.PackageFilter) ([]*datatypes.Package, *persistence.Page, error)) *MockServiceListPackagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListPackagesCall) DoAndReturn(f func(context.Context, *persistence.PackageFilter) ([]*datatypes.Package, *persistence.Page, error)) *MockServiceListPackagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePackage mocks base method.
func (m *MockService) UpdatePackage(arg0 context.Context, arg1 int, arg2 persistence.PackageUpdater) (*datatypes.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datatypes.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackage indicates an expected call of UpdatePackage.
func (mr *MockServiceMockRecorder) UpdatePackage(arg0, arg1, arg2 any) *MockServiceUpdatePackageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackage", reflect.TypeOf((*MockService)(nil).UpdatePackage), arg0, arg1, arg2)
	return &MockServiceUpdatePackageCall{Call: call}
}

// MockServiceUpdatePackageCall wrap *gomock.Call
type MockServiceUpdatePackageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdatePackageCall) Return(arg0 *datatypes.Package, arg1 error) *MockServiceUpdatePackageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdatePackageCall) Do(f func(context.Context, int, persistence.PackageUpdater) (*datatypes.Package, error)) *MockServiceUpdatePackageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdatePackageCall) DoAndReturn(f func(context.Context, int, persistence.PackageUpdater) (*datatypes.Package, error)) *MockServiceUpdatePackageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePreservationTask mocks base method.
func (m *MockService) UpdatePreservationTask(arg0 context.Context, arg1 int, arg2 persistence.PresTaskUpdater) (*datatypes.PreservationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreservationTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datatypes.PreservationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePreservationTask indicates an expected call of UpdatePreservationTask.
func (mr *MockServiceMockRecorder) UpdatePreservationTask(arg0, arg1, arg2 any) *MockServiceUpdatePreservationTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreservationTask", reflect.TypeOf((*MockService)(nil).UpdatePreservationTask), arg0, arg1, arg2)
	return &MockServiceUpdatePreservationTaskCall{Call: call}
}

// MockServiceUpdatePreservationTaskCall wrap *gomock.Call
type MockServiceUpdatePreservationTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdatePreservationTaskCall) Return(arg0 *datatypes.PreservationTask, arg1 error) *MockServiceUpdatePreservationTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdatePreservationTaskCall) Do(f func(context.Context, int, persistence.PresTaskUpdater) (*datatypes.PreservationTask, error)) *MockServiceUpdatePreservationTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdatePreservationTaskCall) DoAndReturn(f func(context.Context, int, persistence.PresTaskUpdater) (*datatypes.PreservationTask, error)) *MockServiceUpdatePreservationTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
